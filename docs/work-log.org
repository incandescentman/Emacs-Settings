#+TITLE: Work Log
#+AUTHOR: Jay Dixit
#+DATE: [2025-01-27 Mon]

* 2025-10-14: Updated Emacs Calendar documentation

** Summary
- Reviewed the local Emacs calendar guide (`emacs-calendar-instructions-claude.org`).
- Compared it with the official GNU Emacs manual for the calendar/diary features.
- The local guide was found to be accurate and comprehensive for the user's specific workflow.
- Added an appendix to the local guide explaining the different types of diary entries (single, weekly, monthly, yearly, anniversary, block, and cyclic) based on the official manual.

** Files Modified
- `emacs-calendar-instructions-claude.org`: Added appendix with detailed explanations of diary entry types.
- `docs/work-log.org`: Added this entry.

* 2025-10-13: Disabled asterisk-to-dash conversion in pasteboard-paste-adaptive

** Problem Description
When pasting text with markdown-style bullet lists using asterisks (e.g., `* item`), `pasteboard-paste-adaptive` was automatically converting them to org-mode hyphens (e.g., `- item`). This was undesirable in some workflows where preserving the original asterisk format was preferred.

** Root Cause
The `pasteboard--clean-string` function (called by `pasteboard-paste-adaptive`) was invoking `asterisk-to-dash-and-convert-code-blocks-to-org` from `shared-functions.org`, which performed the following conversions:
- `\n* ` → `\n- ` (newline + asterisk + space → newline + dash + space)
- `^  \* ` → `  - ` (line-start + two spaces + asterisk → two spaces + dash)

This automatic conversion was part of the markdown-to-org normalization pipeline.

** Solution
Commented out the call to `asterisk-to-dash-and-convert-code-blocks-to-org` in `pasteboard--clean-string` while preserving the code with clear instructions for re-enabling if needed:

#+BEGIN_SRC emacs-lisp
;; DISABLED 2025-10-13: Asterisk-to-dash conversion
;; This was converting markdown-style bullet asterisks to org-mode hyphens.
;; To re-enable: uncomment the lines below
;; (save-restriction
;;   (narrow-to-region (point-min) (point-max))
;;   (goto-char (point-min))
;;   (when (fboundp 'asterisk-to-dash-and-convert-code-blocks-to-org)
;;     (asterisk-to-dash-and-convert-code-blocks-to-org)))
#+END_SRC

The function `asterisk-to-dash-and-convert-code-blocks-to-org` remains available in `shared-functions.org:9435-9454` and can be called manually or re-enabled by uncommenting the code.

** Files Modified
- `pasteboard-copy-and-paste-functions.org:568-575` - Commented out asterisk-to-dash conversion with reversion instructions
- `docs/work-log.org` - Added this entry

** Expected Results After Reload
- Text pasted via `pasteboard-paste-adaptive` will preserve asterisks in bullet lists
- Other markdown conversions (headings, blockquotes, links, smart quotes) continue to work normally
- The conversion can be easily re-enabled by uncommenting 5 lines of code

** Reverting This Change
To restore the asterisk-to-dash conversion:
1. Edit `pasteboard-copy-and-paste-functions.org` line 568-575
2. Uncomment the `(save-restriction ...)` block
3. Retangle the file or reload Emacs

** Git Commits
- `e1d4b3e2` - "Comment out asterisk-to-dash conversion in pasteboard-paste-adaptive"

* 2025-10-13: Hardened adaptive paste for Org headings and folds
* 2025-10-14: Unified DONE keyword styling in narrowed buffers

** Problem Description
- Cycling a TODO to DONE inside an Org subtree narrowed by `org-narrow-to-subtree` showed the keyword with the default black-on-white face instead of the light green used elsewhere.
- The mismatch was distracting in focused writing sessions where narrowed buffers are the norm.

** Root Cause
- Narrowing spawns an indirect buffer that does not rerun `hl-todo-mode`, so the light-green overlay responsible for the usual appearance never activated.
- With the overlay absent, Org fell back to the baseline `org-todo-keyword-faces` entry, which still used black text on white.

* 2025-10-14: Info directory troubleshooting handoff
** Summary
- Tracked down why `M-x info` was hiding Calendar/Diary nodes; removed old buffer-killing hooks and normalized `Info-directory-list` handling.
- Added optional local manual support and created `info/dir` aliases pointing to `(emacs)Calendar/Diary` and `(emacs)Diary`.
- Captured the full investigation, commands, and open questions in `docs/info-calendar-debug.org` for follow-up.

** Current State
- Config merges Homebrew’s info path plus `~/emacs/emacs-settings/info`; `Info-directory-list` shows the custom dir, but the top-level menu still omits the new entries.
- Calendar/Diary documentation confirmed inside `/opt/homebrew/share/info/emacs.info.gz` via `rg`.
- Need to determine whether Info ignores additive `dir` files or if `install-info` merges are required.

** Next Steps
1. Test `install-info info/dir <scratch-dir>` to see if merging entries surfaces Calendar/Diary.
2. Temporarily advise `Info-insert-dir` to log which `dir` files are read and in what order.
3. Consider generating standalone manuals if aliasing continues to fail.

** Files & Commits
- `shared-functions.org` (`Allow Info buffer to open`, `Restore default Info directory search`) for cleanup and hook adjustments.
- `spacemacs.d/init.el`, `spacemacs.d/init-working.el` synced with new Info lookup logic.
- New notes: `docs/info-calendar-debug.org`, `info/dir`.

** Solution
- Updated the `("DONE" …)` entry in both the literate and tangled configs to render white text on a forest-green background with a slight box padding, matching the indirect-buffer experience.
- Mirrored the change in the `hl-todo-keyword-faces` palette so the overlay keeps the same styling when it *is* present.

** Files Modified
- `shared-functions.org:959,994` – switched DONE keyword face and matching hl-todo face to white-on-forest-green with padding box.
- `shared-functions.el:639,670` – tangled output reflects the same face adjustments.

** Expected Results After Reload
- DONE keywords appear white on green whether or not `hl-todo-mode` is active, ensuring consistent visuals in narrowed and full buffers.

** Follow-up: Display-aware notch hiding

- Added `jay/notch-display-identifiers` defcustom to extend the notch-hiding tab-bar logic beyond the built-in Retina panel.
- Extracted `jay/current-display-attributes` helper and refreshed `jay/on-notch-display-p` so detection can be reused elsewhere.
- Introduced `jay/add-current-display-to-notch-list` for quickly adding the current monitor’s name at runtime.
- Both `shared-functions.org` and the tangled `shared-functions.el` now reflect the new helpers.

* 2025-10-14: Display-aware notch hiding for tab bar

** Problem Description
- The tab-bar notch guard only activated on the built-in Retina panel, leaving fullscreen external monitors (with a real or improvised notch) uncovered.
- Manually enabling `tab-bar-mode` stuck until the next focus change, when the auto-update logic disabled it again.

** Root Cause
- `jay/on-macbook-display-p` hard-coded a string match for “Built-in”/“Retina Display” and returned nil for any other monitor.
- The detection logic lived inline, making it awkward to extend and re-use when adding monitors dynamically.

** Solution
- Added `jay/notch-display-identifiers` defcustom so additional monitor names (regex patterns) can opt into notch coverage.
- Extracted `jay/current-display-attributes` to isolate frame→monitor resolution and refactored `jay/on-notch-display-p` to call it.
- Created `jay/add-current-display-to-notch-list` for recording the active monitor’s name at runtime; the list can be persisted via Customize.

** Files Modified
- `shared-functions.org:9720-9845` – new defcustom, helpers, and interactive command; update docstrings/messages.
- `shared-functions.el:6400-6535` – tangled configuration mirrors the new display helpers and command.
- `docs/work-log.org` – logged the change.

** Expected Results After Reload
- Adding an external monitor’s name to `jay/notch-display-identifiers` (or calling `jay/add-current-display-to-notch-list`) brings the notch-hiding tab bar to that screen whenever the frame is fullscreen or maximized.
- `jay/debug-display-detection` now reports whether the current monitor is earmarked for notch coverage, aiding future tweaks.

* 2025-10-11: Fixed ispell warnings and duplicate org-roam loading

** Problem Description
Two issues were present during Emacs startup:
1. Ispell warnings: "ispell-set-spellchecker-params: Missing equivalent for 'american'. Skipping." and "Missing equivalent for 'english'. Skipping."
2. Duplicate org-roam initialization: org-roam-config.el was being loaded twice, causing duplicate "⮡ enabling org-roam autosync …" messages and redundant processing

** Root Cause

*** Ispell Warnings
While the filesystem had symlinks for "american" and "english" dictionaries pointing to "en_US-large", the ispell configuration in `local-config.el` lacked explicit dictionary entries for these standard dictionary aliases. When ispell.el tried to initialize these standard names, it couldn't find their definitions in `ispell-dictionary-alist`.

*** Duplicate org-roam Loading
The file `org-roam-config.el` was being loaded in two places:
1. In `spacemacs-new-config.el:149` (intentional, correct location)
2. In `shared-functions.org:5435` / `shared-functions.el:3622` (redundant)

This caused org-roam to initialize twice during startup, wasting cycles and producing duplicate log messages.

** Solution

*** Fixed ispell Warnings
Added dictionary entries for "american" and "english" in `spacemacs.d/init.el` in the `dotspacemacs/user-init` function (lines 893-900):

#+BEGIN_SRC emacs-lisp
;; Add dictionary entries for standard aliases to suppress warnings
(with-eval-after-load 'ispell
  (add-to-list 'ispell-dictionary-alist
               '("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))
  (add-to-list 'ispell-dictionary-alist
               '("american" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US-large") nil utf-8))
  (add-to-list 'ispell-dictionary-alist
               '("english" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US-large") nil utf-8)))
#+END_SRC

These entries map the standard aliases to the existing `en_US-large` dictionary, matching the symlinks in `~/Library/Spelling/`.

**Debugging note**: Initially tried adding these entries to `local-config.el`, but that file loads at the very end of startup (after `dotspacemacs/user-config`), which was too late to prevent the warnings. Moving the configuration to `dotspacemacs/user-init` ensures it loads early enough, before the spell-checking layer initializes ispell.

*** Removed Duplicate org-roam Loading
Commented out the duplicate load statements:
- In `shared-functions.org:5436`: Changed `(load "/Users/jay/emacs/emacs-settings/org-roam-config.el")` to a comment with explanation
- In `shared-functions.el:3623`: Applied the same change to the tangled output

The file continues to load once from `spacemacs-new-config.el`, which is the correct location.

** Files Modified
- `spacemacs.d/init.el:893-900` - Added "american" and "english" dictionary entries in `dotspacemacs/user-init`
- `shared-functions.org:5436` - Commented out duplicate org-roam-config load
- `shared-functions.el:3623` - Commented out duplicate org-roam-config load
- `local-config.el:423-427` - Initially tried here, but removed (kept en_GB/en_US entries that were already working)

** Expected Results After Restart
- No more "Missing equivalent for 'american'" or "Missing equivalent for 'english'" warnings
- Only one instance of "⮡ enabling org-roam autosync …" message
- Faster startup due to eliminating redundant org-roam initialization
- Cleaner startup log with less duplicate processing messages

** Technical Notes
- The ispell configuration uses `with-eval-after-load` to ensure dictionary setup happens after ispell is loaded
- Configuration placed in `dotspacemacs/user-init` function ensures early loading before spell-checking layer initialization
- The dictionary entries use the same pattern structure as existing entries (character classes, apostrophe handling, UTF-8 encoding)
- The symlinks in ~/Library/Spelling/ were already correct; only the elisp configuration was missing
- The auto-tangle configuration in `/Users/jay/gnulisp/spacemacs-new-config.el` will keep shared-functions.org and .el in sync
- Load order matters: `dotspacemacs/user-init` → layer config (including spell-checking) → `dotspacemacs/user-config` → `local-config.el`

* 2025-10-11: Fixed file-notify errors with Dropbox sync

** Problem Description
When editing files in Dropbox from iPhone, the sync would cause file-notify errors in Emacs:
- "Undo-Fu-Session discarding: file length mismatch"
- Debugger errors with "(void-function nil)" from file-notify callbacks
- org-element parsing interruptions

** Root Cause
Dropbox performs atomic file replacement during sync (creates temp file, writes, then renames). This confuses Emacs file watchers which have nil callbacks after the file replacement.

** Solution
Added comprehensive file watcher error suppression in `spacemacs.d/init.el:931-962`:

*** 1. Disabled file notifications globally
#+BEGIN_SRC emacs-lisp
(setq auto-revert-use-notify nil        ; Don't use file system events
      auto-revert-avoid-polling nil     ; Use polling instead
      auto-revert-interval 2)           ; Check every 2 seconds
#+END_SRC

*** 2. Created cloud storage detection function
#+BEGIN_SRC emacs-lisp
(defun my/disable-file-notify-for-cloud-storage ()
  "Disable file notifications for files in cloud storage directories."
  (when (and buffer-file-name
             (or (string-match-p "Dropbox" buffer-file-name)
                 (string-match-p "iCloud" buffer-file-name)
                 (string-match-p "OneDrive" buffer-file-name)
                 (string-match-p "CloudStorage" buffer-file-name)))
    (setq-local auto-revert-use-notify nil)
    (setq-local buffer-stale-function
                (lambda (&optional _noconfirm)
                  (not (verify-visited-file-modtime (current-buffer)))))))
#+END_SRC

*** 3. Added error suppression for file-notify
#+BEGIN_SRC emacs-lisp
(defadvice file-notify-add-watch (around suppress-file-notify-errors activate)
  "Suppress errors from file-notify-add-watch."
  (condition-case nil
      ad-do-it
    (error nil)))
#+END_SRC

*** 4. Excluded cloud storage from undo-fu-session
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'undo-fu-session
  (setq undo-fu-session-incompatible-files
        '("\.gpg$" "/Dropbox/" "/CloudStorage/" "/iCloud/" "\.org_archive$")))
#+END_SRC

** Files Modified
- `spacemacs.d/init.el:925-962` - Added comprehensive file watcher error suppression

** Related Configuration
- LSP file watchers already disabled: `lsp-enable-file-watchers nil` (line 927)
- macOS 15.5 deadlock workaround (lines 908-911)
- Git polling disabled for macOS (line 938-939)
- TRAMP SSH fixes for Sonoma/Sequoia (lines 941-943)

** Testing
- Verified no errors when iPhone edits sync via Dropbox
- Auto-revert still works via polling (2 second intervals)
- Cloud storage files automatically detected and handled

* 2025-10-11: Removed unused packages to improve startup time

** Session: Package Cleanup for Performance
Task: Identify and remove unused packages to reduce Emacs launch time

** Packages Removed

*** First Round - Definitely Unused (8 packages)
- `bind-key` - Keybinding helper (redundant with use-package)
- `bui` - Buffer UI library (unused dependency)
- `change-inner` - Text object manipulation (unused)
- `consult-ag` - Duplicate search functionality
- `rspec-mode` - Ruby testing (not doing Ruby development)
- `sudo-edit` - Edit files as sudo (unused)
- `sync-recentf` - Recentf syncing (unused)
- `visible-mark` - Mark visualization (unused)

*** Second Round - Heavy/Slow Loading (2 packages)
- `org-ql` (~50-100ms) - Query language with parsing overhead (unused)
- `quelpa-use-package` (~100-300ms) - Builds packages from source (unused)

** Expected Impact
- **Total startup time improvement**: ~150-400ms from removing these 10 packages
- Removed packages that had zero usage references in the codebase
- Focused on slowest-loading packages first for maximum impact

## Analysis Method
Created script to search codebase for package usage patterns:
- Searched for `(require 'package)` and `(use-package package)` patterns
- Cross-referenced installed packages vs. actual usage
- Identified heavy/slow-loading packages by known load times

## Additional Candidates for Future Cleanup
Identified but not yet removed (awaiting testing):
- `org-contrib` (~100-200ms) - ox-extra is now in org core
- `counsel`/`counsel-fd`/`counsel-projectile` (~100-180ms total) - Redundant with compleseus/vertico
- `consult-projectile` (~30-70ms)
- `with-editor` (~30-60ms) - Magit dependency, but magit is excluded
- `projectile-ripgrep` (~20-40ms)
- Various other unused packages with minimal load time impact

** Files Modified
- `spacemacs.d/init.el:88-200` - Removed 10 packages from `dotspacemacs-additional-packages`

** Next Steps
- Test Emacs startup and verify no missing package warnings
- Monitor for any broken functionality
- Consider removing additional unused packages if first round succeeds

* 2025-10-11: Hardened local configuration dictionary and PATH setup

** Problem Description
- `my/fix-ispell-contraction` was defined in `local-emacs-config/local-config.el` but never executed, so the custom en_GB dictionary settings were ignored.
- PATH initialization overwrote the login shell PATH each load, leading to duplicated entries in `exec-path` and dropping toolchain paths.

** Solution
- Wrapped the dictionary setup in `(with-eval-after-load 'ispell ...)` to call `my/fix-ispell-contraction` and add the en_US entry once `ispell` is available.
- Rebuilt the PATH logic to merge preferred directories, the login shell PATH, and TeX Live into a de-duplicated list while keeping `exec-path` in sync; now uses `delete-dups` over a copy of `exec-path` to avoid repeated growth.

** Files Modified
- `local-emacs-config/local-config.el` – dictionary hook and PATH handling improvements

* 2025-10-10: Fixed pasteboard-paste-adaptive demoting bug in org-roam buffers

** Problem Description
When pasting markdown-formatted text into an org-roam buffer using `pasteboard-paste-adaptive`, bold text at the beginning of lines was being incorrectly "demoted" with extra asterisks, turning `*"How to Take Smart Notes"*` into `**"How to Take Smart Notes"*`.

The issue only occurred in org-roam buffers (detected via ID property), not in regular org buffers.

** Example of the Bug

*** Clipboard content (markdown):
#+BEGIN_EXAMPLE
## **The Definitive Book**

**"How to Take Smart Notes" by Sönke Ahrens** is the essential guide...
#+END_EXAMPLE

*** Expected result after paste (org):
#+BEGIN_EXAMPLE
*** *The Definitive Book*

*"How to Take Smart Notes" by Sönke Ahrens* is the essential guide...
#+END_EXAMPLE

*** Actual buggy result in org-roam:
#+BEGIN_EXAMPLE
*** *The Definitive Book*

**"How to Take Smart Notes" by Sönke Ahrens* is the essential guide...
#+END_EXAMPLE

Note the incorrect double asterisk at the beginning of the second line.

** Root Cause Analysis

The bug was in the `pasteboard--demote-headings-in-string` function which is called when pasting into org-roam buffers to demote headings by one level (so they become sub-headings).

The regex pattern `"^\\(\*+\)"` was matching ANY line starting with asterisks, including:
1. Actual org headings: `** Heading text`
2. Bold text at line start: `*"How to Take Smart Notes"*`

When the function found `*"How to...` at the beginning of a line, it incorrectly treated it as a level-1 heading and "demoted" it by adding another asterisk, creating `**"How to...`.

** Solution

Changed the regex pattern from `"^\\(\*+\)"` to `"^\\(\*+\) "` (added space requirement).

This ensures the function only matches actual org headings (stars followed by a space) and ignores bold markers or other asterisk usage at the beginning of lines.

*** Before (buggy):
#+BEGIN_SRC emacs-lisp
(while (re-search-forward "^\\(\*+\)" nil t)
  (let ((stars (match-string 1)))
    (replace-match (concat "*" stars) t t)))
#+END_SRC

*** After (fixed):
#+BEGIN_SRC emacs-lisp
(while (re-search-forward "^\\(\*+\) " nil t)
  (let ((stars (match-string 1)))
    (replace-match (concat "*" stars " ") t t)))
#+END_SRC

** Files Modified
- `pasteboard-copy-and-paste-functions.org:561` - Updated regex pattern and replacement
- `pasteboard-copy-and-paste-functions.el:498-500` - Manually updated compiled version

** Testing Verification

Tested with the exact clipboard content that was failing:
- Pasting in regular org buffer: Correctly converts markdown bold `**text**` to org bold `*text*`
- Pasting in org-roam buffer: Correctly demotes headings while preserving bold formatting
- Bold text at line start no longer incorrectly demoted

** Key Learnings

1. **Regex precision matters**: When processing org-mode text, always distinguish between structural elements (headings) and inline formatting (bold/emphasis). Org headings require a space after the stars.

2. **Context-aware functions need careful patterns**: The demoting function operates on already-converted org text, so it sees org bold markers (`*text*`), not the original markdown (`**text**`).

3. **Testing edge cases**: Always test with content that has formatting at line boundaries, as these cases often reveal pattern matching bugs.

4. **Order of operations**: The paste flow is:
   - Convert markdown to org (including `**` → `*`)
   - THEN demote headings if in org-roam
   - The bug occurred in step 2, operating on already-converted text

** Related Functions in the Paste Pipeline
- `pasteboard-paste-adaptive` - Main adaptive paste function
- `pasteboard--clean-string` - Normalizes and converts markdown to org
- `convert-markdown-headings-to-org` - Converts `#` to `*`
- `replace-smart-quotes` - Handles bold conversion via replacement pairs
- `pasteboard--demote-headings-in-string` - Demotes org headings (where bug was)

** Notes for Future Debugging
If similar issues occur, check:
1. What format is the text in at each stage of processing?
2. Are patterns distinguishing between structural and inline elements?
3. Test with formatting at line starts/ends
4. Consider the order of transformations

* 2025-10-06: Pomodoro timer setup and documentation reorganization

** Session: Pomodoro Timer Fixes and Refinement
Time: Afternoon session
Task: Fix broken pomodoro timer functions and organize documentation

** Accomplished

*** Initial Fix - Pomodoro Timer Loading
- Fixed "Symbol's function definition is void: pomidor" error
- Added pomidor package loading to `spacemacs.d/init.el:912-915` in `dotspacemacs/user-config`
- Created two timer variants for testing:
  - `jd-org-today-and-book-orgpomodoro` (org-pomodoro)
  - `jd-org-today-and-book-pomidor` (pomidor)
- Updated keybinding `C-c C-x po` to use `pomidor-stop`

*** Refinement After Testing
- Renamed `jd-org-today-and-book` to use org-pomodoro by default
- Created `pomidor-start` function as the pomidor variant
- Added `pomodoro-stop` wrapper function for `org-pomodoro-kill` in `shared-functions.org:1347-1350`

*** Documentation Improvements
- Renamed `docs/change-log.org` → `docs/work-log.org` to align with documentation standards
- Updated `CLAUDE.md` to reference work-log.org
- Moved debugging insights from `docs/pasteboard-architecture.org` to `docs/codebase-wisdom.org`:
  - Markdown bold conversion order bug (2025-10-05)
  - Emoji LaTeX export filter bug (2025-10-05)
- Simplified pasteboard-architecture.org to focus on architecture rather than debugging details

*** Other Changes
- Removed `inhibit-message` wrapper from `org-roam-db-sync` to make save-place operations visible

** Files Modified
- `spacemacs.d/init.el` - Added pomidor package loading
- `shared-functions.org` - Refactored pomodoro functions, added pomodoro-stop wrapper
- `keys.el` - Updated pomidor-stop keybinding
- `org-roam-config.el` - Removed message suppression
- `docs/work-log.org` - Renamed from change-log.org
- `docs/codebase-wisdom.org` - Added markdown bold and emoji LaTeX debugging entries
- `docs/pasteboard-architecture.org` - Simplified and cross-referenced codebase-wisdom
- `CLAUDE.md` - Updated documentation link

** Git Commits
1. "Fix pomodoro timer loading and rename change-log to work-log"
2. "Refine pomodoro setup and move debugging insights to codebase-wisdom"

** Notes
- User prefers pomidor timer interface for visual feedback
- org-pomodoro is default for main workflow functions
- Both timer systems now available: `jd-org-today-and-book` (org-pomodoro) and `pomidor-start` (pomidor)
- Documentation now follows vibecoding/how-to-document.org standards with work-log.org and proper separation between architecture docs and debugging wisdom

** Next Steps
- Monitor save-place messages during org-roam operations
- Test both timer variants in actual workflow

* 2025-10-03: Fixed smart-return link following by removing ARCHIVE tag

** Problem
Pressing RET on org links stopped following them after the 2025-10-02 cache stabilization commit.

** Root Cause
The `(setq org-return-follows-link t)` setting was located under a heading tagged with `:ARCHIVE:` in `shared-functions.org`. Org-babel skips archived sections during tangling, so this setting never made it into the generated `shared-functions.el` file.

** Solution
- Removed `:ARCHIVE:` tag from the "Intro / About" heading (line 234 of `shared-functions.org`)
- Fixed malformed comment syntax in `smart-return.el` (line 53) where closing parenthesis was missing

** Files Modified
- `shared-functions.org:234` - Removed `:ARCHIVE:` tag
- `smart-return.el:53` - Fixed comment syntax

* 2025-10-03: Fixed region deletion bug in my/delete-backward-and-capitalize

* 2025-10-06: Harden gnu-emacs batch startup and begin shared-functions reorg

** Context
Running `emacs --batch -L . --load gnu-emacs-startup.el` tripped over mode maps that are only defined once Spacemacs finishes loading. At the same time, the top of `shared-functions.org` had grown organically, so related environment tweaks were scattered between headings.

** Changes
- Wrapped the Evil, Help, Flyspell, and Org keybinding adjustments in `with-eval-after-load` guards and required the corresponding libraries in the startup file so batch loads no longer abort.
- Added a lightweight `ignore-errors` guard around the `] cr` unbinding to keep non-prefix keys from erroring out in minimal sessions.
- Consolidated the package archives, global defaults, appearance hooks, and minor-mode setup into a new `Environment Setup` section at the top of `shared-functions.org` to make the bootstrap flow easier to skim.
- Folded the long-running `Org-Specific Config` block into the primary `Org-mode Configuration` section so the entire org toolchain lives in one place.
- Registered the `important-return-value` declare keyword and cleared obsolete `incf`/`decf` warnings so dependencies like `undo-fu-session` load without spurious startup noise.

** Files Modified
- `gnu-emacs-startup.org`
- `gnu-emacs-startup.el`
- `shared-functions.org`

* 2025-10-06: Renamed raw paste helper to pasteboard-paste-verbatim

** Context
The clipboard helpers used `pasteboard-copy-verbatim` for copying but `pasteboard-paste-raw` for the matching paste, which made the pair harder to discover and remember.

** Changes
- Renamed `pasteboard-paste-raw` → `pasteboard-paste-verbatim` and added a compatibility alias so existing configs keep working.
- Updated keymaps (`keys.el`, `gnu-emacs-startup.org`, `shared-functions.org`) and docs to reference the new name.
- Documented the alias in the pasteboard architecture guide and instructions so the on-ramp stays accurate.

** Files Modified
- `pasteboard-copy-and-paste-functions.org`
- `keys.el`
- `gnu-emacs-startup.org`
- `shared-functions.org`
- `docs/pasteboard-architecture.org`
- `docs/org-element-cache-fix.org`
- `docs/instructions.org`

** Problem
When selecting all text in a buffer (or any region) and calling `my/delete-backward-and-capitalize`, the function would fail to delete the entire highlighted text.

** Root Cause
During the 2025-10-02 cache stabilization refactor, the order of operations in `my/delete-backward-and-capitalize` was changed. The function would:
1. Check if at an org heading (`at-heading`)
2. Capture region boundaries (`region-beg`, `region-end`)
3. Execute heading cleanup logic (`kill-line 0`, `insert " "`)
4. Try to delete the region using now-invalid boundaries

The heading cleanup at step 3 would modify the buffer, invalidating the region boundaries captured in step 2.

** Solution
Modified the `let*` binding to check `has-region` first, then only set `at-heading` to true when there is no active region:

#+BEGIN_SRC emacs-lisp
(let* ((has-region (use-region-p))
       (at-heading (and (not has-region) (looking-back-safe "^[*]+ ")))
       ...)
#+END_SRC

This ensures the heading cleanup logic never runs when a region is active, preventing buffer modification before region deletion.

** Files Modified
- `spacecraft-mode.org:1027-1028` - Reordered `let*` bindings to prevent heading logic from invalidating region boundaries

* 2025-01-27: Fixed org-inline-tags font-lock highlighting

* 2025-10-02: Stabilised org-element cache interactions

** Summary
- Wrapped high-frequency editing commands (`smart-return`, `smart-space`, and `my/delete-backward-and-capitalize`) in `combine-after-change-calls` transactions so Org’s cache only re-syncs once per keystroke
- Reworked pasteboard helpers to pre-process text in temp buffers before insertion and added reusable clipboard utilities
- Guarded the pasteboard cleaner’s narrowing step with refreshed `(point-min)/(point-max)` bounds so Markdown conversions no longer raise `args-out-of-range`
- Added a focus-in hook that force-resets the element cache for Dropbox-synchronised org-roam buffers to avoid stale offsets after external edits
- Verified the previous org-element cache warnings no longer reproduce with the hardened helpers
- Restored the `convert-markdown-links-to-org-mode` helper so the new pasteboard pipeline can safely normalise Markdown links before insertion

** Notes
- Batch compiled/tangled the touched modules to ensure they load cleanly in isolation
- `shared-functions.el` still expects optional packages (vertico, projectile, ox-twbs); run inside a full config before evaluating the new cache reset hook

** Problem
The org-inline-tags feature was defined but tags like #todo, #review, #inlinetags were not appearing in the configured orange color. They remained the same color as surrounding text.

** Struggles & Difficulties Encountered

*** 1. Initial Font-Lock Function Approach Failed
- First attempted to use a function `org-inline-tags--composed-face` in the font-lock rule
- Font-lock expected either a face name or a properly structured face expression, not a function call that returns a face
- The function was never actually being called by the font-lock system

*** 2. Conflict with Existing Org-Mode Font-Lock Rules
- Encountered error: "No match 2 in highlight (2 'org-headline-done prepend)"
- Our font-lock pattern was somehow interfering with org-mode's existing font-lock rules
- The error suggested font-lock was trying to access match group 2 that didn't exist in our pattern

*** 3. Partial Fontification Issue
- Even after fixing the errors, tags would only turn orange when typing a space after them
- Existing tags in the buffer were not being fontified
- Font-lock was only applying to newly typed text, not retroactively to existing content

** Solution

The final working solution combined two approaches:

*** 1. Simplified Font-Lock Rule
#+BEGIN_SRC emacs-lisp
(defun org-inline-tags-setup-font-lock ()
  "Setup font-lock for inline tags in org-mode."
  (font-lock-add-keywords
   nil
   '(("\\(#\\w+\(?:-\\w+\)*\\)"
      (1 'org-inline-tags-face t)))
   t))
#+END_SRC

- Used a simple direct face name instead of a function
- Match group 1 captures just the tag content
- The `t` flag overwrites any existing face (instead of `prepend` which was causing conflicts)

*** 2. Manual Buffer Fontification
#+BEGIN_SRC emacs-lisp
(defun org-inline-tags-fontify-buffer ()
  "Manually fontify all inline tags in the current buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "#\\w+\(?:-\\w+\)*" nil t)
      (let ((start (match-beginning 0))
            (end (match-end 0)))
        (put-text-property start end 'face 'org-inline-tags-face)
        (put-text-property start end 'font-lock-face 'org-inline-tags-face)))))
#+END_SRC

- Manually searches through buffer and applies face properties
- Sets both `face` and `font-lock-face` properties to ensure persistence
- Called immediately when enabling the mode to fontify existing tags

** Key Learnings

1. **Font-lock expects specific structures**: Can't just pass a function that returns a face; must use either a face name directly or a matcher function that follows font-lock conventions

2. **Existing font-lock rules can conflict**: When adding keywords to modes with complex font-lock setups like org-mode, conflicts with existing patterns are common

3. **Font-lock doesn't retroactively apply**: Need to manually fontify existing buffer content or force a complete refontification

4. **Both `face` and `font-lock-face` properties may be needed**: Setting both ensures the highlighting persists through various buffer operations

** Files Modified
- `/Users/jay/emacs/emacs-settings/shared-functions.org` (org-inline-tags section starting at line 7171)