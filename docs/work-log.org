#+TITLE: Work Log
#+AUTHOR: Jay Dixit
#+DATE: [2025-01-27 Mon]

* 2025-10-16: Calendar entry spacing and edit-on-empty improvements

** Summary
- Hardened the blank-line helper so newly inserted diary headings never glue themselves to the preceding bullet text.
- Taught `my-calendar-edit-diary-entry` to auto-create a heading and blank bullet when a date has no entry, landing point where you can immediately type.
- Noted in the README that the timeline file doubles as a plain-text record of upcoming events.

** Files Modified
- `timeline/timeline.el`: Fixed blank-line logic and auto-create behavior for empty dates.
- `timeline/README.org`: Documented the plain-text upcoming-events stance.
- `docs/work-log.org`: Logged these improvements.

* 2025-10-16: Empty entry cleanup and cancel shortcut

** Summary
- Added a before-save cleanup pass that strips empty diary stubs while skipping the entry currently being created.
- Introduced `my-calendar-cancel-current-entry` with a visual highlight and confirmation for non-empty blocks, bound to `C-c C-k` in the diary buffer.

** Files Modified
- `timeline/timeline.el`: Implemented cleanup suspend/skip logic, the cancel command, and keybinding hook.
- `docs/work-log.org`: Recorded this update.

* 2025-10-16: Holiday coloring disabled and consult ripgrep path fix

** Summary
- Neutralized the calendar holiday face and marker so holidays no longer render in blue, even after switching themes.
- Updated `my-diary-search` to run ripgrep from the diary directory, avoiding the "Not a directory" error when the diary path ends with the filename.

** Files Modified
- `timeline/timeline.el`: Adjusted holiday styling defaults and ripgrep invocation.
- `docs/work-log.org`: Recorded this change.

* 2025-10-16: Added diary regression tests

** Summary
- Added ERT coverage for inserting diary entries and editing empty dates to guard against spacing regressions.
- Batch-ran the new test suite to ensure the calendar diary workflow remains error-free.

** Files Modified
- `timeline/timeline.el`: Introduced new ERT tests for diary spacing and edit-on-empty behaviour.
- `docs/work-log.org`: Logged the test additions.

* 2025-10-16: Timeline rename and assets consolidated

** Summary
- Renamed the legacy "markdown-diary" project to "timeline" across modules, docs, and calendars.
- Moved `timeline.el`, the keybinding cheatsheet, README, and ideas notebook into `timeline/`.
- Pointed the diary file reference to `~/Dropbox/github/timeless/data/timeline.md` in code and docs.
- Updated load-path and `require` statements so `require 'timeline` resolves everywhere.
- Added the new directory to `load-path` so `require 'timeline` continues to resolve.

** Files Modified
- `timeline/timeline-keybindings.org`: New location for the keybinding reference.
- `timeline/README.org`: New location for the diary module README.
- `timeline/timeline.el`: Calendar/diary helpers relocated.
- `shared-functions.org`: Added `timeline/` to `load-path`.
- `docs/work-log.org`: Logged the reorganization.
- `timeline/timeline-ideas.org`: New scratchpad for potential enhancements.

** Handoff: Next session
- Reload `shared-functions.org` (or re-tangle) so the new load-path entry is reflected in the generated `.el`.
- Verify `timeline.el` autoloads when starting Emacs and that `require 'timeline` resolves without warnings.
- Sanity-check the updated README (`timeline/README.org`) renders correctly, especially the AI/LLM section formatting.

* 2025-10-16: Diary search, context mode, and regression guard

** Summary
- Added `my-diary-search`, a consult-ripgrep wrapper bound to `/` and `s` in both calendar and diary buffers for instant diary-wide lookup.
- Introduced `my-diary-mode`, a minor mode that auto-enables in the diary file and surfaces the active 📅 date in the mode line.
- Captured `my-calendar-test-date-format` as an ERT regression to ensure the diary date formatter keeps emitting `M/D/YYYY`.

** Files Modified
- `timeline.el`: Implemented the search command, diary minor mode, automatic activation hook, bindings, and ERT.
- `timeline/timeline-keybindings.org`: Documented the new `/` / `s` shortcuts.
- `timeline/README.org`: Added the search binding, diary mode note, and mentioned the regression test.
- `docs/work-log.org`: Logged this update.

* 2025-10-16: Calendar navigation assist overlays

** Summary
- Added an interactive ~my-calendar-help~ popup (bound to ~?~) that displays the custom calendar diary bindings in a view-mode buffer.
- Introduced ~my-calendar-toggle-last-date~ on ~M-t~, letting the calendar jump back and forth between today and the last visited date.
- Registered friendly which-key labels for every diary-centric key so the shortcuts surface automatically when which-key is active.
- Remembered the calendar origin date inside ~timeline.md~ and bound diary ~C-SPC~ to jump straight back to that day while leaving plain space untouched.
- Added ~C-c C-c~ as a second diary shortcut for returning to the calendar, mirroring habitual Org workflow keys.
- Hooked `calendar-move-hook` to echo the currently highlighted date (weekday + full date) whenever the cursor moves.

** Files Modified
- `timeline.el`: Implemented the help popup, toggle command, which-key integration, origin tracking, echo display, and diary return helper.
- `timeline/timeline-keybindings.org`: Documented the new ~?~, ~M-t~, and diary-buffer ~SPC~ bindings.
- `timeline/README.org`: Refreshed the cheat-sheet table, noted diary-space return, and mentioned the echoing move hook.
- `docs/work-log.org`: Logged this update.

* 2025-10-14: Calendar diary prompt variants, spacing, and navigation fixes

** Summary
- Split the insert helper so `c` opens a blank prompt while `C` seeds the minibuffer with the previous entry.
- Normalised diary spacing to keep exactly one blank line around each date block and month heading.
- Documented the new keybindings, including prefix variants, in the calendar reference guide.
- Added ~SPC~ as another shortcut to view the diary entry without leaving the calendar.
- Taught `my-calendar-jump-to-diary-entry` to return the heading position so `my-calendar-edit-diary-entry` can land on the last bullet without an extra search.
- Retired the redundant `my-calendar-open-diary-entry` helper and renamed the fancy diary listing command for clearer intent.
- Expanded `timeline/README.org` with an overview of strengths and workflow notes for the timeline/diary bridge.

** Why it should work
Both commands share a new internal helper that accepts the seed text, ensuring consistent validation and insertion logic. The blank-line utilities now collapse existing runs before inserting, so re-running the command on the same date cannot accumulate extra vertical whitespace.
Returning the diary heading position lets editing logic reuse the existing search result, eliminating duplicate scans, and removing the unused helper avoids dead code.

** Files Modified
- `timeline.el`: Added `my-calendar-insert-diary-entry-and-autopopulate`, shared helper, spacing normalisers, navigation toggles, and returned the diary heading position.
- `timeline/timeline-keybindings.org`: Described the `c`/`C` split, prefix behaviour, and new `SPC`/`O` bindings.
- `docs/work-log.org`: Logged this change.
- `timeline/README.org`: Updated the binding reference.

* 2025-10-14: Calendar diary view stays focused

** Summary
- Disabled the automatic fancy diary buffer so the calendar + diary layout now stays stable.
- Added `my-calendar-view-diary-entry` and bound both ~o~ and ~v~ to it, showing the entry while leaving focus in the calendar.
- Promoted the fancy diary listing to ~O~ and taught ~s-.~ to close any diary listing panes before returning to the calendar.

** Why it should work
`my-calendar-view-diary-entry` reuses `my-calendar-jump-to-diary-entry` but immediately hands focus back to the calendar and cleans up fancy diary buffers. Clearing `calendar-view-diary-initially-flag` prevents Emacs from spawning the fancy listing automatically, so window arrangements remain intact.

** Files Modified
- `timeline.el`: Added the view helper, disabled automatic fancy display, tightened `s-.`, and rebound calendar keys.
- `timeline/timeline-keybindings.org`: Documented the new `o`/`v` view shortcut and `O` fallback.
- `docs/work-log.org`: Logged this change.

** Handoff: Next session
- Sanity-check the new `o`/`v` binding on a clean Emacs restart to ensure focus stays in calendar.
- Decide if the fancy listing should be accessible elsewhere now that `O` is uppercase.

* 2025-10-14: Calendar helpers packed into `timeline.el`

** Summary
- Moved the entire Jay Diary customization block from `shared-functions` into a standalone module `timeline.el`.
- Replaced the inlined code with a simple `(require 'timeline)` so the functions load from one place whether or not tangling runs.
- Copied the module into the tracked `.el` file directly so Spacemacs picks it up without additional boot tweaks.

** Why it should work
The project root is already on `load-path`, so requiring `timeline` resolves instantly. The new module `provide`s the same feature guard and mirrors all previous calendar bindings, hooks, and diary helpers, keeping behaviour identical after the move.

** Files Modified
- `shared-functions.org`: Replaced the calendar block with a `require`.
- `shared-functions.el`: Mirrors the new requirement for runtime use.
- `timeline.el`: New file with the full calendar implementation.
- `docs/work-log.org`: Logged the restructuring.

* 2025-10-14: Calendar diary entries sort themselves

** Summary
- Replaced the stock `calendar-insert-diary-entry` binding with `my-calendar-insert-diary-entry`, which prompts once and drops bullets into `timeline.md` in chronological order.
- Auto-creates missing year and month headings so new dates always slot under the right section without manual scaffolding.
- Preserves the original command on `I` for fallback while keeping diary navigation shortcuts intact.

** Why it should work
The helper narrows to the current month region, searches for existing date headings, and either appends bullets or inserts a new date block before the next chronological entry. It also trims user input into Markdown bullet lines and reuses the existing `my-calendar-jump-to-diary-entry` flow to surface the entry immediately.

** Files Modified
- `shared-functions.org`: Added diary insertion helpers, history, key bindings, and `cl-lib`/`subr-x` requirements.
- `shared-functions.el`: Mirrored the helpers so they are available without tangling.
- `docs/work-log.org`: Logged this change.

* 2025-10-14: Calendar entry alias and spacing

** Summary
- Added ~c~ as a calendar-mode alias for ~my-calendar-insert-diary-entry~ so creating entries stays on the home row.
- Ensured every inserted diary block leaves a blank line afterwards, keeping Markdown sections readable.
- Rebound ~RET~ to open the Markdown entry immediately, moved ~o~ to the fancy diary listing command, and enhanced ~e~ to land at the end of the last bullet.

** Files Modified
- `timeline.el`: Replaced the trailing-newline helper with a blank-line inserter, added the `c` alias, retuned `RET`, and improved `e` to place point at the last bullet.
- `timeline/timeline-keybindings.org`: Documented the updated keybindings.

* 2025-10-14: Markdown diary refinements

** Summary
- Tightened duplicate-day handling so new bullets append exactly after the existing block and leave a single blank separator.
- Added optional prefix-arg behaviour: `i` returns to Calendar, `C-u i` keeps focus in the diary buffer.
- Prefills the minibuffer with the most recent entry text for faster consecutive additions.
- Ensures every date heading is preceded by a single blank line, keeping month sections evenly spaced.

** Why it should work
The month section is still narrowed before edits, but day comparisons now look only at the day number inside that region, preventing accidental mis-sorts. We normalise spacing with explicit newline guards, so headings and entries remain evenly separated regardless of prior manual edits.

** Files Modified
- `timeline.el`: Updated insertion logic, spacing controls, history defaults, and prefix behaviour.
- `docs/work-log.org`: Documented the tweaks.

* Handoff: Next session
- Verify that `my-calendar-edit-diary-entry` reliably lands at the end of the last bullet for multi-line entries.
- Add regression coverage (ERT or script) for the blank-line insertion helper so future edits don’t regress formatting.
- Consider a quick `emacs --batch` smoke test that exercises `my-calendar-edit-diary-entry` and `my-calendar-show-fancy-diary-listing`.

* 2025-10-14: Show project name in mode line next to filename

** Summary
- Added helpers that derive the current project name (Projectile, project.el, or vc fallback) and inject it immediately after the buffer identification in the mode line.
- Ensures buffers such as `CLAUDE.org` display as `CLAUDE.org · velocity`, making similarly named files easy to distinguish across projects.

** Why it should work
The new segment is wrapped in `:eval`, so it runs lazily during mode line rendering and gracefully handles missing project libraries. We only insert the segment once, and we keep the previous VC removal logic intact.

** Files Modified
- `shared-functions.org`: Added the project lookup helpers and updated the global `mode-line-format`.
- `shared-functions.el`: Mirrors the tangled output for immediate use.
- `docs/work-log.org`: Documented this change.

* 2025-10-14: Added keybinding for custom Info manual

** Summary
- Bound `M-h i` to the `jay-info-emacs-manual` function.
- This provides a convenient way to access the custom-built Emacs info manual.
- The keybinding is added to `gnu-emacs-startup.org` and `gnu-emacs-startup.el`.

** Why it should work
`M-h` is already a prefix key for help commands. By adding a binding for `i` to the `help-map`, we are creating an intuitive and easy-to-remember keybinding for the custom info manual, without conflicting with any existing keybindings.

** Files Modified
- `gnu-emacs-startup.org`: Added the keybinding.
- `gnu-emacs-startup.el`: Manually added the keybinding as tangling failed.
- `docs/work-log.org`: Added this entry.

* 2025-10-14: Added keybinding for custom Info manual

** Summary
- Bound `M-h i` to the `jay-info-emacs-manual` function.
- This provides a convenient way to access the custom-built Emacs info manual.
- The keybinding is added to `gnu-emacs-startup.org` and `gnu-emacs-startup.el`.

** Why it should work
`M-h` is already a prefix key for help commands. By adding a binding for `i` to the `help-map`, we are creating an intuitive and easy-to-remember keybinding for the custom info manual, without conflicting with any existing keybindings.

** Files Modified
- `gnu-emacs-startup.org`: Added the keybinding.
- `gnu-emacs-startup.el`: Manually added the keybinding as tangling failed.
- `docs/work-log.org`: Added this entry.

* 2025-10-14: Added keybinding for custom Info manual

** Summary
- Bound `M-h i` to the `jay-info-emacs-manual` function.
- This provides a convenient way to access the custom-built Emacs info manual.
- The keybinding is added to `gnu-emacs-startup.org` and `gnu-emacs-startup.el`.

** Why it should work
`M-h` is already a prefix key for help commands. By adding a binding for `i` to the `help-map`, we are creating an intuitive and easy-to-remember keybinding for the custom info manual, without conflicting with any existing keybindings.

** Files Modified
- `gnu-emacs-startup.org`: Added the keybinding.
- `gnu-emacs-startup.el`: Manually added the keybinding as tangling failed.
- `docs/work-log.org`: Added this entry.

* 2025-10-14: Added custom Info manual function

** Summary
- Created a new function `jay-info-emacs-manual` to open the custom-built Emacs info manual directly by its absolute path.
- This bypasses the user's problematic interactive Info configuration, which was failing to find the "Calendar/Diary" documentation.
- The function is defined in `shared-functions.org` and tangled to `shared-functions.el`.
- The user will add their own keybinding for this function.

** Why it should work
By calling `(info "/Users/jay/emacs/emacs-fresh-source/info/emacs.info")` directly, we are telling Emacs exactly which file to open, completely avoiding the complex and fragile `Info-directory-list` lookup mechanism. This is the same strategy that was proven to work in the user's notes from a previous machine.

** Files Modified
- `shared-functions.org`: Added the `jay-info-emacs-manual` function.
- `shared-functions.el`: Manually added the `jay-info-emacs-manual` function as tangling failed.
- `keys.el`: Removed the temporary keybinding for `jay-info-emacs-manual`.
- `docs/work-log.org`: Added this entry.

* 2025-10-14: Updated Emacs Calendar documentation

** Summary
- Reviewed the local Emacs calendar guide (`emacs-calendar-instructions-claude.org`).
- Compared it with the official GNU Emacs manual for the timeline/diary features.
- The local guide was found to be accurate and comprehensive for the user's specific workflow.
- Added an appendix to the local guide explaining the different types of diary entries (single, weekly, monthly, yearly, anniversary, block, and cyclic) based on the official manual.

** Files Modified
- `emacs-calendar-instructions-claude.org`: Added appendix with detailed explanations of diary entry types.
- `docs/work-log.org`: Added this entry.

* 2025-10-14: Calendar diary focus tweaks

** Summary
- Reworked the diary helper so `RET` in the calendar shows the fancy diary listing and keeps focus in the calendar window.
- Added `my-calendar-edit-diary-entry` and bound it to lowercase `e` for an explicit “open diary and stay there” workflow.
- Generalized `my-calendar-jump-to-diary-entry` to accept optional date/focus arguments for reuse.

** Files Modified
- `shared-functions.org`: Updated Jay Diary section with the new helpers and key bindings.
- `docs/work-log.org`: Added this entry.

* 2025-10-14: Calendar navigation shortcuts

** Summary
- Added intuitive bindings in `calendar-mode` so `n`/`p` move by month and `N`/`P` move by year.
- Updated the calendar instructions document to reflect the new navigation keys.
- Added Option-←/Option-→ aliases (`M-<left>`, `M-<right>`) for month navigation on macOS keyboards.
- Created `my-calendar-focus-calendar-window` and bound `s-.` in `timeline.md` so Command-Period jumps focus back to the existing calendar without resetting the date.

** Files Modified
- `shared-functions.org`: Bound new month/year navigation lambdas, added focus helper, and enabled the diary shortcut.
- `emacs-calendar-instructions-claude.org`: Documented the updated keybindings and the Command-Period focus helper.
- `docs/work-log.org`: Added this entry.

* 2025-10-16: Smart asterisk bullet detection for adaptive paste

** Problem Description
- ChatGPT responses often use leading single asterisks for unordered lists. With the 2025-10-13 change, those pastes now appeared as level-1 Org headings.
- Simply re-enabling the old `asterisk-to-dash` helper would fix ChatGPT pastes but would again demote genuine Org headings (for example `* Timeline`) into list items.

** Root Cause
- `pasteboard--clean-string` treated all single-asterisk lines identically after converting Markdown `#` headings to Org `*`, so it could not differentiate between Markdown bullets and legitimate Org headings.
- The adaptive paste path lacked context about the overall clipboard format (Markdown vs Org) and which lines began as Markdown headings before conversion.

** Solution
- Added `pasteboard--analyse-clipboard-text` to score clipboards for Markdown cues (hash headings, fenced code, ordered lists, etc.) and capture the original line numbers of `#` headings.
- Introduced `pasteboard--text-contains-markdown-headings-p` as a quick ChatGPT-specific signal so the cleanup kicks in whenever `##`/`###` headings appear, even if other cues are absent.
- Introduced a contextual `pasteboard--convert-asterisk-bullets-to-dashes` that only rewrites single-asterisk lines when surrounded by list-like neighbours and not present in the preserved heading line set.
- When the heuristic classifies the clipboard as Markdown, we now run the new conversion plus the dash normalizer and optional code-block translator inside a narrowed region; otherwise we leave existing Org intact.

** Files Modified
- `pasteboard-copy-and-paste-functions.org`: Added the clipboard analyser, bullet conversion helpers, and updated `pasteboard--clean-string` to use them.
- `docs/work-log.org`: Added this entry.

** Expected Results After Reload
- ChatGPT bullet lists paste as proper `- ` items while real Org headings remain untouched.
- Org-centric clipboards skip the Markdown-specific cleanup, preventing unintended demotions.
- Downstream dash/code-block normalization is still available when pasting Markdown-heavy content.

** Follow-up Ideas
- Capture edge cases where the heuristic returns “unknown” and consider exposing a manual override.
- Extend detection with language-model metadata (e.g., presence of “##”) to tighten small-clipboard behaviour.

* 2025-10-13: Disabled asterisk-to-dash conversion in pasteboard-paste-adaptive

** Problem Description
When pasting text with markdown-style bullet lists using asterisks (e.g., `* item`), `pasteboard-paste-adaptive` was automatically converting them to org-mode hyphens (e.g., `- item`). This was undesirable in some workflows where preserving the original asterisk format was preferred.

** Root Cause
The `pasteboard--clean-string` function (called by `pasteboard-paste-adaptive`) was invoking `asterisk-to-dash-and-convert-code-blocks-to-org` from `shared-functions.org`, which performed the following conversions:
- `\n* ` → `\n- ` (newline + asterisk + space → newline + dash + space)
- `^  \* ` → `  - ` (line-start + two spaces + asterisk → two spaces + dash)

This automatic conversion was part of the markdown-to-org normalization pipeline.

** Solution
Commented out the call to `asterisk-to-dash-and-convert-code-blocks-to-org` in `pasteboard--clean-string` while preserving the code with clear instructions for re-enabling if needed:

#+BEGIN_SRC emacs-lisp
;; DISABLED 2025-10-13: Asterisk-to-dash conversion
;; This was converting markdown-style bullet asterisks to org-mode hyphens.
;; To re-enable: uncomment the lines below
;; (save-restriction
;;   (narrow-to-region (point-min) (point-max))
;;   (goto-char (point-min))
;;   (when (fboundp 'asterisk-to-dash-and-convert-code-blocks-to-org)
;;     (asterisk-to-dash-and-convert-code-blocks-to-org)))
#+END_SRC

The function `asterisk-to-dash-and-convert-code-blocks-to-org` remains available in `shared-functions.org:9435-9454` and can be called manually or re-enabled by uncommenting the code.

** Files Modified
- `pasteboard-copy-and-paste-functions.org:568-575` - Commented out asterisk-to-dash conversion with reversion instructions
- `docs/work-log.org` - Added this entry

** Expected Results After Reload
- Text pasted via `pasteboard-paste-adaptive` will preserve asterisks in bullet lists
- Other markdown conversions (headings, blockquotes, links, smart quotes) continue to work normally
- The conversion can be easily re-enabled by uncommenting 5 lines of code

** Reverting This Change
To restore the asterisk-to-dash conversion:
1. Edit `pasteboard-copy-and-paste-functions.org` line 568-575
2. Uncomment the `(save-restriction ...)` block
3. Retangle the file or reload Emacs

** Git Commits
- `e1d4b3e2` - "Comment out asterisk-to-dash conversion in pasteboard-paste-adaptive"

* 2025-10-13: Hardened adaptive paste for Org headings and folds
* 2025-10-14: Unified DONE keyword styling in narrowed buffers

** Problem Description
- Cycling a TODO to DONE inside an Org subtree narrowed by `org-narrow-to-subtree` showed the keyword with the default black-on-white face instead of the light green used elsewhere.
- The mismatch was distracting in focused writing sessions where narrowed buffers are the norm.

** Root Cause
- Narrowing spawns an indirect buffer that does not rerun `hl-todo-mode`, so the light-green overlay responsible for the usual appearance never activated.
- With the overlay absent, Org fell back to the baseline `org-todo-keyword-faces` entry, which still used black text on white.

* 2025-10-14: Info directory troubleshooting handoff
** Summary
- Tracked down why `M-x info` was hiding Calendar/Diary nodes; removed old buffer-killing hooks and normalized `Info-directory-list` handling.
- Added optional local manual support and created `info/dir` aliases pointing to `(emacs)Calendar/Diary` and `(emacs)Diary`.
- Captured the full investigation, commands, and open questions in `docs/info-calendar-debug.org` for follow-up.

** Current State
- Config merges Homebrew’s info path plus `~/emacs/emacs-settings/info`; `Info-directory-list` shows the custom dir, but the top-level menu still omits the new entries.
- Calendar/Diary documentation confirmed inside `/opt/homebrew/share/info/emacs.info.gz` via `rg`.
- Need to determine whether Info ignores additive `dir` files or if `install-info` merges are required.
- Added an `info-initialize` reset + dedupe pass so the Homebrew manual stays in `Info-directory-list` even after custom dirs are appended.
- Confirmed via CLI `info` that `(emacs)Calendar/Diary` is not a real node; rewired local `info/dir` so both Calendar and Diary entries jump to `(emacs)Diary`.
- Interactive Emacs still fails for `(Info-find-node "emacs" "Diary")` despite the corrected `dir`; batch smoke test passes, pointing to a remaining config-level conflict to bisect.
- Keep in mind:

- Culled unused top-level files (`CHANGE-LOG.org`, `astro-ts-mode.el.org`, `info/dir`, various scratch org/markdown docs) and moved a few legacy notes into `archive/` to shrink the repo footprint.

  - Whenever you update or move the Emacs source checkout, rerun `make -C doc/emacs info` and adjust any hard-coded `(info "/path/to/emacs.info")` helpers.
  - Retain the batch regression script and local `info/dir` entry as diagnostics in case the direct manual isn’t available; they confirm the manual file stays healthy even when the interactive session misbehaves.

** Next Steps
1. Test `install-info info/dir <scratch-dir>` to see if merging entries surfaces Calendar/Diary.
2. Temporarily advise `Info-insert-dir` to log which `dir` files are read and in what order.
3. Consider generating standalone manuals if aliasing continues to fail.

** Files & Commits
- `shared-functions.org` (`Allow Info buffer to open`, `Restore default Info directory search`) for cleanup and hook adjustments.
- `spacemacs.d/init.el`, `spacemacs.d/init-working.el` synced with new Info lookup logic.
- New notes: `docs/info-calendar-debug.org`, `info/dir`.
- New regression script: `scripts/check-info-calendar.el` validates all Calendar submenu nodes via batch Info runs.

** Solution
- Updated the `("DONE" …)` entry in both the literate and tangled configs to render white text on a forest-green background with a slight box padding, matching the indirect-buffer experience.
- Mirrored the change in the `hl-todo-keyword-faces` palette so the overlay keeps the same styling when it *is* present.

** Files Modified
- `shared-functions.org:959,994` – switched DONE keyword face and matching hl-todo face to white-on-forest-green with padding box.
- `shared-functions.el:639,670` – tangled output reflects the same face adjustments.

** Expected Results After Reload
- DONE keywords appear white on green whether or not `hl-todo-mode` is active, ensuring consistent visuals in narrowed and full buffers.

** Follow-up: Display-aware notch hiding

- Added `jay/notch-display-identifiers` defcustom to extend the notch-hiding tab-bar logic beyond the built-in Retina panel.
- Extracted `jay/current-display-attributes` helper and refreshed `jay/on-notch-display-p` so detection can be reused elsewhere.
- Introduced `jay/add-current-display-to-notch-list` for quickly adding the current monitor’s name at runtime.
- Both `shared-functions.org` and the tangled `shared-functions.el` now reflect the new helpers.

* 2025-10-14: Display-aware notch hiding for tab bar

** Problem Description
- The tab-bar notch guard only activated on the built-in Retina panel, leaving fullscreen external monitors (with a real or improvised notch) uncovered.
- Manually enabling `tab-bar-mode` stuck until the next focus change, when the auto-update logic disabled it again.

** Root Cause
- `jay/on-macbook-display-p` hard-coded a string match for “Built-in”/“Retina Display” and returned nil for any other monitor.
- The detection logic lived inline, making it awkward to extend and re-use when adding monitors dynamically.

** Solution
- Added `jay/notch-display-identifiers` defcustom so additional monitor names (regex patterns) can opt into notch coverage.
- Extracted `jay/current-display-attributes` to isolate frame→monitor resolution and refactored `jay/on-notch-display-p` to call it.
- Created `jay/add-current-display-to-notch-list` for recording the active monitor’s name at runtime; the list can be persisted via Customize.

** Files Modified
- `shared-functions.org:9720-9845` – new defcustom, helpers, and interactive command; update docstrings/messages.
- `shared-functions.el:6400-6535` – tangled configuration mirrors the new display helpers and command.
- `docs/work-log.org` – logged the change.

** Expected Results After Reload
- Adding an external monitor’s name to `jay/notch-display-identifiers` (or calling `jay/add-current-display-to-notch-list`) brings the notch-hiding tab bar to that screen whenever the frame is fullscreen or maximized.
- `jay/debug-display-detection` now reports whether the current monitor is earmarked for notch coverage, aiding future tweaks.

* 2025-10-11: Fixed ispell warnings and duplicate org-roam loading

** Problem Description
Two issues were present during Emacs startup:
1. Ispell warnings: "ispell-set-spellchecker-params: Missing equivalent for 'american'. Skipping." and "Missing equivalent for 'english'. Skipping."
2. Duplicate org-roam initialization: org-roam-config.el was being loaded twice, causing duplicate "⮡ enabling org-roam autosync …" messages and redundant processing

** Root Cause

*** Ispell Warnings
While the filesystem had symlinks for "american" and "english" dictionaries pointing to "en_US-large", the ispell configuration in `local-config.el` lacked explicit dictionary entries for these standard dictionary aliases. When ispell.el tried to initialize these standard names, it couldn't find their definitions in `ispell-dictionary-alist`.

*** Duplicate org-roam Loading
The file `org-roam-config.el` was being loaded in two places:
1. In `spacemacs-new-config.el:149` (intentional, correct location)
2. In `shared-functions.org:5435` / `shared-functions.el:3622` (redundant)

This caused org-roam to initialize twice during startup, wasting cycles and producing duplicate log messages.

** Solution

*** Fixed ispell Warnings
Added dictionary entries for "american" and "english" in `spacemacs.d/init.el` in the `dotspacemacs/user-init` function (lines 893-900):

#+BEGIN_SRC emacs-lisp
;; Add dictionary entries for standard aliases to suppress warnings
(with-eval-after-load 'ispell
  (add-to-list 'ispell-dictionary-alist
               '("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))
  (add-to-list 'ispell-dictionary-alist
               '("american" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US-large") nil utf-8))
  (add-to-list 'ispell-dictionary-alist
               '("english" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US-large") nil utf-8)))
#+END_SRC

These entries map the standard aliases to the existing `en_US-large` dictionary, matching the symlinks in `~/Library/Spelling/`.

**Debugging note**: Initially tried adding these entries to `local-config.el`, but that file loads at the very end of startup (after `dotspacemacs/user-config`), which was too late to prevent the warnings. Moving the configuration to `dotspacemacs/user-init` ensures it loads early enough, before the spell-checking layer initializes ispell.

*** Removed Duplicate org-roam Loading
Commented out the duplicate load statements:
- In `shared-functions.org:5436`: Changed `(load "/Users/jay/emacs/emacs-settings/org-roam-config.el")` to a comment with explanation
- In `shared-functions.el:3623`: Applied the same change to the tangled output

The file continues to load once from `spacemacs-new-config.el`, which is the correct location.

** Files Modified
- `spacemacs.d/init.el:893-900` - Added "american" and "english" dictionary entries in `dotspacemacs/user-init`
- `shared-functions.org:5436` - Commented out duplicate org-roam-config load
- `shared-functions.el:3623` - Commented out duplicate org-roam-config load
- `local-config.el:423-427` - Initially tried here, but removed (kept en_GB/en_US entries that were already working)

** Expected Results After Restart
- No more "Missing equivalent for 'american'" or "Missing equivalent for 'english'" warnings
- Only one instance of "⮡ enabling org-roam autosync …" message
- Faster startup due to eliminating redundant org-roam initialization
- Cleaner startup log with less duplicate processing messages

** Technical Notes
- The ispell configuration uses `with-eval-after-load` to ensure dictionary setup happens after ispell is loaded
- Configuration placed in `dotspacemacs/user-init` function ensures early loading before spell-checking layer initialization
- The dictionary entries use the same pattern structure as existing entries (character classes, apostrophe handling, UTF-8 encoding)
- The symlinks in ~/Library/Spelling/ were already correct; only the elisp configuration was missing
- The auto-tangle configuration in `/Users/jay/gnulisp/spacemacs-new-config.el` will keep shared-functions.org and .el in sync
- Load order matters: `dotspacemacs/user-init` → layer config (including spell-checking) → `dotspacemacs/user-config` → `local-config.el`

* 2025-10-11: Fixed file-notify errors with Dropbox sync

** Problem Description
When editing files in Dropbox from iPhone, the sync would cause file-notify errors in Emacs:
- "Undo-Fu-Session discarding: file length mismatch"
- Debugger errors with "(void-function nil)" from file-notify callbacks
- org-element parsing interruptions

** Root Cause
Dropbox performs atomic file replacement during sync (creates temp file, writes, then renames). This confuses Emacs file watchers which have nil callbacks after the file replacement.

** Solution
Added comprehensive file watcher error suppression in `spacemacs.d/init.el:931-962`:

*** 1. Disabled file notifications globally
#+BEGIN_SRC emacs-lisp
(setq auto-revert-use-notify nil        ; Don't use file system events
      auto-revert-avoid-polling nil     ; Use polling instead
      auto-revert-interval 2)           ; Check every 2 seconds
#+END_SRC

*** 2. Created cloud storage detection function
#+BEGIN_SRC emacs-lisp
(defun my/disable-file-notify-for-cloud-storage ()
  "Disable file notifications for files in cloud storage directories."
  (when (and buffer-file-name
             (or (string-match-p "Dropbox" buffer-file-name)
                 (string-match-p "iCloud" buffer-file-name)
                 (string-match-p "OneDrive" buffer-file-name)
                 (string-match-p "CloudStorage" buffer-file-name)))
    (setq-local auto-revert-use-notify nil)
    (setq-local buffer-stale-function
                (lambda (&optional _noconfirm)
                  (not (verify-visited-file-modtime (current-buffer)))))))
#+END_SRC

*** 3. Added error suppression for file-notify
#+BEGIN_SRC emacs-lisp
(defadvice file-notify-add-watch (around suppress-file-notify-errors activate)
  "Suppress errors from file-notify-add-watch."
  (condition-case nil
      ad-do-it
    (error nil)))
#+END_SRC

*** 4. Excluded cloud storage from undo-fu-session
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'undo-fu-session
  (setq undo-fu-session-incompatible-files
        '("\.gpg$" "/Dropbox/" "/CloudStorage/" "/iCloud/" "\.org_archive$")))
#+END_SRC

** Files Modified
- `spacemacs.d/init.el:925-962` - Added comprehensive file watcher error suppression

** Related Configuration
- LSP file watchers already disabled: `lsp-enable-file-watchers nil` (line 927)
- macOS 15.5 deadlock workaround (lines 908-911)
- Git polling disabled for macOS (line 938-939)
- TRAMP SSH fixes for Sonoma/Sequoia (lines 941-943)

** Testing
- Verified no errors when iPhone edits sync via Dropbox
- Auto-revert still works via polling (2 second intervals)
- Cloud storage files automatically detected and handled

* 2025-10-11: Removed unused packages to improve startup time

** Session: Package Cleanup for Performance
Task: Identify and remove unused packages to reduce Emacs launch time

** Packages Removed

*** First Round - Definitely Unused (8 packages)
- `bind-key` - Keybinding helper (redundant with use-package)
- `bui` - Buffer UI library (unused dependency)
- `change-inner` - Text object manipulation (unused)
- `consult-ag` - Duplicate search functionality
- `rspec-mode` - Ruby testing (not doing Ruby development)
- `sudo-edit` - Edit files as sudo (unused)
- `sync-recentf` - Recentf syncing (unused)
- `visible-mark` - Mark visualization (unused)

*** Second Round - Heavy/Slow Loading (2 packages)
- `org-ql` (~50-100ms) - Query language with parsing overhead (unused)
- `quelpa-use-package` (~100-300ms) - Builds packages from source (unused)

** Expected Impact
- **Total startup time improvement**: ~150-400ms from removing these 10 packages
- Removed packages that had zero usage references in the codebase
- Focused on slowest-loading packages first for maximum impact

## Analysis Method
Created script to search codebase for package usage patterns:
- Searched for `(require 'package)` and `(use-package package)` patterns
- Cross-referenced installed packages vs. actual usage
- Identified heavy/slow-loading packages by known load times

## Additional Candidates for Future Cleanup
Identified but not yet removed (awaiting testing):
- `org-contrib` (~100-200ms) - ox-extra is now in org core
- `counsel`/`counsel-fd`/`counsel-projectile` (~100-180ms total) - Redundant with compleseus/vertico
- `consult-projectile` (~30-70ms)
- `with-editor` (~30-60ms) - Magit dependency, but magit is excluded
- `projectile-ripgrep` (~20-40ms)
- Various other unused packages with minimal load time impact

** Files Modified
- `spacemacs.d/init.el:88-200` - Removed 10 packages from `dotspacemacs-additional-packages`

** Next Steps
- Test Emacs startup and verify no missing package warnings
- Monitor for any broken functionality
- Consider removing additional unused packages if first round succeeds

* 2025-10-11: Hardened local configuration dictionary and PATH setup

** Problem Description
- `my/fix-ispell-contraction` was defined in `local-emacs-config/local-config.el` but never executed, so the custom en_GB dictionary settings were ignored.
- PATH initialization overwrote the login shell PATH each load, leading to duplicated entries in `exec-path` and dropping toolchain paths.

** Solution
- Wrapped the dictionary setup in `(with-eval-after-load 'ispell ...)` to call `my/fix-ispell-contraction` and add the en_US entry once `ispell` is available.
- Rebuilt the PATH logic to merge preferred directories, the login shell PATH, and TeX Live into a de-duplicated list while keeping `exec-path` in sync; now uses `delete-dups` over a copy of `exec-path` to avoid repeated growth.

** Files Modified
- `local-emacs-config/local-config.el` – dictionary hook and PATH handling improvements

* 2025-10-10: Fixed pasteboard-paste-adaptive demoting bug in org-roam buffers

** Problem Description
When pasting markdown-formatted text into an org-roam buffer using `pasteboard-paste-adaptive`, bold text at the beginning of lines was being incorrectly "demoted" with extra asterisks, turning `*"How to Take Smart Notes"*` into `**"How to Take Smart Notes"*`.

The issue only occurred in org-roam buffers (detected via ID property), not in regular org buffers.

** Example of the Bug

*** Clipboard content (markdown):
#+BEGIN_EXAMPLE
## **The Definitive Book**

**"How to Take Smart Notes" by Sönke Ahrens** is the essential guide...
#+END_EXAMPLE

*** Expected result after paste (org):
#+BEGIN_EXAMPLE
*** *The Definitive Book*

*"How to Take Smart Notes" by Sönke Ahrens* is the essential guide...
#+END_EXAMPLE

*** Actual buggy result in org-roam:
#+BEGIN_EXAMPLE
*** *The Definitive Book*

**"How to Take Smart Notes" by Sönke Ahrens* is the essential guide...
#+END_EXAMPLE

Note the incorrect double asterisk at the beginning of the second line.

** Root Cause Analysis

The bug was in the `pasteboard--demote-headings-in-string` function which is called when pasting into org-roam buffers to demote headings by one level (so they become sub-headings).

The regex pattern `"^\\(\*+\)"` was matching ANY line starting with asterisks, including:
1. Actual org headings: `** Heading text`
2. Bold text at line start: `*"How to Take Smart Notes"*`

When the function found `*"How to...` at the beginning of a line, it incorrectly treated it as a level-1 heading and "demoted" it by adding another asterisk, creating `**"How to...`.

** Solution

Changed the regex pattern from `"^\\(\*+\)"` to `"^\\(\*+\) "` (added space requirement).

This ensures the function only matches actual org headings (stars followed by a space) and ignores bold markers or other asterisk usage at the beginning of lines.

*** Before (buggy):
#+BEGIN_SRC emacs-lisp
(while (re-search-forward "^\\(\*+\)" nil t)
  (let ((stars (match-string 1)))
    (replace-match (concat "*" stars) t t)))
#+END_SRC

*** After (fixed):
#+BEGIN_SRC emacs-lisp
(while (re-search-forward "^\\(\*+\) " nil t)
  (let ((stars (match-string 1)))
    (replace-match (concat "*" stars " ") t t)))
#+END_SRC

** Files Modified
- `pasteboard-copy-and-paste-functions.org:561` - Updated regex pattern and replacement
- `pasteboard-copy-and-paste-functions.el:498-500` - Manually updated compiled version

** Testing Verification

Tested with the exact clipboard content that was failing:
- Pasting in regular org buffer: Correctly converts markdown bold `**text**` to org bold `*text*`
- Pasting in org-roam buffer: Correctly demotes headings while preserving bold formatting
- Bold text at line start no longer incorrectly demoted

** Key Learnings

1. **Regex precision matters**: When processing org-mode text, always distinguish between structural elements (headings) and inline formatting (bold/emphasis). Org headings require a space after the stars.

2. **Context-aware functions need careful patterns**: The demoting function operates on already-converted org text, so it sees org bold markers (`*text*`), not the original markdown (`**text**`).

3. **Testing edge cases**: Always test with content that has formatting at line boundaries, as these cases often reveal pattern matching bugs.

4. **Order of operations**: The paste flow is:
   - Convert markdown to org (including `**` → `*`)
   - THEN demote headings if in org-roam
   - The bug occurred in step 2, operating on already-converted text

** Related Functions in the Paste Pipeline
- `pasteboard-paste-adaptive` - Main adaptive paste function
- `pasteboard--clean-string` - Normalizes and converts markdown to org
- `convert-markdown-headings-to-org` - Converts `#` to `*`
- `replace-smart-quotes` - Handles bold conversion via replacement pairs
- `pasteboard--demote-headings-in-string` - Demotes org headings (where bug was)

** Notes for Future Debugging
If similar issues occur, check:
1. What format is the text in at each stage of processing?
2. Are patterns distinguishing between structural and inline elements?
3. Test with formatting at line starts/ends
4. Consider the order of transformations

* 2025-10-06: Pomodoro timer setup and documentation reorganization

** Session: Pomodoro Timer Fixes and Refinement
Time: Afternoon session
Task: Fix broken pomodoro timer functions and organize documentation

** Accomplished

*** Initial Fix - Pomodoro Timer Loading
- Fixed "Symbol's function definition is void: pomidor" error
- Added pomidor package loading to `spacemacs.d/init.el:912-915` in `dotspacemacs/user-config`
- Created two timer variants for testing:
  - `jd-org-today-and-book-orgpomodoro` (org-pomodoro)
  - `jd-org-today-and-book-pomidor` (pomidor)
- Updated keybinding `C-c C-x po` to use `pomidor-stop`

*** Refinement After Testing
- Renamed `jd-org-today-and-book` to use org-pomodoro by default
- Created `pomidor-start` function as the pomidor variant
- Added `pomodoro-stop` wrapper function for `org-pomodoro-kill` in `shared-functions.org:1347-1350`

*** Documentation Improvements
- Renamed `docs/change-log.org` → `docs/work-log.org` to align with documentation standards
- Updated `CLAUDE.md` to reference work-log.org
- Moved debugging insights from `docs/pasteboard-architecture.org` to `docs/codebase-wisdom.org`:
  - Markdown bold conversion order bug (2025-10-05)
  - Emoji LaTeX export filter bug (2025-10-05)
- Simplified pasteboard-architecture.org to focus on architecture rather than debugging details

*** Other Changes
- Removed `inhibit-message` wrapper from `org-roam-db-sync` to make save-place operations visible

** Files Modified
- `spacemacs.d/init.el` - Added pomidor package loading
- `shared-functions.org` - Refactored pomodoro functions, added pomodoro-stop wrapper
- `keys.el` - Updated pomidor-stop keybinding
- `org-roam-config.el` - Removed message suppression
- `docs/work-log.org` - Renamed from change-log.org
- `docs/codebase-wisdom.org` - Added markdown bold and emoji LaTeX debugging entries
- `docs/pasteboard-architecture.org` - Simplified and cross-referenced codebase-wisdom
- `CLAUDE.md` - Updated documentation link

** Git Commits
1. "Fix pomodoro timer loading and rename change-log to work-log"
2. "Refine pomodoro setup and move debugging insights to codebase-wisdom"

** Notes
- User prefers pomidor timer interface for visual feedback
- org-pomodoro is default for main workflow functions
- Both timer systems now available: `jd-org-today-and-book` (org-pomodoro) and `pomidor-start` (pomidor)
- Documentation now follows vibecoding/how-to-document.org standards with work-log.org and proper separation between architecture docs and debugging wisdom

** Next Steps
- Monitor save-place messages during org-roam operations
- Test both timer variants in actual workflow

* 2025-10-03: Fixed smart-return link following by removing ARCHIVE tag

** Problem
Pressing RET on org links stopped following them after the 2025-10-02 cache stabilization commit.

** Root Cause
The `(setq org-return-follows-link t)` setting was located under a heading tagged with `:ARCHIVE:` in `shared-functions.org`. Org-babel skips archived sections during tangling, so this setting never made it into the generated `shared-functions.el` file.

** Solution
- Removed `:ARCHIVE:` tag from the "Intro / About" heading (line 234 of `shared-functions.org`)
- Fixed malformed comment syntax in `smart-return.el` (line 53) where closing parenthesis was missing

** Files Modified
- `shared-functions.org:234` - Removed `:ARCHIVE:` tag
- `smart-return.el:53` - Fixed comment syntax

* 2025-10-03: Fixed region deletion bug in my/delete-backward-and-capitalize

* 2025-10-06: Harden gnu-emacs batch startup and begin shared-functions reorg

** Context
Running `emacs --batch -L . --load gnu-emacs-startup.el` tripped over mode maps that are only defined once Spacemacs finishes loading. At the same time, the top of `shared-functions.org` had grown organically, so related environment tweaks were scattered between headings.

** Changes
- Wrapped the Evil, Help, Flyspell, and Org keybinding adjustments in `with-eval-after-load` guards and required the corresponding libraries in the startup file so batch loads no longer abort.
- Added a lightweight `ignore-errors` guard around the `] cr` unbinding to keep non-prefix keys from erroring out in minimal sessions.
- Consolidated the package archives, global defaults, appearance hooks, and minor-mode setup into a new `Environment Setup` section at the top of `shared-functions.org` to make the bootstrap flow easier to skim.
- Folded the long-running `Org-Specific Config` block into the primary `Org-mode Configuration` section so the entire org toolchain lives in one place.
- Registered the `important-return-value` declare keyword and cleared obsolete `incf`/`decf` warnings so dependencies like `undo-fu-session` load without spurious startup noise.

** Files Modified
- `gnu-emacs-startup.org`
- `gnu-emacs-startup.el`
- `shared-functions.org`

* 2025-10-06: Renamed raw paste helper to pasteboard-paste-verbatim

** Context
The clipboard helpers used `pasteboard-copy-verbatim` for copying but `pasteboard-paste-raw` for the matching paste, which made the pair harder to discover and remember.

** Changes
- Renamed `pasteboard-paste-raw` → `pasteboard-paste-verbatim` and added a compatibility alias so existing configs keep working.
- Updated keymaps (`keys.el`, `gnu-emacs-startup.org`, `shared-functions.org`) and docs to reference the new name.
- Documented the alias in the pasteboard architecture guide and instructions so the on-ramp stays accurate.

** Files Modified
- `pasteboard-copy-and-paste-functions.org`
- `keys.el`
- `gnu-emacs-startup.org`
- `shared-functions.org`
- `docs/pasteboard-architecture.org`
- `docs/org-element-cache-fix.org`
- `docs/instructions.org`

** Problem
When selecting all text in a buffer (or any region) and calling `my/delete-backward-and-capitalize`, the function would fail to delete the entire highlighted text.

** Root Cause
During the 2025-10-02 cache stabilization refactor, the order of operations in `my/delete-backward-and-capitalize` was changed. The function would:
1. Check if at an org heading (`at-heading`)
2. Capture region boundaries (`region-beg`, `region-end`)
3. Execute heading cleanup logic (`kill-line 0`, `insert " "`)
4. Try to delete the region using now-invalid boundaries

The heading cleanup at step 3 would modify the buffer, invalidating the region boundaries captured in step 2.

** Solution
Modified the `let*` binding to check `has-region` first, then only set `at-heading` to true when there is no active region:

#+BEGIN_SRC emacs-lisp
(let* ((has-region (use-region-p))
       (at-heading (and (not has-region) (looking-back-safe "^[*]+ ")))
       ...)
#+END_SRC

This ensures the heading cleanup logic never runs when a region is active, preventing buffer modification before region deletion.

** Files Modified
- `spacecraft-mode.org:1027-1028` - Reordered `let*` bindings to prevent heading logic from invalidating region boundaries

* 2025-01-27: Fixed org-inline-tags font-lock highlighting

* 2025-10-02: Stabilised org-element cache interactions

** Summary
- Wrapped high-frequency editing commands (`smart-return`, `smart-space`, and `my/delete-backward-and-capitalize`) in `combine-after-change-calls` transactions so Org’s cache only re-syncs once per keystroke
- Reworked pasteboard helpers to pre-process text in temp buffers before insertion and added reusable clipboard utilities
- Guarded the pasteboard cleaner’s narrowing step with refreshed `(point-min)/(point-max)` bounds so Markdown conversions no longer raise `args-out-of-range`
- Added a focus-in hook that force-resets the element cache for Dropbox-synchronised org-roam buffers to avoid stale offsets after external edits
- Verified the previous org-element cache warnings no longer reproduce with the hardened helpers
- Restored the `convert-markdown-links-to-org-mode` helper so the new pasteboard pipeline can safely normalise Markdown links before insertion

** Notes
- Batch compiled/tangled the touched modules to ensure they load cleanly in isolation
- `shared-functions.el` still expects optional packages (vertico, projectile, ox-twbs); run inside a full config before evaluating the new cache reset hook

** Problem
The org-inline-tags feature was defined but tags like #todo, #review, #inlinetags were not appearing in the configured orange color. They remained the same color as surrounding text.

** Struggles & Difficulties Encountered

*** 1. Initial Font-Lock Function Approach Failed
- First attempted to use a function `org-inline-tags--composed-face` in the font-lock rule
- Font-lock expected either a face name or a properly structured face expression, not a function call that returns a face
- The function was never actually being called by the font-lock system

*** 2. Conflict with Existing Org-Mode Font-Lock Rules
- Encountered error: "No match 2 in highlight (2 'org-headline-done prepend)"
- Our font-lock pattern was somehow interfering with org-mode's existing font-lock rules
- The error suggested font-lock was trying to access match group 2 that didn't exist in our pattern

*** 3. Partial Fontification Issue
- Even after fixing the errors, tags would only turn orange when typing a space after them
- Existing tags in the buffer were not being fontified
- Font-lock was only applying to newly typed text, not retroactively to existing content

** Solution

The final working solution combined two approaches:

*** 1. Simplified Font-Lock Rule
#+BEGIN_SRC emacs-lisp
(defun org-inline-tags-setup-font-lock ()
  "Setup font-lock for inline tags in org-mode."
  (font-lock-add-keywords
   nil
   '(("\\(#\\w+\(?:-\\w+\)*\\)"
      (1 'org-inline-tags-face t)))
   t))
#+END_SRC

- Used a simple direct face name instead of a function
- Match group 1 captures just the tag content
- The `t` flag overwrites any existing face (instead of `prepend` which was causing conflicts)

*** 2. Manual Buffer Fontification
#+BEGIN_SRC emacs-lisp
(defun org-inline-tags-fontify-buffer ()
  "Manually fontify all inline tags in the current buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "#\\w+\(?:-\\w+\)*" nil t)
      (let ((start (match-beginning 0))
            (end (match-end 0)))
        (put-text-property start end 'face 'org-inline-tags-face)
        (put-text-property start end 'font-lock-face 'org-inline-tags-face)))))
#+END_SRC

- Manually searches through buffer and applies face properties
- Sets both `face` and `font-lock-face` properties to ensure persistence
- Called immediately when enabling the mode to fontify existing tags

** Key Learnings

1. **Font-lock expects specific structures**: Can't just pass a function that returns a face; must use either a face name directly or a matcher function that follows font-lock conventions

2. **Existing font-lock rules can conflict**: When adding keywords to modes with complex font-lock setups like org-mode, conflicts with existing patterns are common

3. **Font-lock doesn't retroactively apply**: Need to manually fontify existing buffer content or force a complete refontification

4. **Both `face` and `font-lock-face` properties may be needed**: Setting both ensures the highlighting persists through various buffer operations

** Files Modified
- `/Users/jay/emacs/emacs-settings/shared-functions.org` (org-inline-tags section starting at line 7171)
