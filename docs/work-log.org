#+TITLE: Work Log
#+AUTHOR: Jay Dixit
#+DATE: [2025-01-27 Mon]

* 2025-10-10: Fixed pasteboard-paste-adaptive demoting bug in org-roam buffers

** Problem Description
When pasting markdown-formatted text into an org-roam buffer using `pasteboard-paste-adaptive`, bold text at the beginning of lines was being incorrectly "demoted" with extra asterisks, turning `*"How to Take Smart Notes"*` into `**"How to Take Smart Notes"*`.

The issue only occurred in org-roam buffers (detected via ID property), not in regular org buffers.

** Example of the Bug

*** Clipboard content (markdown):
#+BEGIN_EXAMPLE
## **The Definitive Book**

**"How to Take Smart Notes" by Sönke Ahrens** is the essential guide...
#+END_EXAMPLE

*** Expected result after paste (org):
#+BEGIN_EXAMPLE
*** *The Definitive Book*

*"How to Take Smart Notes" by Sönke Ahrens* is the essential guide...
#+END_EXAMPLE

*** Actual buggy result in org-roam:
#+BEGIN_EXAMPLE
*** *The Definitive Book*

**"How to Take Smart Notes" by Sönke Ahrens* is the essential guide...
#+END_EXAMPLE

Note the incorrect double asterisk at the beginning of the second line.

** Root Cause Analysis

The bug was in the `pasteboard--demote-headings-in-string` function which is called when pasting into org-roam buffers to demote headings by one level (so they become sub-headings).

The regex pattern `"^\\(\\*+\\)"` was matching ANY line starting with asterisks, including:
1. Actual org headings: `** Heading text`
2. Bold text at line start: `*"How to Take Smart Notes"*`

When the function found `*"How to...` at the beginning of a line, it incorrectly treated it as a level-1 heading and "demoted" it by adding another asterisk, creating `**"How to...`.

** Solution

Changed the regex pattern from `"^\\(\\*+\\)"` to `"^\\(\\*+\\) "` (added space requirement).

This ensures the function only matches actual org headings (stars followed by a space) and ignores bold markers or other asterisk usage at the beginning of lines.

*** Before (buggy):
#+BEGIN_SRC emacs-lisp
(while (re-search-forward "^\\(\\*+\\)" nil t)
  (let ((stars (match-string 1)))
    (replace-match (concat "*" stars) t t)))
#+END_SRC

*** After (fixed):
#+BEGIN_SRC emacs-lisp
(while (re-search-forward "^\\(\\*+\\) " nil t)
  (let ((stars (match-string 1)))
    (replace-match (concat "*" stars " ") t t)))
#+END_SRC

** Files Modified
- `pasteboard-copy-and-paste-functions.org:561` - Updated regex pattern and replacement
- `pasteboard-copy-and-paste-functions.el:498-500` - Manually updated compiled version

** Testing Verification

Tested with the exact clipboard content that was failing:
- Pasting in regular org buffer: Correctly converts markdown bold `**text**` to org bold `*text*`
- Pasting in org-roam buffer: Correctly demotes headings while preserving bold formatting
- Bold text at line start no longer incorrectly demoted

** Key Learnings

1. **Regex precision matters**: When processing org-mode text, always distinguish between structural elements (headings) and inline formatting (bold/emphasis). Org headings require a space after the stars.

2. **Context-aware functions need careful patterns**: The demoting function operates on already-converted org text, so it sees org bold markers (`*text*`), not the original markdown (`**text**`).

3. **Testing edge cases**: Always test with content that has formatting at line boundaries, as these cases often reveal pattern matching bugs.

4. **Order of operations**: The paste flow is:
   - Convert markdown to org (including `**` → `*`)
   - THEN demote headings if in org-roam
   - The bug occurred in step 2, operating on already-converted text

** Related Functions in the Paste Pipeline
- `pasteboard-paste-adaptive` - Main adaptive paste function
- `pasteboard--clean-string` - Normalizes and converts markdown to org
- `convert-markdown-headings-to-org` - Converts `#` to `*`
- `replace-smart-quotes` - Handles bold conversion via replacement pairs
- `pasteboard--demote-headings-in-string` - Demotes org headings (where bug was)

** Notes for Future Debugging
If similar issues occur, check:
1. What format is the text in at each stage of processing?
2. Are patterns distinguishing between structural and inline elements?
3. Test with formatting at line starts/ends
4. Consider the order of transformations

* 2025-10-06: Pomodoro timer setup and documentation reorganization

** Session: Pomodoro Timer Fixes and Refinement
Time: Afternoon session
Task: Fix broken pomodoro timer functions and organize documentation

** Accomplished

*** Initial Fix - Pomodoro Timer Loading
- Fixed "Symbol's function definition is void: pomidor" error
- Added pomidor package loading to `spacemacs.d/init.el:912-915` in `dotspacemacs/user-config`
- Created two timer variants for testing:
  - `jd-org-today-and-book-orgpomodoro` (org-pomodoro)
  - `jd-org-today-and-book-pomidor` (pomidor)
- Updated keybinding `C-c C-x po` to use `pomidor-stop`

*** Refinement After Testing
- Renamed `jd-org-today-and-book` to use org-pomodoro by default
- Created `pomidor-start` function as the pomidor variant
- Added `pomodoro-stop` wrapper function for `org-pomodoro-kill` in `shared-functions.org:1347-1350`

*** Documentation Improvements
- Renamed `docs/change-log.org` → `docs/work-log.org` to align with documentation standards
- Updated `CLAUDE.md` to reference work-log.org
- Moved debugging insights from `docs/pasteboard-architecture.org` to `docs/codebase-wisdom.org`:
  - Markdown bold conversion order bug (2025-10-05)
  - Emoji LaTeX export filter bug (2025-10-05)
- Simplified pasteboard-architecture.org to focus on architecture rather than debugging details

*** Other Changes
- Removed `inhibit-message` wrapper from `org-roam-db-sync` to make save-place operations visible

** Files Modified
- `spacemacs.d/init.el` - Added pomidor package loading
- `shared-functions.org` - Refactored pomodoro functions, added pomodoro-stop wrapper
- `keys.el` - Updated pomidor-stop keybinding
- `org-roam-config.el` - Removed message suppression
- `docs/work-log.org` - Renamed from change-log.org
- `docs/codebase-wisdom.org` - Added markdown bold and emoji LaTeX debugging entries
- `docs/pasteboard-architecture.org` - Simplified and cross-referenced codebase-wisdom
- `CLAUDE.md` - Updated documentation link

** Git Commits
1. "Fix pomodoro timer loading and rename change-log to work-log"
2. "Refine pomodoro setup and move debugging insights to codebase-wisdom"

** Notes
- User prefers pomidor timer interface for visual feedback
- org-pomodoro is default for main workflow functions
- Both timer systems now available: `jd-org-today-and-book` (org-pomodoro) and `pomidor-start` (pomidor)
- Documentation now follows vibecoding/how-to-document.org standards with work-log.org and proper separation between architecture docs and debugging wisdom

** Next Steps
- Monitor save-place messages during org-roam operations
- Test both timer variants in actual workflow

* 2025-10-03: Fixed smart-return link following by removing ARCHIVE tag

** Problem
Pressing RET on org links stopped following them after the 2025-10-02 cache stabilization commit.

** Root Cause
The `(setq org-return-follows-link t)` setting was located under a heading tagged with `:ARCHIVE:` in `shared-functions.org`. Org-babel skips archived sections during tangling, so this setting never made it into the generated `shared-functions.el` file.

** Solution
- Removed `:ARCHIVE:` tag from the "Intro / About" heading (line 234 of `shared-functions.org`)
- Fixed malformed comment syntax in `smart-return.el` (line 53) where closing parenthesis was missing

** Files Modified
- `shared-functions.org:234` - Removed `:ARCHIVE:` tag
- `smart-return.el:53` - Fixed comment syntax

* 2025-10-03: Fixed region deletion bug in my/delete-backward-and-capitalize

* 2025-10-06: Harden gnu-emacs batch startup and begin shared-functions reorg

** Context
Running `emacs --batch -L . --load gnu-emacs-startup.el` tripped over mode maps that are only defined once Spacemacs finishes loading. At the same time, the top of `shared-functions.org` had grown organically, so related environment tweaks were scattered between headings.

** Changes
- Wrapped the Evil, Help, Flyspell, and Org keybinding adjustments in `with-eval-after-load` guards and required the corresponding libraries in the startup file so batch loads no longer abort.
- Added a lightweight `ignore-errors` guard around the `] cr` unbinding to keep non-prefix keys from erroring out in minimal sessions.
- Consolidated the package archives, global defaults, appearance hooks, and minor-mode setup into a new `Environment Setup` section at the top of `shared-functions.org` to make the bootstrap flow easier to skim.
- Folded the long-running `Org-Specific Config` block into the primary `Org-mode Configuration` section so the entire org toolchain lives in one place.
- Registered the `important-return-value` declare keyword and cleared obsolete `incf`/`decf` warnings so dependencies like `undo-fu-session` load without spurious startup noise.

** Files Modified
- `gnu-emacs-startup.org`
- `gnu-emacs-startup.el`
- `shared-functions.org`

* 2025-10-06: Renamed raw paste helper to pasteboard-paste-verbatim

** Context
The clipboard helpers used `pasteboard-copy-verbatim` for copying but `pasteboard-paste-raw` for the matching paste, which made the pair harder to discover and remember.

** Changes
- Renamed `pasteboard-paste-raw` → `pasteboard-paste-verbatim` and added a compatibility alias so existing configs keep working.
- Updated keymaps (`keys.el`, `gnu-emacs-startup.org`, `shared-functions.org`) and docs to reference the new name.
- Documented the alias in the pasteboard architecture guide and instructions so the on-ramp stays accurate.

** Files Modified
- `pasteboard-copy-and-paste-functions.org`
- `keys.el`
- `gnu-emacs-startup.org`
- `shared-functions.org`
- `docs/pasteboard-architecture.org`
- `docs/org-element-cache-fix.org`
- `docs/instructions.org`

** Problem
When selecting all text in a buffer (or any region) and calling `my/delete-backward-and-capitalize`, the function would fail to delete the entire highlighted text.

** Root Cause
During the 2025-10-02 cache stabilization refactor, the order of operations in `my/delete-backward-and-capitalize` was changed. The function would:
1. Check if at an org heading (`at-heading`)
2. Capture region boundaries (`region-beg`, `region-end`)
3. Execute heading cleanup logic (`kill-line 0`, `insert " "`)
4. Try to delete the region using now-invalid boundaries

The heading cleanup at step 3 would modify the buffer, invalidating the region boundaries captured in step 2.

** Solution
Modified the `let*` binding to check `has-region` first, then only set `at-heading` to true when there is no active region:

#+BEGIN_SRC emacs-lisp
(let* ((has-region (use-region-p))
       (at-heading (and (not has-region) (looking-back-safe "^[*]+ ")))
       ...)
#+END_SRC

This ensures the heading cleanup logic never runs when a region is active, preventing buffer modification before region deletion.

** Files Modified
- `spacecraft-mode.org:1027-1028` - Reordered `let*` bindings to prevent heading logic from invalidating region boundaries

* 2025-01-27: Fixed org-inline-tags font-lock highlighting

* 2025-10-02: Stabilised org-element cache interactions

** Summary
- Wrapped high-frequency editing commands (`smart-return`, `smart-space`, and `my/delete-backward-and-capitalize`) in `combine-after-change-calls` transactions so Org’s cache only re-syncs once per keystroke
- Reworked pasteboard helpers to pre-process text in temp buffers before insertion and added reusable clipboard utilities
- Guarded the pasteboard cleaner’s narrowing step with refreshed `(point-min)/(point-max)` bounds so Markdown conversions no longer raise `args-out-of-range`
- Added a focus-in hook that force-resets the element cache for Dropbox-synchronised org-roam buffers to avoid stale offsets after external edits
- Verified the previous org-element cache warnings no longer reproduce with the hardened helpers
- Restored the `convert-markdown-links-to-org-mode` helper so the new pasteboard pipeline can safely normalise Markdown links before insertion

** Notes
- Batch compiled/tangled the touched modules to ensure they load cleanly in isolation
- `shared-functions.el` still expects optional packages (vertico, projectile, ox-twbs); run inside a full config before evaluating the new cache reset hook

** Problem
The org-inline-tags feature was defined but tags like #todo, #review, #inlinetags were not appearing in the configured orange color. They remained the same color as surrounding text.

** Struggles & Difficulties Encountered

*** 1. Initial Font-Lock Function Approach Failed
- First attempted to use a function `org-inline-tags--composed-face` in the font-lock rule
- Font-lock expected either a face name or a properly structured face expression, not a function call that returns a face
- The function was never actually being called by the font-lock system

*** 2. Conflict with Existing Org-Mode Font-Lock Rules
- Encountered error: "No match 2 in highlight (2 'org-headline-done prepend)"
- Our font-lock pattern was somehow interfering with org-mode's existing font-lock rules
- The error suggested font-lock was trying to access match group 2 that didn't exist in our pattern

*** 3. Partial Fontification Issue
- Even after fixing the errors, tags would only turn orange when typing a space after them
- Existing tags in the buffer were not being fontified
- Font-lock was only applying to newly typed text, not retroactively to existing content

** Solution

The final working solution combined two approaches:

*** 1. Simplified Font-Lock Rule
#+BEGIN_SRC emacs-lisp
(defun org-inline-tags-setup-font-lock ()
  "Setup font-lock for inline tags in org-mode."
  (font-lock-add-keywords
   nil
   '(("\\(#\\w+\\(?:-\\w+\\)*\\)"
      (1 'org-inline-tags-face t)))
   t))
#+END_SRC

- Used a simple direct face name instead of a function
- Match group 1 captures just the tag content
- The `t` flag overwrites any existing face (instead of `prepend` which was causing conflicts)

*** 2. Manual Buffer Fontification
#+BEGIN_SRC emacs-lisp
(defun org-inline-tags-fontify-buffer ()
  "Manually fontify all inline tags in the current buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "#\\w+\\(?:-\\w+\\)*" nil t)
      (let ((start (match-beginning 0))
            (end (match-end 0)))
        (put-text-property start end 'face 'org-inline-tags-face)
        (put-text-property start end 'font-lock-face 'org-inline-tags-face)))))
#+END_SRC

- Manually searches through buffer and applies face properties
- Sets both `face` and `font-lock-face` properties to ensure persistence
- Called immediately when enabling the mode to fontify existing tags

** Key Learnings

1. **Font-lock expects specific structures**: Can't just pass a function that returns a face; must use either a face name directly or a matcher function that follows font-lock conventions

2. **Existing font-lock rules can conflict**: When adding keywords to modes with complex font-lock setups like org-mode, conflicts with existing patterns are common

3. **Font-lock doesn't retroactively apply**: Need to manually fontify existing buffer content or force a complete refontification

4. **Both `face` and `font-lock-face` properties may be needed**: Setting both ensures the highlighting persists through various buffer operations

** Files Modified
- `/Users/jay/emacs/emacs-settings/shared-functions.org` (org-inline-tags section starting at line 7171)
