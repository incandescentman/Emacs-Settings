#+TITLE: Codebase Wisdom
#+DATE: 2025-09-24
#+DESCRIPTION: Debugging post-mortems and prevention checklists.

* Sentence Boundary Probes Can Roll Back Atomic Changes
  Date: 2025-10-06

** The Bug
`my/delete-backward-and-capitalize` appeared to do nothing when run on a selected region‚Äîespecially `mark-whole-buffer` followed by the command.

** The Truth
Inside the command, `my/beginning-of-sentence-p` calls `forward-sentence` to detect sentence starts. When the region spans the whole buffer, the delete happens first, leaving an empty buffer. `forward-sentence` then signals `end-of-buffer`, and because we are inside an `atomic-change-group`, Emacs rolls back the entire transaction, silently restoring the buffer.

** The Fix
Wrap the sentence probe in `ignore-errors` and guard against a nil return so we bail out gracefully instead of throwing.

** Lessons Learned / Prevention Checklist
- Treat navigation helpers invoked inside `atomic-change-group` or `combine-after-change-calls` as potential rollback triggers; guard them against `error`.
- When a command "does nothing," rerun with `toggle-debug-on-error`‚Äîsilent rollbacks usually come from trapped errors.
- Add fixtures that cover empty-buffer or whole-buffer deletions whenever a helper mixes editing and sentence/paragraph navigation.

* Region Boundary Invalidation: Capture After Modification Check
  Date: 2025-10-03

** The Bug
When selecting all text in a buffer and calling `my/delete-backward-and-capitalize`, the function would fail to delete the highlighted region correctly.

** The Truth
During cache stabilization refactoring, region boundaries were captured in a `let*` binding BEFORE checking if buffer modifications (like heading cleanup) would run. The heading cleanup (`kill-line 0`) invalidated the captured positions before they were used for deletion.

** Why This Happened
The refactor moved from a messy but working version (where heading check was at the top, outside main logic) to a cleaner `let*` binding structure. The developer ordered the bindings logically but didn't account for the critical timing: positions must be captured AFTER determining whether intervening modifications will occur, or modifications must be prevented when positions are needed.

** The Fix
Changed from:
#+BEGIN_SRC emacs-lisp
(let* ((at-heading (looking-back-safe "^[*]+ "))
       (has-region (use-region-p))
       (region-beg (when has-region (region-beginning)))
       (region-end (when has-region (region-end)))
       ...)
#+END_SRC

To:
#+BEGIN_SRC emacs-lisp
(let* ((has-region (use-region-p))
       (at-heading (and (not has-region) (looking-back-safe "^[*]+ ")))
       (region-beg (when has-region (region-beginning)))
       (region-end (when has-region (region-end)))
       ...)
#+END_SRC

Now `at-heading` is only true when there's no region, preventing buffer modifications before region deletion.

** Lessons Learned / Prevention Checklist
- When refactoring for cleanliness, watch for position captures that depend on buffer state
- In `let*` bindings that capture positions: either (1) capture AFTER all checks that might modify buffer, or (2) guard modifications to prevent them when positions are needed
- Buffer positions are invalidated by ANY text modification between capture and use - even "harmless" cleanup
- Test region-based operations during refactoring, especially when reordering logic
- The same pattern could affect other functions: check for `(region-beginning)` or `(region-end)` captured before buffer modifications

* Pasteboard Emoji Split: Save The Joiners
  Date: 2025-09-24

** The Bug
Compound emoji (üßë‚Äçü§ù‚Äçüßë) arrived as disjoint characters after `pasteboard-paste-clean`.

** The Truth
`replace-weird-spaces` stripped zero-width joiners/non-joiners, breaking emoji ligatures that depend on them.

** Why This Took 2 Hours
1. Assumed the culprit was the Markdown cleaners instead of whitespace normalization.
2. Ignored the change log until reproducing with `insert-char` proved the joiner vanished.
3. Forgot to log debug output from each pipeline stage.

** The Fix
Removed U+200C/U+200D from the regex so the cleaning pass leaves joiners intact.

** Lessons Learned / Prevention Checklist
- Inspect transformations after each sanitizer; don‚Äôt assume later steps are guilty.
- Document every Unicode codepoint we normalize in the docstring.
- Add regression snippets to `/docs/codebase-wisdom.org` when weird Unicode is involved.

* Markdown Table Dash Explosion: Respect the Separator
  Date: 2025-09-24

** The Bug
Pasting GitHub-flavored markdown tables produced separator rows packed with spaced em-dashes instead of `-----`.

** The Truth
`normalize-dashes` saw `---` inside table rows and expanded them into em-dash text between non-whitespace characters.

** Why This Took 1.5 Hours
1. Never suspected the dash normalizer because the function pre-dated the table work.
2. Diffed the entire paste pipeline instead of isolating the dash pass early.
3. Lacked a targeted fixture for Markdown table pastes.

** The Fix
Teach `normalize-dashes` to detect `|‚Ä¶|` table lines and skip dash rewrites inside them.

** Lessons Learned / Prevention Checklist
- Add focused fixtures (see `/tmp/md-table-sample.txt`) before changing sanitizers.
- When a helper handles generic punctuation, audit domain-specific inputs (tables, code fences) separately.
- Update `/docs` alongside code so the tribal knowledge persists.
