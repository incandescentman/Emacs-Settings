#+TITLE: Codebase Wisdom
#+DATE: 2025-09-24
#+DESCRIPTION: Debugging post-mortems and prevention checklists.

* Org Heading Flattening: Structure vs Formatting
  Date: 2025-10-13

** The Bug
Pasting an Org subtree via `pasteboard-paste-adaptive` turned every `**** TODO` entry into `*** TODO`, collapsing the heading hierarchy in-place.

** The Truth
The cleaning pass ran `replace-smart-quotes`, which still contained the Markdown-era rule ‚Äúreplace every `**` with `*`‚Äù. During the ‚Äúclean‚Äù paste path we already had Org syntax, so that blanket replacement ate half of each heading‚Äôs star run before the text ever touched the buffer.

** Why This Was Tricky
- The regression only appeared in Org buffers that took the ‚Äúclean‚Äù branch; Markdown/code buffers went through the verbatim branch and stayed fine.
- Unit snippets focused on Markdown conversions, so pasting native Org trees wasn‚Äôt part of the smoke tests.
- Watching the final buffer hid the culprit; the destructive change happened inside the temp buffer that feeds `pasteboard-paste`.

** The Fix
Teach the `** ‚Üí *` loop to walk the line‚Äôs leading stars, record the first non-star position, and only convert `**` pairs that appear *after* that point. Tangled the change so both `.org` and `.el` stay in sync.

** Lessons Learned / Prevention Checklist
- Distinguish between structure (`^\\*+ ` headings) and inline formatting (`*bold*`) before reusing Markdown cleanup on Org text.
- When editing temp buffers, add `(message ...)` or batch snippets to observe the intermediate state‚Äîotherwise you miss where the hierarchy was flattened.
- Expand paste fixtures to include ‚Äúpure Org‚Äù inputs with nested headings, inline bold, and emojis; they exercise the same sanitizers as Markdown pastes.
- Any rule that blindly rewrites punctuation (`**`, `--`, etc.) must document the assumed input syntax and bail out when that assumption no longer holds.

** Follow-up: Org-Fold + `replace-regexp`
- Symptom: `pasteboard-paste-adaptive` raised ‚ÄúCalling `org-fold-core-region` with missing SPEC‚Äù while `replace-smart-quotes-regexp` ran in a temp buffer.
- Cause: `replace-regexp` triggers Org‚Äôs fold maintenance, which expects the interactive search state; our non-interactive call provided no fold spec.
- Fix: Replaced the `mapcar` call to `replace-regexp` with manual `re-search-forward`/`replace-match` loops so Org never tries to manage folds in the temp buffer.
- Guardrail: Avoid `replace-regexp` (and other interactive wrappers) inside hidden buffers; prefer explicit loops that stay fold-agnostic.

* Sentence Boundary Probes Can Roll Back Atomic Changes
  Date: 2025-10-06

** The Bug
`my/delete-backward-and-capitalize` appeared to do nothing when run on a selected region‚Äîespecially `mark-whole-buffer` followed by the command.

** The Truth
Inside the command, `my/beginning-of-sentence-p` calls `forward-sentence` to detect sentence starts. When the region spans the whole buffer, the delete happens first, leaving an empty buffer. `forward-sentence` then signals `end-of-buffer`, and because we are inside an `atomic-change-group`, Emacs rolls back the entire transaction, silently restoring the buffer.

** The Fix
Wrap the sentence probe in `ignore-errors` and guard against a nil return so we bail out gracefully instead of throwing.

** Lessons Learned / Prevention Checklist
- Treat navigation helpers invoked inside `atomic-change-group` or `combine-after-change-calls` as potential rollback triggers; guard them against `error`.
- When a command "does nothing," rerun with `toggle-debug-on-error`‚Äîsilent rollbacks usually come from trapped errors.
- Add fixtures that cover empty-buffer or whole-buffer deletions whenever a helper mixes editing and sentence/paragraph navigation.

* Region Boundary Invalidation: Capture After Modification Check
  Date: 2025-10-03

** The Bug
When selecting all text in a buffer and calling `my/delete-backward-and-capitalize`, the function would fail to delete the highlighted region correctly.

** The Truth
During cache stabilization refactoring, region boundaries were captured in a `let*` binding BEFORE checking if buffer modifications (like heading cleanup) would run. The heading cleanup (`kill-line 0`) invalidated the captured positions before they were used for deletion.

** Why This Happened
The refactor moved from a messy but working version (where heading check was at the top, outside main logic) to a cleaner `let*` binding structure. The developer ordered the bindings logically but didn't account for the critical timing: positions must be captured AFTER determining whether intervening modifications will occur, or modifications must be prevented when positions are needed.

** The Fix
Changed from:
#+BEGIN_SRC emacs-lisp
(let* ((at-heading (looking-back-safe "^[*]+ "))
       (has-region (use-region-p))
       (region-beg (when has-region (region-beginning)))
       (region-end (when has-region (region-end)))
       ...)
#+END_SRC

To:
#+BEGIN_SRC emacs-lisp
(let* ((has-region (use-region-p))
       (at-heading (and (not has-region) (looking-back-safe "^[*]+ ")))
       (region-beg (when has-region (region-beginning)))
       (region-end (when has-region (region-end)))
       ...)
#+END_SRC

Now `at-heading` is only true when there's no region, preventing buffer modifications before region deletion.

** Lessons Learned / Prevention Checklist
- When refactoring for cleanliness, watch for position captures that depend on buffer state
- In `let*` bindings that capture positions: either (1) capture AFTER all checks that might modify buffer, or (2) guard modifications to prevent them when positions are needed
- Buffer positions are invalidated by ANY text modification between capture and use - even "harmless" cleanup
- Test region-based operations during refactoring, especially when reordering logic
- The same pattern could affect other functions: check for `(region-beginning)` or `(region-end)` captured before buffer modifications

* Pasteboard Emoji Split: Save The Joiners
  Date: 2025-09-24

** The Bug
Compound emoji (üßë‚Äçü§ù‚Äçüßë) arrived as disjoint characters after `pasteboard-paste-clean`.

** The Truth
`replace-weird-spaces` stripped zero-width joiners/non-joiners, breaking emoji ligatures that depend on them.

** Why This Took 2 Hours
1. Assumed the culprit was the Markdown cleaners instead of whitespace normalization.
2. Ignored the change log until reproducing with `insert-char` proved the joiner vanished.
3. Forgot to log debug output from each pipeline stage.

** The Fix
Removed U+200C/U+200D from the regex so the cleaning pass leaves joiners intact.

** Lessons Learned / Prevention Checklist
- Inspect transformations after each sanitizer; don‚Äôt assume later steps are guilty.
- Document every Unicode codepoint we normalize in the docstring.
- Add regression snippets to `/docs/codebase-wisdom.org` when weird Unicode is involved.

* Markdown Table Dash Explosion: Respect the Separator
  Date: 2025-09-24

** The Bug
Pasting GitHub-flavored markdown tables produced separator rows packed with spaced em-dashes instead of `-----`.

** The Truth
`normalize-dashes` saw `---` inside table rows and expanded them into em-dash text between non-whitespace characters.

** Why This Took 1.5 Hours
1. Never suspected the dash normalizer because the function pre-dated the table work.
2. Diffed the entire paste pipeline instead of isolating the dash pass early.
3. Lacked a targeted fixture for Markdown table pastes.

** The Fix
Teach `normalize-dashes` to detect `|‚Ä¶|` table lines and skip dash rewrites inside them.

** Lessons Learned / Prevention Checklist
- Add focused fixtures (see `/tmp/md-table-sample.txt`) before changing sanitizers.
- When a helper handles generic punctuation, audit domain-specific inputs (tables, code fences) separately.
- Update `/docs` alongside code so the tribal knowledge persists.

* Shift-Selection Regression: Autoloads Can Short-Circuit Startup
  Date: 2025-10-06

** The Bug
`org-support-shift-select` unexpectedly reset to `nil`, so using `S-<arrow>` in Org threw the ‚Äúcustomize `org-support-shift-select`‚Äù error even though the variable was set to `'always` in `shared-functions.org`.

** The Truth
While trying to silence warnings we autoloaded `shift-select-mode` inside `dotspacemacs/user-config`.  The file `delsel.el` does not define that symbol, so Spacemacs threw ‚Äúfailed to define function shift-select-mode‚Äù early in startup.  The failure aborted the rest of `user-config`, preventing our Org customization from ever running and leaving the variable at its default `nil`.

** The Fix
Remove the bogus autoload, keep the simple `(setq org-support-shift-select 'always)` in `shared-functions.org`, and reinforce it once Org loads (`spacemacs-new-config.el`‚Äôs `with-eval-after-load 'org`).  No autoloads, no extra hooks.

** Lessons Learned / Prevention Checklist
- Don't autoload symbols blindly‚Äîconfirm the library actually defines them.
- When startup fails partway through `dotspacemacs/user-config`, Spacemacs continues with partially applied settings.  Always scan `*Messages*` for early errors after tweaking startup code.
- Prefer a single, unconditional `setq` for global knobs; layer on `with-eval-after-load` only when a package truly needs it.

* Markdown Bold Conversion: Order and Precision Matter
  Date: 2025-10-05

** The Bug
When pasting markdown text like `## **Dates:** October 7-9`, the output was incorrectly formatted as `** **Dates:**` or `***Dates:*` instead of the desired `** *Dates:*`.

** The Truth
The issue had TWO layers:

1. *Order of operations bug*: Originally, `replace-smart-quotes` ran BEFORE `convert-markdown-headings-to-org`:
   - Input: `## **Dates:**`
   - `replace-smart-quotes` converted `**` ‚Üí `*`: `## *Dates:*`
   - `convert-markdown-headings-to-org` converted `##` ‚Üí `**`: `** *Dates:*`
   - But this left the `##` unconverted in some cases

2. *Heading detection bug*: The `**` ‚Üí `*` replacement logic checked if the LINE started with asterisks, but then skipped ALL `**` on that line:
   - Input (after heading conversion): `** **Dates:**`
   - Check: "Does line start with `^\*+\s`?" ‚Üí Yes (matches `** `)
   - Action: Skip ALL `**` on the line (even the ones in `**Dates:**`)
   - Result: `** **Dates:**` (nothing replaced)

** The Fix
1. *Fixed order*: Run `convert-markdown-headings-to-org` FIRST, before any asterisk processing in `pasteboard--clean-string`
2. *Fixed heading detection*: Only skip `**` if it's PART OF the heading stars at line start:
   #+begin_src elisp
   (let* ((match-pos (match-beginning 0))
          (line-start (line-beginning-position))
          (at-line-start (= match-pos line-start)))
     ;; Only skip if THIS specific ** is at line start AND part of heading
     (if (and at-line-start (looking-at "^\\*+\\s-"))
         nil  ; Skip - it's heading stars
       (replace-match "*" t t)))  ; Replace - it's markdown bold
   #+end_src

** Lessons Learned / Prevention Checklist
- When processing mixed markdown/org content, ORDER MATTERS: Convert structural elements (headings) FIRST, then process inline formatting (bold, italic)
- Always check the SPECIFIC match location, not just the line pattern
- Test with complex cases like `## **Bold:** text` that combine structural and inline markdown
- Document cleaner order in architecture docs and enforce it with comments in code

* Org Heading Regex: Always Require Space After Stars
  Date: 2025-10-10

** The Bug
Bold text at the start of lines (`*"text"*`) was being treated as org headings by functions that match `^\\*+`, causing incorrect transformations.

** The Truth
Org headings ALWAYS have a space after the stars (`** Heading`), but many regex patterns forget this distinction and match ANY line starting with asterisks, including bold/emphasis markers at line start.

** The Fix
Change patterns from `"^\\(\\*+\\)"` to `"^\\(\\*+\\) "` when matching actual org headings. Include the space in replacements too:
#+BEGIN_SRC emacs-lisp
;; Wrong - matches bold text at line start
(re-search-forward "^\\(\\*+\\)" nil t)

;; Right - only matches org headings
(re-search-forward "^\\(\\*+\\) " nil t)
(replace-match (concat new-stars " ") t t)  ; Keep the space
#+END_SRC

** Lessons Learned / Prevention Checklist
- Org structural elements (headings) vs inline formatting (bold) have distinct patterns
- A heading is `^\\*+ ` (stars + space), bold is just `*text*`
- When processing org text after markdown conversion, remember you're seeing org syntax not markdown
- Test with bold/italic text at line boundaries - common edge case for pattern bugs
- Document whether functions expect markdown input or org input

* Emoji in LaTeX Export: Filter at the Right Level
  Date: 2025-10-05

** The Bug
Emoji like üìÖ üéØ üí° were appearing in LaTeX output, causing compilation errors since standard LaTeX doesn't support emoji.

** The Truth
The initial fix only added an `org-export-filter-plain-text-functions` filter, but emoji in headings don't pass through the plain-text filter - they're part of the headline structure.

** Why This Took Time
Assumed all text passes through plain-text filters, not realizing org export has different filter types for different content structures (headlines, links, emphasis, etc.).

** The Fix
Add the emoji stripping filter to BOTH plain-text and headline filters:
#+begin_src elisp
(defun my-org-latex-strip-emoji (text backend info)
  "Remove emoji from LaTeX export."
  (when (org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string "[üÄÄ-ü´ø]" "" text)))

(add-to-list 'org-export-filter-plain-text-functions 'my-org-latex-strip-emoji)
(add-to-list 'org-export-filter-headline-functions 'my-org-latex-strip-emoji)
#+end_src

** Lessons Learned / Prevention Checklist
- Org export has different filter types for different content types (headlines, paragraphs, links, etc.)
- Check the org-export-filter-* variables to ensure you're filtering at the right level
- When a filter "doesn't work," verify the content type actually passes through that filter
- Test with emoji in different locations (body text, headings, lists) to catch all cases
