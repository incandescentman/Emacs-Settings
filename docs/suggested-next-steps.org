#+TITLE: Emacs Configuration Simplification Plan
#+AUTHOR: Jay Dixit
#+DATE: 2025-10-26

* Overview

This document provides a systematic plan for simplifying the Emacs configuration while preserving all existing functionality. The focus is on eliminating duplication, consolidating scattered settings, and reducing maintenance burden.

*Status:* 2 of 9 simplifications completed (22% done)

* Current Configuration State

** Statistics
- Spacemacs init: ~1,255 lines (=~/.spacemacs.d/init.el=) ✅ Active config
- ~~Spacemacs backup: ~1,186 lines (=init-working.el=)~~ ✅ DELETED 2025-10-26
- GNU Emacs init: ~1,342 lines (=gnu-emacs-startup.el=) - UNUSED
- Shared functions: ~9,826 lines / 336 function definitions (=shared-functions.org=)
- Pasteboard functions: ~1,120 lines (=pasteboard-copy-and-paste-functions.el=) ✅ Converted to pure elisp 2025-10-26
- Total elisp files: ~35,000 lines across 20+ files
- Auto-tangling org files: 4 files requiring tangle/edit coordination (down from 5)

** File Locations
*Active configuration:*
- =~/.spacemacs.d/init.el= - The actual Spacemacs config (1,255 lines)
- =~/.emacs.d= → =/Users/jay/emacs/spacemacs= (Spacemacs installation)
- =~/.spacemacs= → =/Users/jay/starship/init.el= (empty, not used)

*Version-controlled files:*
- =/Users/jay/emacs/emacs-settings/= - Main config directory
- All customizations loaded from =dotspacemacs/user-config= section

*Note:* The =~/.spacemacs.d/= directory is where Spacemacs looks for configuration, not the =emacs-settings/spacemacs.d/= directory.

** What NOT to Simplify

Keep these as-is (they work well):
- ✅ =shared-functions.org= monolithic structure (noted as "convenient")
- ✅ Literate programming for core files if you value the documentation
- ✅ Platform-specific files (=jay-osx.el=, =pasteboard-*.el=)
- ✅ Extensive cloud storage / file-notify fixes (they work!)
- ✅ Custom =spacecraft-mode= (unique functionality)

* Completed Simplifications

** 2025-10-26: Removed init-working.el backup
- Deleted =spacemacs.d/init-working.el= (old backup from Oct 14)
- Active config (=~/.spacemacs.d/init.el=) is newer with better features
- Eliminated confusion between two similar files
- *Savings:* 1 redundant file removed

** 2025-10-26: Converted pasteboard-copy-and-paste-functions from literate to pure elisp
- Converted =pasteboard-copy-and-paste-functions.org= → documentation only
- Source of truth is now =pasteboard-copy-and-paste-functions.el= (pure elisp)
- Added rich Commentary section with usage examples
- Added clear section headers (=============) for navigation
- Removed auto-tangling overhead
- *Savings:* No more edit→tangle→test cycle, direct edit-test workflow
- *Result:* Successfully tested - file loads without errors

* Recommended Simplifications

** 1. Eliminate the Dual Boot Path ⭐⭐⭐⭐⭐
*Priority: HIGH | Impact: HUGE | Risk: LOW*

*Problem:* Two complete startup systems create massive duplication:
- Spacemacs: =~/.spacemacs.d/init.el= (1,255 lines) - ACTIVE
- GNU Emacs: =gnu-emacs-startup.el= (1,342 lines) - UNUSED

*Impact:* Settings must be synchronized across both configs, leading to drift and maintenance burden.

*Recommendation:*
1. Choose Spacemacs (currently active, based on recent fixes)
2. Delete =gnu-emacs-startup.el= and =gnu-emacs-startup.org=
3. Archive to git history if needed later

*Savings:* ~1,400 lines, eliminates dual-maintenance burden

*Implementation:*
#+begin_src bash
# Commit current state first
git add gnu-emacs-startup.{el,org}
git commit -m "Archive: GNU Emacs standalone config (moving to Spacemacs-only)"

# Remove files
rm gnu-emacs-startup.{el,org}
#+end_src

** 2. Convert Literate Org Files to Pure Elisp ⭐⭐⭐
*Priority: MEDIUM | Impact: MODERATE | Risk: LOW*

*Problem:* 4 auto-tangling org files create workflow overhead:
- =shared-functions.org= (324KB) → =.el=
- ~~=pasteboard-copy-and-paste-functions.org= (52KB) → =.el=~~ ✅ CONVERTED 2025-10-26
- =spacecraft-mode.org= (40KB) → =.el=
- =fonts-and-themes.org= (13KB) → =.el=
- =gnu-emacs-startup.org= (56KB) → =.el= [DELETE with item #1]

*Issues:*
- Must remember to tangle before testing
- Stale =.el= files cause bugs (documented in =docs/codebase-wisdom.org=)
- Extra cognitive load tracking two files per module

*Recommendation:*
1. Only use literate programming for =shared-functions.org= (the truly complex one)
2. Convert smaller files to pure =.el=
   - ~~pasteboard~~ ✅ DONE 2025-10-26
   - spacecraft
   - fonts

*Savings:* Eliminates tangling errors, faster edit-test cycle

*Status Update (2025-10-26):*
- ✅ =pasteboard-copy-and-paste-functions= converted to pure elisp
- Successfully tested - loads without errors
- Direct edit-test workflow confirmed working
- Remaining candidates: spacecraft-mode, fonts-and-themes, shared-functions

** 3. Modularize shared-functions.org ⭐⭐⭐
*Priority: MEDIUM | Impact: HIGH | Risk: MEDIUM*

*Problem:* Monolithic file with 9,826 lines and 336 functions across 30+ unrelated topics.

*Current structure:*
- Writing Environment
- Utility Functions
- UI / customization
- org-mode (multiple sections)
- Browsing
- Miscellaneous/unsorted
- Backups
- Word count
- Date/time functions
- Prose editing
- File management
- Keybindings

*Recommendation:* Split into focused modules:
#+begin_src org
org-writing.el        # Writing-specific functions (web-research, etc.)
org-utilities.el      # General org helpers (refile, scratch buffers)
date-time-utils.el    # Date/time functions
file-management.el    # Save, backup, file functions
ui-enhancements.el    # Visual/UI functions (fullscreen, font sizing)
#+end_src

*Benefits:*
- Can defer non-essential modules
- Easier to locate functions
- Can byte-compile separately
- Reduced cognitive load

*Caveat:* Your docs note "monolithic is convenient for personal config" - only split if you find yourself searching through it frequently.

** 4. Use Package Manager Instead of Vendored Code ⭐⭐
*Priority: LOW | Impact: MODERATE | Risk: LOW*

*Problem:* Large vendored files clutter the config directory:
- =dired+.el= (868KB)
- =highlight-tail.el= (48KB)
- =poetry_JD.el=, =forecast.el=, =ox-koma-letter.el=

*Recommendation:*
1. Check if available via MELPA/ELPA
2. If not, move to =vendor/= subdirectory to declutter

#+begin_src emacs-lisp
;; If available on MELPA:
(use-package dired+
  :ensure t
  :defer t)

;; If vendored, organize:
(add-to-list 'load-path "~/emacs/emacs-settings/vendor")
#+end_src

** 5. Consolidate Configuration Files ⭐⭐⭐⭐
*Priority: HIGH | Impact: HIGH | Risk: LOW*

*Problem:* Complex load chain in =~/.spacemacs.d/init.el= (dotspacemacs/user-config section):
#+begin_src emacs-lisp
(load "/Users/jay/emacs/emacs-settings/spacemacs-new-config.el")  ; 351 lines
(load "/Users/jay/gnulisp/smart-return.el")                       ; Different location
(load "/Users/jay/emacs/emacs-settings/elpa-supplement/buffer-stack.el")
(load "/Users/jay/emacs/emacs-settings/elpa-supplement/frame-cmds.el")
(load "/Users/jay/emacs/local-config.el")
#+end_src

*Recommendation:* Use =use-package= with =:load-path= for clarity:
#+begin_src emacs-lisp
(use-package smart-return
  :load-path "/Users/jay/gnulisp"
  :defer t
  :bind ("RET" . smart-return))

(use-package buffer-stack
  :load-path "elpa-supplement"
  :commands (buffer-stack-down buffer-stack-up))
#+end_src

*Alternative:* Merge =spacemacs-new-config.el= into =dotspacemacs/user-config= directly.

*Savings:* Fewer files to track, clearer dependency chain

** 6. Remove Commented/Dead Code ⭐⭐⭐⭐
*Priority: HIGH | Impact: MODERATE | Risk: VERY LOW*

*Problem:* Docs note "large blocks of commented-out code" throughout config.

*Examples found:*
- =spacemacs-new-config.el:23-36= (debugging code)
- Commented =use-package= blocks throughout
- Disabled layers in init files

*Recommendation:* Delete unused code (git preserves history).

*Implementation:*
#+begin_src bash
# Find commented use-package blocks
grep -n "^;; (use-package\|^;;  (load" *.el

# Find large commented blocks (10+ consecutive lines)
awk '/^;;/{n++} !/^;;/{if(n>10) print FILENAME":"NR-n"-"NR; n=0}' *.el

# After review, delete entire commented blocks
#+end_src

*Savings:* ~300-500 lines, improved readability

** 7. Unify Keybinding Configuration ⭐⭐⭐⭐
*Priority: HIGH | Impact: HIGH | Risk: MEDIUM*

*Problem:* Keybindings scattered across:
- =keys.el= (376 lines)
- =jay-osx.el= (defines =key-minor-mode-map=)
- =gnu-emacs-startup.el= (global-set-key calls)
- =shared-functions.org= (* Keybindings section)

*Recommendation:* Consolidate into =keys.el= only, organized by feature:
#+begin_src emacs-lisp
;;; keys.el --- All keybindings in one place -*- lexical-binding: t -*-

;; === Window Management ===
(global-set-key (kbd "s-1") 'delete-other-windows)
(global-set-key (kbd "s-2") 'split-window-vertically)
(global-set-key (kbd "s-3") 'split-window-left)

;; === Org Mode ===
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "M-RET") 'org-meta-return)
  ;; ... all org bindings here
  )

;; === Custom Functions ===
(global-set-key (kbd "C-c w") 'web-research)

(provide 'keys)
#+end_src

*Benefits:* Single source of truth for all keybindings

** 8. Optimize Loading with use-package ⭐⭐⭐
*Priority: MEDIUM | Impact: MODERATE | Risk: LOW*

*Problem:* Many packages loaded eagerly in =dotspacemacs-additional-packages=.

*Current:*
#+begin_src emacs-lisp
dotspacemacs-additional-packages '(
  amx affe org-transclusion ctrlf web-mode
  ox-twbs mwim cape caps-lock captain ...)
#+end_src

*Improved:*
#+begin_src emacs-lisp
(use-package org-transclusion
  :defer t
  :after org
  :commands org-transclusion-mode)

(use-package ctrlf
  :defer 5  ; Load after 5 idle seconds
  :config (ctrlf-mode +1))

(use-package cape
  :defer t
  :hook (completion-at-point-functions . cape-file))
#+end_src

*Benefit:* Faster startup time

** 9. Consolidate Org-Mode Settings ⭐⭐⭐⭐
*Priority: HIGH | Impact: HIGH | Risk: MEDIUM*

*Problem:* Org settings spread across:
- =~/.spacemacs.d/init.el= (dotspacemacs/user-config - performance settings)
- =shared-functions.org:64-80= (org-mode settings)
- =org-roam-config.el=
- =org-visual-style.el=
- =org-yt.el=

*Recommendation:* Create =org-config.el= that loads all org modules:
#+begin_src emacs-lisp
;;; org-config.el --- Unified Org-mode configuration -*- lexical-binding: t -*-

(use-package org
  :defer t
  :config
  ;; Performance settings
  (setq org-element-use-cache nil
        org-element-cache-persistent nil
        org-startup-folded 'showeverything
        org-startup-indented nil)

  ;; Load org extensions
  (require 'org-roam-config)
  (require 'org-visual-style)
  (require 'org-yt)

  ;; All other org settings centralized here
  )

(provide 'org-config)
#+end_src

** 10. Fix Structural Issues ⭐⭐⭐⭐⭐
*Priority: CRITICAL | Impact: HIGH | Risk: LOW*

*Problems identified in CLAUDE.md:*
- Missing =lexical-binding= declarations
- Deprecated functions (=org-bracket-link-regexp= → =org-link-bracket-re=)
- Inconsistent quote styles
- Mixed indentation

*Implementation:*
#+begin_src bash
# 1. Find files missing lexical-binding
grep -L "lexical-binding: t" ~/emacs/emacs-settings/*.el

# 2. Add to each file (must be first line):
# -*- lexical-binding: t -*-

# 3. Find deprecated org variables
grep -r "org-bracket-link-regexp" ~/emacs/emacs-settings/

# 4. Replace with org-link-bracket-re
#+end_src

* Implementation Plan

** Phase 1: Quick Wins (Week 1)
1. Delete =gnu-emacs-startup.el= and =.org= (biggest win, lowest risk)
2. Remove commented code across all files
3. Add =lexical-binding= to all =.el= files
4. Fix deprecated function calls

*Expected impact:* ~1,700 lines removed, improved stability

** Phase 2: Consolidation (Week 2-3)
1. Consolidate keybindings into =keys.el=
2. Consolidate org settings into =org-config.el=
3. Convert 2-3 smaller org files to pure =.el=

*Expected impact:* Clearer structure, easier navigation

** Phase 3: Optimization (Week 4)
1. Migrate eager loads to =use-package= with =:defer=
2. Move vendored files to =vendor/= directory
3. Profile startup time, optimize as needed

*Expected impact:* Faster startup

** Phase 4: Major Refactor (Month 2, optional)
1. Modularize =shared-functions.org= if needed
2. Implement =jay/config-root= variable for relocatable paths
3. Create data-driven loader blocks

*Expected impact:* Maximum maintainability

** Progress Tracking

| Change                        | Lines Saved    | Complexity Reduction      | Startup Improvement | Status  |
|-------------------------------+----------------+---------------------------+---------------------+---------|
| Remove init-working.el backup | 1 file         | ⭐                        | Minimal             | ✅ DONE |
| Convert pasteboard to pure .el | Workflow       | ⭐⭐⭐                  | Minimal             | ✅ DONE |
| Remove GNU Emacs dual boot    | ~1,400         | ⭐⭐⭐⭐⭐               | Minimal             | Pending |
| Consolidate config loads      | ~200           | ⭐⭐⭐                  | Minimal             | Pending |
| Remove commented code         | ~300-500       | ⭐⭐⭐⭐                 | Minimal             | Pending |
| Fix deprecated functions      | ~50            | ⭐⭐ (stability++)      | Minimal             | Pending |
| Unify keybindings             | ~100           | ⭐⭐⭐⭐                 | Minimal             | Pending |
| Defer package loading         | ~0             | ⭐⭐                    | ⭐⭐⭐⭐             | Pending |
| Consolidate org settings      | ~150           | ⭐⭐⭐⭐                 | Minimal             | Pending |
|-------------------------------+----------------+---------------------------+---------------------+---------|
| *TOTAL*                       | *~2,200 lines* | *Much easier to maintain* | *Faster startup*    | 2/9 done |

** Next Actions

*** Immediate (This Week)
- [X] Delete redundant backup files (init-working.el) - DONE 2025-10-26
- [X] Convert pasteboard literate file to pure elisp - DONE 2025-10-26
- [ ] Backup current configuration to git
- [ ] Delete =gnu-emacs-startup.{el,org}=
- [ ] Run startup to ensure nothing breaks
- [ ] Remove large commented code blocks

*** Short-term (This Month)
- [ ] Add =lexical-binding= to all =.el= files
- [ ] Fix deprecated function calls
- [ ] Consolidate keybindings to =keys.el=
- [ ] Create unified =org-config.el=

*** Long-term (Next Month+)
- [ ] Evaluate modularizing =shared-functions.org=
- [ ] Migrate to =use-package= with =:defer= for lazy loading
- [ ] Profile and optimize startup time
- [ ] Consider converting remaining org files to pure elisp

* Reference Materials

** Quick Wins You Can Do Right Now

#+begin_src bash
# 1. Count commented code
grep -c "^;; (" ~/emacs/emacs-settings/*.el | grep -v ":0$"

# 2. Find files missing lexical-binding
for f in ~/emacs/emacs-settings/*.el; do
  grep -q "lexical-binding: t" "$f" || echo "$f"
done

# 3. Find large blocks of commented code (candidates for deletion)
awk 'BEGIN{n=0} /^;;/{n++} !/^;;/{if(n>10) print FILENAME":"NR-n"-"NR; n=0}' \
  ~/emacs/emacs-settings/*.el

# 4. Profile current startup time
emacs --eval '(message "Startup time: %s" (emacs-init-time))' --kill
#+end_src

** Additional Simplification Ideas

*** Make key-minor-mode canonical
Define the override minor mode once (the rich, global version already lives in =keys.el=) and have =jay-osx.el= and =gnu-emacs-startup.el= simply =(require 'keys)=. That keeps the minibuffer hook, global activation, and keymap tweaks in one place so macOS-specific layers cannot drift.

*** Keep fullscreen + notch logic in a single helper
=jay/toggle-fullscreen= (and the notch/tab-bar helpers) currently live both in =shared-functions.org= and =gnu-emacs-startup.el=. Export the Org definition to a small =display-controls.el=, load it in both startup paths, and delete the duplicate defuns. You preserve every behavior (font resize, tab-bar delay) while shrinking the surface area for bugs.

*** Introduce jay/config-root
Hard-coded strings like ="/Users/jay/emacs/emacs-settings/…"=, spread across =spacemacs-new-config.el=, =shared-functions.org=, and =gnu-emacs-startup.el=, make moves painful. Define =(defconst jay/config-root (file-name-directory (or load-file-name buffer-file-name)))= once and replace the literals with =(expand-file-name "foo.el" jay/config-root)=. All paths keep working, but the repo becomes relocatable.

*** Data-driven loader blocks
The block around =spacemacs-new-config.el:130-154= manually repeats =org-babel-load-file=/=load=. Store the relative file names in two lists (tangled Org vs plain =.el=) and iterate over them. Ordering stays identical, but adding/removing modules becomes a single line rather than copy-pasting boilerplate.

*** Share a jay-core.el
Both =spacemacs.d/init.el= and =gnu-emacs-startup.el= set up the same abbrev defaults, macOS frame helpers, and global hooks. Move those shared pieces into =jay-core.el= (or an Org section that tangles to it) and have each entry point require it before doing their framework-specific wiring. This guarantees the vanilla and Spacemacs flavors never diverge.

** References
- Original analysis: 2025-10-26
- Last updated: 2025-10-26
- See also: =docs/work-log.org= for change history
- See also: =docs/codebase-wisdom.org= for debugging insights
- See also: =docs/design-architecture.org= for design decisions

* Archived Advice

This section contains historical advice from AI assistants that informed the recommendations above.

** Claude's Perspective on Literate Programming

⏺ Looking at your actual files, here's my honest take:

You're Not Really Doing "Literate Programming"

Your org files are mostly:
** Section Name
#+BEGIN_SRC emacs-lisp
(code here)
#+END_SRC

That's not literate programming --- that's just using org-mode as an outline-based code organizer. True literate programming would have paragraphs like:

"The flyspell integration is tricky because Hunspell expects dictionary paths in a specific format. After debugging for 3 hours, I discovered that macOS Hunspell searches in ~/Library first, which causes conflicts. The workaround is to explicitly set ispell-hunspell-dictionary-paths-alist..."

You don't have that. You have section headers followed by code. You could get the same organizational benefit with:

;;; ============================================================
;;; Spellcheck / flyspell
;;; ============================================================

;;; --- flyspell setup ---
(use-package flyspell ...)

The Real Cost of Auto-Tangling

Your CLAUDE.md warns: "delete the stale tangled .el, retangle immediately"

This means you've been bitten by:
1. Editing .org → saves/tangles → but Emacs still has old .el loaded
2. Accidentally editing .el directly → gets overwritten on next tangle
3. Syntax errors in org blocks → broken .el files

Option C: Pure .el with Rich Documentation

1. Convert all to .el files with rich comment sections:
;;; shared-functions.el --- Jay's custom functions -*- lexical-binding: t -*-

;;; Commentary:
;; This file contains 336 utility functions organized by domain.
;; Key sections:
;; - Writing Environment: Prose editing helpers
;; - Org-mode utilities: Custom org functions
;; - Date/time: Timestamp manipulation
;;
;; Design notes:
;; - Most functions use lexical binding for performance
;; - Pasteboard functions are macOS-specific
;;; Code:

2. Keep design docs in docs/ (which you already have):
 - docs/codebase-wisdom.org - for "why this weird workaround"
 - docs/design-architecture.org - for big-picture decisions

3. Benefits:
 - ✅ No tangling step
 - ✅ Direct edit-eval-test cycle
 - ✅ Still have section organization (via comment headers)
 - ✅ Emacs navigation works (imenu, outlines)
 - ✅ Can still byte-compile directly
 - ✅ Docstrings stay close to functions

When to Keep Literate Programming

Keep .org files ONLY if you're doing:
- ✅ Long explanatory paragraphs about complex algorithms
- ✅ Teaching others how the code works
- ✅ Including examples, test cases, and rationale inline
- ✅ Non-linear organization (explain concept, then show 3 implementations)

** Gemini's Perspective on use-package

Of course! Your Emacs configuration is a great example of a literate setup using Org-mode, which is fantastic for documentation. However, as you've noted, it has become disorganized over time, with settings scattered and duplicated.

The best way to organize it is to fully embrace the =use-package= macro for everything. This will consolidate all settings related to a single package into one place, improve startup time through deferred loading, and create a clean, logical structure.

*** 1. Adopt a Clear, Top-Down Structure

Restructure your entire file into a logical sequence. A good standard practice is to organize it from the most fundamental setup to the most specific configurations.

**** Proposed Structure

#+begin_src org
1. Bootstrap & Core Setup
   - Package Management (use-package)
   - Core Emacs Behavior & UI

2. Package Configurations
   - Org Mode
   - Writing & Editing
   - Completion & Searching
   - Utilities
   - Appearance

3. Custom Functions & Bindings
   - Custom Functions
   - Custom Keybindings

4. Final Configuration
#+end_src

*** 2. Consolidate Everything with use-package

This is the most important change. Your massive =setq= block at the beginning should be broken up and moved into the appropriate =use-package= declarations. This makes your configuration modular and easier to read.

**** Example: Refactoring Org Settings

#+begin_src emacs-lisp
(use-package org
  :ensure org-contrib
  :pin gnu
  :defer t

  :custom
  (org-M-RET-may-split-line '((item . t)))
  (org-archive-location "archive/%s_archive::")
  (org-catch-invisible-edits 'smart)
  (org-ellipsis " ")
  (org-startup-folded nil)
  (org-hide-emphasis-markers t)
  (org-log-done 'time)
  (org-todo-keywords '((sequence "TODO" "STARTED" "|" "DONE")
                       (sequence "NEED TO INVOICE" "|" "PAID")))

  :config
  (setq org-use-speed-commands t)

  :bind (("C-c c" . org-capture)
         ("C-c l" . org-store-link)
         ("C-c a" . org-agenda))

  :hook ((org-mode . flyspell-mode)
         (org-mode . visual-line-mode)
         (org-mode . org-autolist-mode)))
#+end_src

*** 3. Separate Your Custom Functions

Move all your custom functions into a separate file, for example, =~/.emacs.d/lisp/my-functions.el=.

*** 4. Tidy Up and Remove Redundancy

- *Lexical Binding:* Only need one declaration at the top of each file
- *Remove Duplicates:* Consolidating with =use-package= will naturally fix this
- *Commented Code:* Delete or move to a separate "scraps" file

*** 5. Simplify Without Changing Behavior

Focus on eliminating duplication so every behavior still exists but only has one implementation.
