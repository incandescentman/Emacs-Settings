# Local Variables:
# org-config-files-local-mode: t
# eval: (define-key org-config-files-local-mode-map (kbd "<SPC>") 'insert-space) 
# End: 
;;;   Current time:      (current-time-string)
;;;   Last command:      last-command
;;; (abbrev-mode)
;; (user-full-name)


* file settings                                                     :ARCHIVE:
#+OPTIONS: f:t
#+TODO: TODO PLEASE-TEST TESTING PLEASE-DEBUG | DONE
#+TODO: | NOTE-TO-JAY NOTE-TO-SERJ NOTE-TO-SERJ
#+TODO: PLEASE-CHECK-MY-INEPT-CODE PLEASE-HELP-ME-DEBUG-MY-INEPT-CODE TRY-THIS | DONE

# Local Variables:
# enable-local-eval: t 
# eval: (make-local-variable abbrev-mode) 
# eval: (define-key org-mode-map (kbd "<SPC>") 'insert-space) 
# eval: (setq abbrev-mode nil) 
# end: 

#+TITLE:Jay Dixit's Emacs setup - May 22, 2015.

* About
  - System: Mac OSX Yosemite
  - Emacs version: GNU Emacs 25.1.1 (Carbon Version) 
  - Use case: I use this file with GNU Emacs for OSX, using Spacemacs.
  - If it matters, the build of GNU Emacs that I use is Mitsuharu Yamamoto's emacs-mac port, available here:
    - =brew tap railwaycat/emacsmacport= 
    - [[https://github.com/railwaycat/homebrew-emacsmacport][railwaycat/homebrew-emacsmacport: Emacs mac port formulae for the Homebrew package manager]]
    - [[https://bitbucket.org/mituharu/emacs-mac/overview][mituharu / emacs-mac — Bitbucket]]


* packages
** Load the proper repositories

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
             '("marmalade" .
               "http://marmalade-repo.org/packages/" ) t)


; (add-to-list 'package-archives
  ;           '("melpa" . "http://melpa.milkbox.net/packages/") t)


(add-to-list 'package-archives
'("melpa" . "https://melpa.org/packages/"))

;; (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))


(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)



(package-initialize)
#+END_SRC

** Load some of my packages:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/emacs/emacs-settings/")
#+END_SRC

** Require some packages
#+BEGIN_SRC emacs-lisp
(use-package org
 :mode (("\\.org$" . org-mode))
 :ensure org-plus-contrib
 :config
 (progn
  ;; config stuff
  )) 
#+END_SRC
   
** Require some org packages
 #+BEGIN_SRC emacs-lisp
;; (require 'org-bullets)
(use-package ox-latex) 
;; (require 'ox-latex)
;; (require 'ox-org)
(use-package ox-org)
;; (require 'ox-html)
(use-package ox-html)
;; (require 'ox-md)
; (require 'org-fstree)
 #+END_SRC


* Setting variables
I should probably eventually break these out of custom-set-variables and organize them according to their function.
#+BEGIN_SRC emacs-lisp



 (setq mail-kill-buffer-on-exit t)
 (setq abbrev-all-caps nil)
 (setq undo-limit 800000)
 (setq user-full-name "Jay Dixit")

 (setq blink-cursor-mode nil)
 (setq buffer-stack-show-position nil)
 (setq buffer-stack-untracked (quote ("KILL" "*Compile-Log*" "*Compile-Log-Show*" "*Group*" "*Completions*" "*Messages*" "*Help*" "*Agenda*")))
 (setq buffer-stack-untracked (quote ("KILL" "*Compile-Log*" "*Compile-Log-Show*" "*Group*" "*Completions*" "*Messages*" "*Help*" "*Archive*" "*Agenda*" "*fontification*" "*Warnings*" "*prolific*" "*750words*" "Calendar")))
 (setq calendar-latitude 40.7)
 (setq case-fold-search t)
 (setq ccm-recenter-at-end-of-file t)
 (setq clean-buffer-list-delay-general 1)
 (setq column-number-mode nil)
 (setq compose-mail-user-agent-warnings nil)
 (setq cua-highlight-region-shift-only t)
 ;; (setq cua-mode nil nil (cua-base))
 (setq cua-mode nil)
 (setq debug-on-error t)
 (setq deft-directory "~/Dropbox/writing/notationaldata/")
; (setq delete-window-preserve-buffer (quote ("fearless.org" "current-book-research.txt" "accountability.txt")))
 (setq dired-clean-up-buffers-too nil)
;; (setq dired-details-hidden-string "")
 (setq dired-kept-versions 8)
 (setq display-time-mode t)
 (setq edit-server-default-major-mode (quote org-mode))
 (setq edit-server-new-frame t)
 (setq eshell-load-hook (quote ((lambda nil (abbrev-mode -1)))))
 (setq grep-highlight-matches (quote always))
 (setq ido-use-faces t)
 (setq ido-use-url-at-point t)
 (setq initial-buffer-choice "~/Dropbox/writing/notationaldata/fearless.org")
 (setq initial-major-mode (quote org-mode))
 ;; (setq mail-default-directory "~/Dropbox/writing/notationaldata/emacs-mail-message-mode-messages")

 (setq make-backup-files t)
 (setq message-draft-headers (quote (From References Date)))

 (setq message-required-headers (quote (From (optional . References))))
 (setq mml-default-directory "~/Dropbox/writing/notationaldata/emacs-mail-message-mode-messages")
 (setq org-M-RET-may-split-line (quote ((item . t))))
 (setq org-activate-links (quote (bracket plain radio tag date footnote)))
           ; (setq org-agenda-jump-prefer-future t)
           ; (setq org-agenda-skip-scheduled-if-done t)
           ; (setq org-agenda-timegrid-use-ampm t)
 (setq org-archive-location "archive/%s_archive::")
 (setq org-ascii-headline-spacing (quote (1 . 1)))
 (setq org-ascii-table-use-ascii-art t)
 (setq org-catch-invisible-edits (quote error))
 (setq org-catch-invisible-edits (quote smart))
 (setq org-ctrl-k-protect-subtree t)
 (setq org-custom-properties (quote (">")))
 (setq org-default-notes-file "~/Dropbox/writing/notationaldata/notes.txt")
 (setq org-display-custom-times nil)
 (setq org-drawers (quote ("PROPERTIES" "CLOCK" "LOGBOOK" "RESULTS" "SOURCE")))
 (setq org-edit-src-content-indentation 4)
 (setq org-ellipsis (quote org-warning))
 (setq org-enable-fixed-width-editor nil)
 (setq org-enforce-todo-checkbox-dependencies t)
 (setq org-enforce-todo-dependencies t)
 (setq org-extend-today-until 8)
 (setq org-fontify-done-headline t)
 (setq org-fontify-emphasized-text t)
 (setq org-footnote-define-inline t)
 (setq org-footnote-section "Footnotes")
 (setq org-footnote-tag-for-non-org-mode-files "Footnotes:")
 (setq org-hide-block-startup nil)
 (setq org-hide-emphasis-markers t)
 (setq org-hide-leading-stars t)
 (setq org-html-container-element "div")
 (setq org-html-head-include-scripts nil)
 (setq org-html-html5-fancy t)
 (setq org-html-postamble nil)
 (setq org-html-text-markup-alist (quote ((bold . "<strong>%s</strong>") (code . "<blockquote>%s</blockquote>") (italic . "<em>%s</em>") (strike-through . "<del>%s</del>") (underline . "<span class=\"underline\">%s</span>") (verbatim . "<code>%s</code>"))))
 (setq org-indent-mode-turns-off-org-adapt-indentation nil)
 (setq org-indent-mode-turns-on-hiding-stars nil)
 (setq org-insert-mode-line-in-empty-file t)
 ;; (setq org-list-indent-offset 3)
 (setq org-log-done nil)

 (setq org-mac-Skim-highlight-selection-p t)
 (setq org-mac-grab-Firefox+Vimperator-p nil)
 (setq org-mac-grab-Firefox-app-p nil)
 (setq org-mac-grab-Mail-app-p nil)
 (setq org-mac-grab-Safari-app-p nil)
 (setq org-mac-grab-Together-app-p nil)
 (setq org-n-level-faces 9)
 (setq org-odd-levels-only nil)
 (setq org-provide-checkbox-statistics t)
 (setq org-replace-disputed-keys nil)
 (setq org-special-ctrl-a/e t)
 (setq org-src-preserve-indentation t)
 (setq org-startup-align-all-tables t)
 (setq org-startup-indented t)

 (setq org-use-speed-commands t)
 (setq org-yank-adjusted-subtrees t)
 (setq org2blog/wp-confirm-post nil)
 (setq org2blog/wp-default-categories (quote ("inspiration" "personal growth" "miscellany")))
 (setq org2blog/wp-keep-new-lines t)
 (setq org2blog/wp-show-post-in-browser t)
 (setq org2blog/wp-use-tags-as-categories t)
 (setq osx-browse-prefer-background nil)
 (setq osx-browse-prefer-browser "com.google.Chrome")
 (setq osx-browse-prefer-new-window t)
 (setq reb-re-syntax (quote string))
 (setq smex-prompt-string "I love you. ")
 (setq standard-indent 3)
 (setq tooltip-mode nil)
 ;; (setq tramp-default-method "ssh")

 ;; (setq visual-line-mode nil t)


 (setq completion-ignored-extensions (quote (".o" "~" ".bin" ".lbin" ".so" ".a" ".ln" ".blg" ".bbl" ".elc" ".lof" ".glo" ".idx" ".lot" ".svn/" ".hg/" ".git/" ".bzr/" "CVS/" "_darcs/" "_MTN/" ".fmt" ".tfm" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".fasl" ".ufsl" ".fsl" ".dxl" ".pfsl" ".dfsl" ".p64fsl" ".d64fsl" ".dx64fsl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo" ".tex" ".mm" "Icon" ".html" ".zip")))

 (setq message-send-mail-function (quote message-send-mail-with-sendmail))

(setq org-export-latex-image-default-option "width=20.5cm")
 (setq org-export-time-stamp-file nil)
 (setq org-export-with-clocks t) 
 (setq org-html-head-include-default-style nil)
 (setq org-html-toplevel-hlevel 2)
 (setq org-indent-indentation-per-level 2)
 (setq org-list-allow-alphabetical t)
 (setq org-priority-faces nil)
 (setq safe-local-variable-values (quote ((org-export-allow-bind-keywords . t))))
 (setq send-mail-function (quote sendmail-send-it))

#+END_SRC


* The Writing Environment
** spellcheck 
*** Spellcheck add word
#+BEGIN_SRC emacs-lisp
(defun add-word-to-personal-dictionary ()
  (interactive)
  (let ((current-location (point))
        (word (flyspell-get-word)))
    (when (consp word)
      (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))
#+END_SRC

*** Hunspell

#+BEGIN_SRC emacs-lisp
(flyspell-mode)
(setq exec-path (append exec-path '("/usr/local/bin"))) 
(setq-default ispell-program-name (executable-find "hunspell")) 
(setq ispell-really-hunspell t) 
(setq flyspell-default-dictionary "en_US")

(setq ispell-dictionary "en_US")
(setq ispell-program-name "/usr/local/bin/hunspell")
(setenv "DICTIONARY" "en_US") 

(setq ispell-program-name "hunspell")
  (eval-after-load "ispell"
  '(progn (defun ispell-get-coding-system () 'utf-8)))

(setq ispell-local-dictionary-alist '(("en_US" "[[:alpha:][:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8))) 

(setq ispell-extra-args '("-d en_US"))

#+END_SRC


** UI / customization of appearance and editing environment
*** mouse 
**** Stop accidentally highlighting org-mode links all the time:

#+BEGIN_SRC emacs-lisp
(setq mouse-highlight nil)
(setq-local cursor-in-non-selected-windows nil) 

#+END_SRC

*** disable TAB to indent
#+BEGIN_SRC emacs-lisp
(setq org-cycle-emulate-tab nil)
#+END_SRC

*** Windows 
:PROPERTIES:
:ID:       B02E7409-F743-4FCB-A1D7-E0F3B65BBD67
:END:
**** Split windows vertically, i.e. using a vertical line to split
Source: [[http://stackoverflow.com/questions/2081577/setting-emacs-split-to-horizontal][Setting Emacs Split to Horizontal - Stack Overflow]]

#+BEGIN_SRC emacs-lisp
;; (setq org-indirect-buffer-display 'current-window)
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+END_SRC



*** Undo limit
#+BEGIN_SRC emacs-lisp
(setq undo-limit 100000)
#+END_SRC

** quitting emacs 
*** Ask before exiting Emacs

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

*** System alarms

In some cases, you'd like to reduce the number of warnings or eliminate warnings in certain conditions. The following turns off the alarm bell when you hit C-g in the minibuffer or during an isearch:

#+BEGIN_SRC emacs-lisp

(setq ring-bell-function
      (lambda ()
	(unless (memq this-command
		      '(isearch-abort abort-recursive-edit exit-minibuffer keyboard-quit))
	  (ding))))
#+END_SRC

Also, change the alert sound. Instead of beeping or flashing, Emacs could play a cool sound file, whenever an error occurs:
#+BEGIN_SRC emacs-lisp
;; (setq ring-bell-function (lambda () (play-sound-file "~/sounds/InkSoundStroke3.mp3")))

;; turn off alarms completely
(setq ring-bell-function 'ignore)
#+END_SRC


*** Use visual line mode whenever possible

#+BEGIN_SRC emacs-lisp
(add-hook 'mail-mode-hook 'turn-on-visual-line-mode)
(add-hook 'message-mode-hook 'turn-on-visual-line-mode)
(visual-line-mode t)
(global-visual-line-mode t)
#+END_SRC


*** Autofill mode
is this still necessary?

#+BEGIN_SRC emacs-lisp
(auto-fill-mode -1) ; turn off fill mode, which adds random line breaks in my text files:
(add-hook 'text-mode-hook  '(lambda () (auto-fill-mode -1)))
(add-hook 'markdown-mode-hook  '(lambda () (auto-fill-mode -1)))
(add-hook 'message-mode-hook  '(lambda () (auto-fill-mode -1)))
#+END_SRC

*** Sounds

#+BEGIN_SRC emacs-lisp
(unless (and (fboundp 'play-sound-internal)
	     (subrp (symbol-function 'play-sound-internal)))
  (require 'play-sound))


;; (add-hook 'org-after-todo-state-change-hook 'my-org-after-todo)
;; (defun my-org-after-todo () (play-sound-file "~/sounds/InkSoundStroke3.mp3"))
#+END_SRC

*** Disable double spacing between sentences

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

*** Make typing override text selection

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

*** Automatically pair parentheses
#+BEGIN_SRC emacs-lisp

(setq buffer-save-without-query nil)
#+END_SRC

*** Search in Spotlight
#+BEGIN_SRC emacs-lisp
(setq locate-command "mdfind")
#+END_SRC

*** Automatically open files in their correct modes

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (cons '("\\.txt" . org-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.calca" . org-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.tmode" . text-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.msg" . message-mode) auto-mode-alist))
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.abbrev_defs\\'" . org-mode))
(add-to-list 'auto-mode-alist '("README$" . org-mode))
(add-to-list 'auto-mode-alist '("shared-functions$" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("gnu-emacs-startup$" . emacs-lisp-mode))
(add-hook 'emacs-lisp-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'css-mode-hook (lambda () (abbrev-mode -1)))

(add-hook 'html-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'html-helper-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'eshell-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'shell-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'shell-script-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'term-mode-hook (lambda () (abbrev-mode -1)))
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.js\\(on\\)?$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.xml$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.fountain$" . fountain-mode)) 
#+END_SRC

*** Typography
**** TODO Replace smart quotes with straight quotes
Replace smart quotes with straight quotes so that spell check can recognize words with contractions like "don't" and "can't." For when I paste text in that I've copied from the web.
#+BEGIN_SRC emacs-lisp

(setq smart-quote-regexp-replacements
'(
("\\(\\w\\)- " . "\\1")
("\\(\\w\\)\\(  [-—] \\|—\\)" . "\\1---")

))

(defun replace-smart-quotes-regexp (beg end)
  "Replace 'smart quotes' in buffer or region with ascii quotes."
  (interactive "r")
  (mapcar
   (lambda (r)
     (save-excursion
       (replace-regexp (car r) (cdr r) nil beg (min end (point-max)))))
   smart-quote-regexp-replacements)
  )

(defun replace-smart-quotes (beg end)
  "Replace 'smart quotes' in buffer or region with ascii quotes."
  (interactive "r")
;;(while (search-forward-regexp "- " nil to)
;; (replace-match "") nil t)
;; add alpha. And replace the alpha.

  (replace-smart-quotes-regexp beg end)
  (format-replace-strings '(("\x201C" . "\"")
                            ("\x201D" . "\"")
                            ("\x2018" . "'")
                            ("\x2019" . "'")
                            ("’" . "'")
("''" . "\"")
("​" . "")
("…" . "...")
("• " . "- ")
(" " . "")
("  " . " ")

("ó" . "-")
("á" . "-")
("Õ" . "'")
("Õ" . "'")
("Ò" . "\"")
("Ó" . "\"")

("―" . "\"")
("‖" . "\"")

;; ("- " . "") ; also remove stray spac- es
;; ("­ " . "") ; also remove stray spac- es
)
                       nil   beg (min end (point-max)))

)
#+END_SRC

**** Paste and replace quotes
Haven't used this next one:
#+BEGIN_SRC emacs-lisp
(defun paste-and-replace-quotes ()
  "Yank (paste) and replace smart quotes from the source with ascii quotes."
  (interactive)
  (clipboard-yank)
  (replace-smart-quotes (mark) (point)))
#+END_SRC


*** Indentation

Automatically indenting yanked text if in programming-modes:
#+BEGIN_SRC emacs-lisp
(defvar yank-indent-modes
  '(LaTeX-mode TeX-mode)
  "Modes in which to indent regions that are yanked (or yank-popped).
Only modes that don't derive from `prog-mode' should be listed here.")

(defvar yank-indent-blacklisted-modes
  '(python-mode slim-mode haml-mode)
  "Modes for which auto-indenting is suppressed.")

(defvar yank-advised-indent-threshold 1000
  "Threshold (# chars) over which indentation does not automatically occur.")

(defun yank-advised-indent-function (beg end)
  "Do indentation, as long as the region isn't too large."
  (if (<= (- end beg) yank-advised-indent-threshold)
      (indent-region beg end nil)))
#+END_SRC

*** Miscellaneous
;; (setq vc-handled-backends ())
;; (remove-hook 'find-file-hooks 'vc-find-file-hook) 
(setq vc-handled-backends nil) 

*** Color themes

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/emacs/emacs-settings/sublime-themes-jay/")
#+END_SRC

* My custom functions/settings
** Buffers
*** Buffer-stack
I use buffer-stack to navigate between buffers using ⌘-left and ⌘-right:
#+BEGIN_SRC emacs-lisp
;; (require 'buffer-stack)
#+END_SRC

GNU Emacs:
#+BEGIN_SRC emacs-lisp
(global-set-key [(s-right)] 'buffer-stack-down)
(global-set-key [(s-left)] 'buffer-stack-up)
#+END_SRC

Aquamacs:
#+BEGIN_SRC emacs-lisp
(global-set-key [(A-right)] 'buffer-stack-down)
(global-set-key [(A-left)] 'buffer-stack-up)
#+END_SRC

*** Uniqify buffers
#+BEGIN_SRC emacs-lisp
;; meaningful names for buffers with the same name
;; from prelude
;; http://bit.ly/1Woabxz
(use-package uniquify)
(setq uniquify-buffer-name-style 'forward)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t)  ; rename after killing uniquified
(setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers 
#+END_SRC

*** Uniqify new buffers
Open new buffers without prompting me for a filename global counter to ensure every new buffer will be unique:
#+BEGIN_SRC emacs-lisp
(defvar new-buffer-count 0)

(defun new-buffer ()
  (interactive)
  (setq new-buffer-count (+ new-buffer-count 1))
  (switch-to-buffer (concat "buffer" (int-to-string new-buffer-count)))
  (org-mode))
;; (global-set-key (kbd "s-T") 'new-buffer)
;; (define-key key-minor-mode-map "\s-\S-T" 'new-buffer)

(defun new-lisp-buffer ()
  (interactive)
  (setq new-buffer-count (+ new-buffer-count 1))
  (switch-to-buffer (concat "buffer" (int-to-string new-buffer-count)))
  (emacs-lisp-mode))

#+END_SRC

*** new scratch buffer
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; multiple scratch buffers                                               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; uses package "scratch"
(autoload 'scratch "scratch" nil t) 
(global-set-key (kbd "s-T") 'scratch) 

#+END_SRC

*** Create new buffer as org-mode subtree in current file
#+BEGIN_SRC emacs-lisp
(defun org-new-scratch-buffer ()
  (interactive)
  (insert "* oh hi there! " (format-time-string "%F %l:%M%P\n\n"))
;; (org-tree-to-indirect-buffer 'current-window)
(org-narrow-to-subtree)

  )
#+END_SRC

*** Disable autocorrect in minibuffer
#+BEGIN_SRC emacs-lisp
(defun conditionally-disable-abbrev ()
  ""
  (if (string-match "smex-" (format "%s" this-command))
      (abbrev-mode -1)))

(add-hook 'minibuffer-setup-hook 'conditionally-disable-abbrev)
(add-hook 'minibuffer-exit-hook (lambda () (abbrev-mode 1)))
(add-hook 'minibuffer-setup-hook (lambda ()
                                   (abbrev-mode -1)))
#+END_SRC

*** Ignore case when reading buffer and file names
#+BEGIN_SRC emacs-lisp
(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)
#+END_SRC

** Reveal in finder

#+BEGIN_SRC emacs-lisp
;; (require 'reveal-in-finder)
#+END_SRC

** cycle-hyphenation-or-toggle-item

#+BEGIN_SRC emacs-lisp
(defun cycle-hyphenation-or-toggle-item ()
  (interactive)
  (if (region-active-p)
      (call-interactively 'org-toggle-item)
    (cycle-hyphenation)))

#+END_SRC

* org-mode
** org setup
*** Some favorite ~org~ settings:
#+BEGIN_SRC emacs-lisp
  ; (setq org-use-property-inheritance t)
  (setq org-ctrl-k-protect-subtree t)
  (setq org-fontify-quote-and-verse-blocks t)
  ;; blank lines before new headings
  (setq org-blank-before-new-entry
        '((heading . always)
         (plain-list-item . nil)))
  (setq org-return-follows-link t)

  ;; leave an empty line between folded subtrees
  (setq org-cycle-separator-lines 1)

  (setq org-support-shift-select (quote always))

#+END_SRC


*** fontify item checklists

[[https://fuco1.github.io/2017-05-25-Fontify-done-checkbox-items-in-org-mode.html?utm_source=Sacha+Chua+-+Living+an+Awesome+Life&utm_campaign=4942bceb80-RSS_EMAIL_CAMPAIGN&utm_medium=email&utm_term=0_e4be269acf-4942bceb80-97219941][Fontify done checkbox items in org-mode]]

#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords
 'org-mode
 `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-done prepend))
 'append)
#+END_SRC

*** Load my org modules
#+BEGIN_SRC emacs-lisp
(setq org-modules (quote (org-mime )))
#+END_SRC

** org custom functions
*** archiving
(defadvice org-archive-subtree (around my-org-archive-subtree activate)
  (let ((org-archive-location
	 (if (save-excursion (org-back-to-heading)
			     (> (org-outline-level) 1))
	     (concat (car (split-string org-archive-location "::"))
		     "::* "
		     (car (org-get-outline-path)))
	   org-archive-location)))
    ad-do-it))
#+END_SRC
*** org-mode speed commands
#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (
; ("k" . org-kill-note-or-show-branches)
                                      ("q" . bh/show-org-agenda)
                                      ("h" . org-agenda-schedule)
                                      ("d" . org-deadline)
                                      ("w" . org-refile)
                                      ("s" . org-schedule)
                                      ("x" . org-mark-subtree) 
                                      ("z" . org-add-note)
                                      ("m" . (lambda nil (interactive) (org-todo "MISSED")))

                                      ("A" . org-archive-subtree-default-with-confirmation)
                                      ("N" . org-forward-heading-same-level)
                                      ("P" . org-backward-heading-same-level)
                                      ("J" . org-clock-goto)
                                      ("Z" . ignore))))
#+END_SRC

** org-export 

#+BEGIN_SRC emacs-lisp 
(setq org-export-with-smart-quotes t) 
(setq org-export-exclude-tags (quote ("noexport" "extra")))

;; (setq org-html-head "<link rel='stylesheet' type='text/css' href='http://dixit.ca/css/email.css'>")
(setq org-export-time-stamp-file nil)
(setq org-export-with-clocks t)
(setq org-export-with-drawers t)
(setq org-export-with-section-numbers nil)
(setq org-export-with-timestamps (quote active))
(setq org-export-with-toc nil)

 (setq org-export-date-timestamp-format "%Y%m%d %I:%M%p")
 (setq org-export-html-inline-image-extensions (quote ("png" "jpeg" "jpg" "gif" "svg" "tif" "gif")))

;; (setq org-latex-inline-image-rules (quote (("file" . "\\.\\(pdf\\|jpeg\\|gif\\|jpg\\|png\\|ps\\|eps\\|tikz\\|pgf\\|svg\\)\\'"))))

(setq org-latex-inline-image-rules '(("file" . "\\.\\(pdf\\|jpeg\\|jpg\\|png\\|ps\\|eps\\|tikz\\|pgf\\|svg\\|gif\\)\\'")))


;; (setq org-export-html-style-include-default t)
 (setq org-export-latex-date-format "%d %B %Y.")
 (setq org-export-latex-emphasis-alist (quote (("*" "\\textit{%s}" nil) ("/" "\\textit{%s}" nil) ("_" "\\underline{%s}" nil) ("+" "\\st{%s}" nil) ("=" "\\verb" t) ("~" "\\verb" t))))
;; (setq org-export-latex-emphasis-alist (quote (("*" "\\emph{%s}" nil) ("/" "\\textit{%s}" nil) ("_" "\\underline{%s}" nil) ("+" "\\st{%s}" nil) ("=" "\\verb" t) ("~" "\\verb" t))))
;; (setq org-export-latex-verbatim-wrap (quote ("\\begin{quote}" . "\\end{quote}")))
 (setq org-export-with-clocks t)
 (setq org-export-with-drawers t)
 (setq org-export-with-section-numbers nil) 
(setq org-export-with-planning nil)
(setq org-export-allow-bind-keywords t)
;; (setq org-export-blocks-witheld (quote (hidden)) t) 
(setq org-export-date-timestamp-format "%Y%m%d %I:%M%p")
(setq org-export-latex-emphasis-alist (quote    (("*" "\\emph{%s}" nil)
     ("/" "\\textit{%s}" nil)
     ("_" "\\underline{%s}" nil)
     ("+" "\\st{%s}" nil)
     ("=" "\\verb" t)
     ("~" "\\verb" t))))

(setq org-html-footnotes-section
   "<div id=\"footnotes\">
<h2 class=\"footnotes\">%s </h2>
<div id=\"footnote\">
%s
</div>
</div>")

(setq org-html-text-markup-alist (quote    ((bold . "<strong>%s</strong>")
     (code . "<blockquote>%s</blockquote>")
     (italic . "<em>%s</em>")
     (strike-through . "<del>%s</del>")
     (underline . "<span class=\"underline\">%s</span>")
     (verbatim . "<code>%s</code>"))))

(setq org-latex-text-markup-alist (quote    ((bold . "\\textbf{%s}")
     (code . verb)
     (italic . "\\textit{%s}")
     (strike-through . "\\sout{%s}")
     (underline . "\\uline{%s}")
     ;; (verbatim . protectedtext)
     )))

(setq org-latex-toc-command "\\tableofcontents
\\newpage
")

(setq safe-local-variable-values (quote    ((eval when
	   (fboundp
	    (quote rainbow-mode))
	   (rainbow-mode 1)))))

(setq org-html-footnotes-section "<div id=\"footnotes\">
<h2 class=\"footnotes\">%s </h2>
<div id=\"footnote\">
%s
</div>
</div>") 

(setq org-html-head-include-default-style nil)
(setq org-html-head-include-scripts nil)
(setq org-html-html5-fancy t)
(setq org-html-doctype "html5")
(setq org-html-metadata-timestamp-format "%m-%d %a %H:%M")
(setq org-html-postamble nil)
(setq org-html-text-markup-alist
   (quote
    ((bold . "<strong>%s</strong>")
     (code . "<blockquote>%s</blockquote>")
     (italic . "<em>%s</em>")
     (strike-through . "<del>%s</del>")
     (underline . "<span class=\"underline\">%s</span>")
     (verbatim . "<code>%s</code>"))))
(setq org-html-toplevel-hlevel 2)


   #+END_SRC 


** latex images 
#+BEGIN_SRC emacs-lisp

  (setq org-latex-image-default-width "370pt");; new value just for book export
;; (setq org-latex-image-default-width "180pt") good value, works for QIAGEN for example 
(setq   org-export-allow-bind-keywords t) 
#+END_SRC 

** Highlight latex text in org mode
Ben Maughan
Here is a tiny tweak for org-mode. So that inline latex like $y=mx+c$ will appear in a different colour in an org-mode file to help it stand out.

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex))
#+END_SRC

** org-html-export-to-html-and-open
I don't think there's a direct function for this, but you could achieve what you want using `org-export-to-file`, the last argument of which is a "post-processing" step:

 (org-export-to-file BACKEND FILE &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST POST-PROCESS)

The post-processing step is handed the path to your new file; you could use something as straight-forward as `find-file`:

#+BEGIN_SRC emacs-lisp
  (defun org-html-export-to-html-and-open
   (&optional async subtreep visible-only body-only ext-plist)
   (interactive)
   (let ((outfile (org-export-output-file-name ".html" subtreep)))
    (org-export-to-file 'html outfile async subtreep visible-only body-only ext-plist #'find-file)))
#+END_SRC

*** Change section numbering depending on what export format I use

Turn this on if I'm creating documents that I want to export to both HTML and LaTeX. For now I'm turning it off.

Note: disable this when trying to export to org-html-themes!

#+BEGIN_SRC emacs-lisp
(defun my-org-export-change-options (plist backend)
  (cond
   ((equal backend 'html)
    (plist-put plist :with-toc nil)
    (plist-put plist :section-numbers nil))
   ((equal backend 'latex)
(plist-put plist :with-toc t); for TOC in latex
;; (plist-put plist :with-toc nil); no TOC in latex
    (plist-put plist :section-numbers t)))
  plist)
(add-to-list 'org-export-filter-options-functions 'my-org-export-change-options)
#+END_SRC

*** export with drawers
#+BEGIN_SRC emacs-lisp
(setq org-export-with-drawers t)
(defun jbd-org-export-format-drawer (name content)
  "Export drawers to drawer HTML class."
  (setq content (org-remove-indentation content))
  (format "@<div class=\"drawer\">%s@</div>\n" content))
(setq org-export-format-drawer-function 'jbd-org-export-format-drawer)

#+END_SRC 

*** ignore secret headlines tagged with "ignore"
:PROPERTIES:
:ID:       EA8DFF1F-F89F-4B5E-AC56-28EED76EE68C
:END:
#+BEGIN_SRC emacs-lisp
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines)) 
#+END_SRC

Works!

*** correct org-mode export
:PROPERTIES:
:ID:       08203F72-2C72-4E41-816A-D26984A8862B
:END:
#+BEGIN_SRC emacs-lisp
(defun org-repair-export-blocks ()
 "Repair export blocks and INCLUDE keywords in current buffer."
 (interactive)
 (when (eq major-mode 'org-mode)
  (let ((case-fold-search t)
     (back-end-re (regexp-opt
            '("HTML" "ASCII" "LATEX" "ODT" "MARKDOWN" "MD" "ORG"
             "MAN" "BEAMER" "TEXINFO" "GROFF" "KOMA-LETTER")
            t)))
   (org-with-wide-buffer
    (goto-char (point-min))
    (let ((block-re (concat "^[ \t]*#\\+BEGIN_" back-end-re)))
     (save-excursion
      (while (re-search-forward block-re nil t)
       (let ((element (save-match-data (org-element-at-point))))
        (when (eq (org-element-type element) 'special-block)
         (save-excursion
          (goto-char (org-element-property :end element))
          (save-match-data (search-backward "_"))
          (forward-char)
          (insert "EXPORT")
          (delete-region (point) (line-end-position)))
         (replace-match "EXPORT \\1" nil nil nil 1))))))
    (let ((include-re
       (format "^[ \t]*#\\+INCLUDE: .*?%s[ \t]*$" back-end-re)))
     (while (re-search-forward include-re nil t)
      (let ((element (save-match-data (org-element-at-point))))
       (when (and (eq (org-element-type element) 'keyword)
            (string= (org-element-property :key element) "INCLUDE"))
        (replace-match "EXPORT \\1" nil nil nil 1))))))))) 
#+END_SRC

** org-mode key bindings:
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
#+END_SRC

** org agenda 
*** agenda display settings

    #+BEGIN_SRC emacs-lisp
(setq org-agenda-prefix-format
   (quote
    ((agenda . " %?-12t% s")
     (timeline . "  % s")
     (todo . " %i %-12:c")
     (tags . " %i %-12:c")
     (search . " %i %-12:c"))))

;; (setq org-agenda-prefix-format "%t %s")
    #+END_SRC 

*** Stop mouse cursor from highlighting lines in org-agenda
#+BEGIN_SRC emacs-lisp
(add-hook 'org-finalize-agenda-hook
(lambda () (remove-text-properties
(point-min) (point-max) '(mouse-face t))))
#+END_SRC

** org stuck projects (?)
Defining stuck projects as todos that do not contain "scheduled" or
"deadline". See also [[http://www.gnu.org/software/emacs/manual/html_node/org/Stuck-projects.html][here]].
#+BEGIN_SRC emacs-lisp
;; (setq org-stuck-projects      '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
#+END_SRC

** org settings
#+BEGIN_SRC emacs-lisp
;; (add-hook 'after-init-hook 'org-agenda-list)
(use-package org-inlinetask)
;; Overwrite the current window with the agenda
;; (setq org-agenda-window-setup 'current-window)

;; Delete IDs When Cloning
(setq org-clone-delete-id t)

;; start org in folded mode
(setq org-startup-folded nil)

;; allow alphabetical list entries, i.e. "a. this b. that c. another"
(setq org-alphabetical-lists t)

;; fast TODO selection
(setq org-use-fast-todo-selection t)

;; more org settings
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-src-fontify-natively t)

;; (add-to-list 'load-path (expand-file-name "~/git/org-mode/lisp"))
#+END_SRC

*** Activate org-mode automatically

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\|txt_archive\\)$" . org-mode))
#+END_SRC

** org todo keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '(
(sequence "TODO" "STARTED" "|" "DONE")
        (sequence "MISSED" "|" "DONE")
        (sequence "|" "CANCELED" )
        (sequence "COMMITTED" "RESULTS" "|")
(sequence "WAITING" "DAILIES" "WEEKLIES" "MONTHLIES" "QUARTERLIES" "YEARLIES" "GOALS" "SOMEDAY" "|")
        (sequence "QUESTION" "|" "ANSWERED")
        (sequence "QUESTIONS" "|" "ANSWERS")
        (sequence "STRATEGY" "|")
        (sequence "TIP" "|")
        (sequence "NOTES" "RESEARCH" "POINT" "NARRATIVE" "ANECDOTE" "WRITING" "|")
        (sequence "PART" "HED" "HEDTK" "|")
        (sequence "IF" "THEN" "|")
        (sequence "COWRITE" "|" "DONE")
        (sequence "GOAL" "PLAN" "NOTE" "|" "DONE")
(sequence "Practice:" "Demo:" "Debrief:" "Breakout:" "Critique:" "Workshop:" "|" "Lecture")
        ))
#+END_SRC

** org priorities
Make it so that the command =org-priority-up= goes straight to #A
#+BEGIN_SRC emacs-lisp
(setq org-priority-start-cycle-with-default nil) 
#+END_SRC

** Protect org headings from accidental demotion
Don't delete headings unless I specifically say so. So i.e. when I hit delete, don't delete stars, only content.
#+BEGIN_SRC emacs-lisp
(defun new-org-delete-backward-char (N)
  (interactive "p")
  (cond ((region-active-p)
         (delete-region
          (region-beginning)
          (region-end)))
        ((looking-back "^\\*+[ ]*") ;; one or more stars
         (previous-line)
         (end-of-line))

;; this is to "don't delete the hyphen markers for plain-text lists"
;; I didn't like it so I turned it off 
; (
; (looking-back "^[ ]*- ") 
; (previous-line)
; (end-of-line)) 
(t 
(org-delete-backward-char N)
)))

(add-hook
 'org-mode-hook
 (lambda ()
   (define-key org-mode-map (kbd "DEL")
     'new-org-delete-backward-char)))
#+END_SRC

** imenu-list
#+BEGIN_SRC emacs-lisp
(require 'imenu-list)
(setq imenu-list-position (quote left))

(defun imenu-list-amazing-mode ()
(interactive)
(add-hook 'org-mode-hook (lambda () (imenu-list-minor-mode 1)))
)

#+END_SRC

Edit: in response to your comment, here's a simple command that, when invoked from the buffer clone, will switch to the base buffer and move point to wherever the cursor was in the buffer clone:

#+BEGIN_EXAMPLE emacs-lisp
(defun jump-to-point-and-show ()
 "Switch to a cloned buffer's base buffer and move point to the
cursor position in the clone."
 (interactive)
 (let ((buf (buffer-base-buffer)))
  (unless buf
   (error "You need to be in a cloned buffer!"))
  (let ((pos (point))
     (win (car (get-buffer-window-list buf))))
   (if win
     (select-window win)
    (other-window 1)
    (switch-to-buffer buf))
   (goto-char pos)
   (when (invisible-p (point))
    (show-branches))))) 
#+END_EXAMPLE 

** Org-mode hooks and other org settings
#+BEGIN_SRC emacs-lisp
'(initial-major-mode (quote org-mode))
'(org-replace-disputed-keys t)
'(org-use-extra-keys nil)
'(org-adapt-indentation nil)
'(org-edit-src-content-indentation 4)
'(org-ellipsis (quote org-warning))
'(org-enforce-todo-checkbox-dependencies t)
'(org-enforce-todo-dependencies t)
'(org-html-postamble nil)
'(org-fontify-emphasized-text t)
'(org-src-preserve-indentation t)
'(org-startup-align-all-tables t)
'(org-startup-folded showeverything)
'(org-startup-indented nil)

'(org-indent-mode-turns-off-org-adapt-indentation nil)
'(org-indent-mode-turns-on-hiding-stars nil)
'(org-insert-mode-line-in-empty-file t)
'(org-list-indent-offset 3)
'(org-log-done (quote time))
'(org-n-level-faces 9)
'(org-odd-levels-only nil)
'(org-indent-mode 1)
'(org-priority-faces nil)
'(org-provide-checkbox-statistics t)
(setq org-directory "~/Dropbox/writing/notationaldata/")
(setq org-default-notes-file (concat org-directory "notes.txt"))
#+END_SRC

** Org refile settings
*** Exclude ~DONE~ state tasks from refile targets:
#+BEGIN_EXAMPLE emacs-lisp
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_EXAMPLE

** org-capture setup

This is working correctly:

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      (quote
       (

	("g" "gratitude" entry (file "gratitude.txt")
	 "\n\n\n\n* %U\n\n1. %?\n\n" :prepend t :kill-buffer t)

	("L" "Later" checkitem (file+headline "fearless.org" "Later") "\n\n [ ] %?\n\n" :prepend t :kill-buffer t)

	("l" "learnings" entry (file "learnings.org" :prepend t :kill-buffer t)
	 "\n\n* %i%?\n\nEntered on %U %i\n\n" :prepend t :kill-buffer t)

	("n" "note" entry (file org-default-notes-file)
	 "* %? :NOTE:\n%U\n%a\n  %i" :prepend t :kill-buffer t :clock-in t :clock-resume t)

("b" "book" entry (file "~/Dropbox/writing/book/book-capture.txt")
	 "\n\n\n\n* %U\n\n%?\n\n\n" :prepend t :kill-buffer t)


	("v" "visualness and visual actions" entry (file "visual-actions.txt")
	 "\n\n\n\n*  %? %i\n \n" :prepend t :kill-buffer t)

("i" "article ideas" entry (file "article-ideas.txt")
	 "\n\n\n\n* %? %i\n \n" :prepend t :kill-buffer t)

("a" "alexander technique" entry (file "alexander-technique-belinda.txt")
"\n\n* %U\n %i\n %?\nEntered on %U %i\n" :prepend t :kill-buffer t)

("e" "expression" entry (file "expression.txt")
	 "\n\n* %U\n  %i\n %?\n" :prepend t :kill-buffer t)

("W" "Wise Mind" entry (file "wisemind.txt")
	 "\n\n* wm%?\n" :prepend t :kill-buffer t)

	("e" "expression" entry (file "expression.txt")
	 "\n\n* %U\n  %i\n %?\n" :prepend t :kill-buffer t)

("k" "nika" entry (file "nika-capture.txt")
	 "\n\n* %U\n %i\n %?\n" :prepend t :kill-buffer t)

	("h" "historical interest" entry (file "historical-lifestream.txt")
	 "\n\n* %U\n  %i\n %?\n" :prepend t :kill-buffer t)

	("P" "pages" entry (file "~/Dropbox/writing/notationaldata/pages.txt")
	 "\n\n\n\n* %U\n\n%?\n\n\n" :prepend t :kill-buffer t)

	("s" "storytelling and writing" entry (file "/Users/jay/Dropbox/writing/writing-teacher/writing-teacher-stuff/teaching-writing-and-storytelling.txt")
	 "\n\n\n\n* %U\n\n%?" :prepend t :kill-buffer t)

	("F" "Funny" entry (file "~/Dropbox/writing/notationaldata/funny.txt")
	 "\n\n\n\n* %U\n\n%?\n" :prepend t :kill-buffer t)

	("V" "Vegas journal" entry (file "vegas-journal-capture.txt")
	 "\n\n\n\n* %U\n\n%?\n\n\n" :prepend t :kill-buffer t)


	("t" "Taper" entry (file "taper.txt")
	 "\n\n\n\n* %U\n\n%?\n\nEntered on %U %i\n\n" :prepend t :kill-buffer t)

("M" "Memorize" entry
               (file+headline (concat org-directory "org-drill-jays-decks.org")
                              "Vocabulary")
               "* Word :drill:\n%^ \n** Answer \n%^")

;; source: http://stackoverflow.com/questions/14666625/combine-org-mode-capture-and-drill-modules-to-learn-vocabulary
;; http://lists.gnu.org/archive/html/emacs-orgmode/2010-09/msg00924.html

	("f" "flowy" entry (file "flowy.org")
	 "\n\n*  %i\n %?\n" :prepend t :kill-buffer t))))
#+END_SRC

** another org-setting, not sure what this one does exactly
#+BEGIN_SRC emacs-lisp
(defun org-ido-completing-read (&rest args)
  "Completing-read using `ido-mode' speedups if available"
  (if (and ido-mode (listp (second args)))
      (apply 'ido-completing-read args)
    (apply 'completing-read args)))
#+END_SRC

** org custom functions
*** zin/org-outline-mode
Make ~org-mode~ temporarily emulate traditional outlining keybindings
e.g. nvALT
#+BEGIN_SRC emacs-lisp
(define-minor-mode zin/org-outline-mode
  "" nil
  :lighter " OOut"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "<return>") 'smart-org-meta-return-dwim)
            (define-key map (kbd "<tab>") 'org-metaright)
            (define-key map (kbd "S-<tab>") 'org-metaleft)
            (define-key map (kbd "<M-return>") 'smart-return)
            map))
(global-set-key "\C-co" 'zin/org-outline-mode)
#+END_SRC

*** Workflowy mode

#+BEGIN_SRC emacs-lisp
(defun workflowy-mode ()
  "workflowy"
  (interactive)
  (setq org-bullets-bullet-list (quote ("• ")))
  (zin/org-outline-mode)
(org-bullets-mode)
(define-key key-minor-mode-map (kbd ",") 'insert-comma) 
  (incarnadine-cursor)
  (define-key org-mode-map (kbd "DEL")
    'new-org-delete-backward-char)
  (define-key key-minor-mode-map (kbd "DEL")  'new-org-delete-backward-char)
  (insert "\n* "))

#+END_SRC

*** update parent cookie
I think this is to make parent ~DONE~ states automatically update:
#+BEGIN_SRC emacs-lisp
(defun myorg-update-parent-cookie ()
  (when (equal major-mode 'org-mode)
    (save-excursion
      (ignore-errors
	(org-back-to-heading)
	(org-update-parent-todo-statistics)))))

(defadvice org-kill-line (after fix-cookies activate)
  (myorg-update-parent-cookie))

(defadvice kill-whole-line (after fix-cookies activate)
  (myorg-update-parent-cookie))
#+END_SRC

*** checkbox-list-complete

Mark heading done when all checkboxes are checked. See [[http://thread.gmane.org/gmane.emacs.orgmode/42715][here]]. An item consists of a list with checkboxes. When all of the checkboxes are checked, the item should be considered complete and its ~TODO~ state should be automatically changed to ~DONE~. The code below does that. This version is slightly enhanced over the one in the mailing list (see [[http://thread.gmane.org/gmane.emacs.orgmode/42715/focus=42721][here]]) to reset the state back to TODO if a checkbox is unchecked. Note that the code requires that a checkbox statistics cookie (the [/] or [%] thingie in the headline - see the Checkboxes section in the manual) be present in order for it to work. Note also that it is too dumb to figure out whether the item has a ~TODO~ state in the first place: if there is a statistics cookie, a ~TODO~ / ~DONE~ state will be added willy-nilly any time that the statistics cookie is changed.

#+BEGIN_EXAMPLE emacs-lisp
(eval-after-load 'org-list
  '(add-hook 'org-checkbox-statistics-hook (function ndk/checkbox-list-complete)))

(defun ndk/checkbox-list-complete ()
  (save-excursion
    (org-back-to-heading t)
    (let ((beg (point)) end)
      (end-of-line)
      (setq end (point))
      (goto-char beg)
      (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
          (if (match-end 1)
              (if (equal (match-string 1) "100%")
                  ;; all done - do the state change
                  (org-todo 'done)
                (org-todo 'todo))
            (if (and (> (match-end 2) (match-beginning 2))
                     (equal (match-string 2) (match-string 3)))
                (org-todo 'done)
              (org-todo 'todo)))))))
#+END_EXAMPLE 

*** org align tables

#+BEGIN_SRC emacs-lisp
(defun my-align-all-tables ()
  (interactive)
  (org-table-map-tables 'org-table-align 'quietly))
#+END_SRC

*** org extract link

#+BEGIN_SRC emacs-lisp
(defun my-org-extract-link ()
  "Extract the link location at point and put it on the killring."
  (interactive)
  (when (org-in-regexp org-bracket-link-regexp 1)
    (kill-new (org-link-unescape (org-match-string-no-properties 1)))))
#+END_SRC

*** org insert link

Insert link with HTML title as default description. When using `org-insert-link'
(`C-c C-l') it might be useful to extract contents from HTML <title> tag and use
it as a default link description. Here is a way to accomplish this:

#+BEGIN_SRC emacs-lisp
(use-package mm-url) ; to include mm-url-decode-entities-string

(defun my-org-insert-link ()
  "Insert org link where default description is set to html title."
  (interactive)
  (let* ((url (read-string "URL: "))
         (title (get-html-title-from-url url)))
    (org-insert-link nil url title)))

(defun get-html-title-from-url (url)
  "Return content in <title> tag."
  (let (x1 x2 (download-buffer (url-retrieve-synchronously url)))
    (save-excursion
      (set-buffer download-buffer)
      (beginning-of-buffer)
      (setq x1 (search-forward "<title>"))
      (search-forward "</title>")
      (setq x2 (search-backward "<"))
      (mm-url-decode-entities-string (buffer-substring-no-properties x1 x2)))))
#+END_SRC

*** org insert subtask

#+BEGIN_SRC emacs-lisp
(defun my-org-insert-sub-task ()
  (interactive)
  (let ((parent-deadline (org-get-deadline-time nil)))
    (org-goto-sibling)
    (org-insert-todo-subheading t)
    (when parent-deadline
      (org-deadline nil parent-deadline))))
#+END_SRC

*** reschedule agenda items to today with a single command

#+BEGIN_SRC emacs-lisp
(defun org-agenda-reschedule-to-today ()
  (interactive)
  (cl-flet ((org-read-date (&rest rest) (current-time)))
	   (call-interactively 'org-agenda-schedule)))
#+END_SRC

*** org archive done

Source: [[http://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command][link]]
#+BEGIN_SRC emacs-lisp
(defun my-org-archive-done-tasks ()
  (interactive)
  (org-map-entries 'org-archive-subtree "/DONE" 'file))
#+END_SRC

** org capture
Make org-capture open in full window! :-)
#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'turn-on-auto-capitalize-mode 'append)
(add-hook 'org-capture-mode-hook 'delete-other-windows)
(add-hook 'org-capture-mode-hook 'writeroom-mode)
;; (add-hook 'org-capture-mode-hook '(setq olivetti-body-width 80)); doesn't work 
#+END_SRC 

** org-levels 
   #+BEGIN_SRC emacs-lisp
 (defun org-show-level-1 () 
  (interactive) 
 (org-content 1)) 

 (defun org-show-level-2 () 
  (interactive) 
 (org-content 2)) 

 (defun org-show-level-3 () 
  (interactive) 
 (org-content 3)) 

 (defun org-show-level-4 () 
  (interactive) 
 (org-content 4)) 

 (defun org-show-level-5 () 
  (interactive) 
 (org-content 5)) 

 (defun org-show-level-6 () 
  (interactive) 
 (org-content 6)) 

 (defun org-show-level-7 () 
  (interactive) 
 (org-content 7)) 

 (defun org-show-level-8 () 
  (interactive) 
 (org-content 8)) 

 (define-key key-minor-mode-map (kbd "C-s-1") 'org-show-level-1) 

 (define-key key-minor-mode-map (kbd "C-s-2") 'org-show-level-2) 

 (define-key key-minor-mode-map (kbd "C-s-3") 'org-show-level-3) 

 (define-key key-minor-mode-map (kbd "C-s-4") 'org-show-level-4) 

 (define-key key-minor-mode-map (kbd "C-s-5") 'org-show-level-5) 

 (define-key key-minor-mode-map (kbd "C-s-6") 'org-show-level-6) 

 (define-key key-minor-mode-map (kbd "C-s-7") 'org-show-level-7) 

 (define-key key-minor-mode-map (kbd "C-s-8") 'org-show-level-8) 
 
(define-key key-minor-mode-map (kbd "C-s-0") 'show-all)
(define-key key-minor-mode-map (kbd "C-s-a") 'show-all)


   #+END_SRC


** org-mode inline tasks
#+BEGIN_SRC emacs-lisp
(define-key key-minor-mode-map (kbd "<M-s-return>") 'org-inlinetask-insert-task) 
#+END_SRC

** no autorevert
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode -1)
#+END_SRC

** org-mode hooks 
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell) 
(add-hook 'org-mode-hook (lambda () (flyspell-lazy-mode 1))) 
;; (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
;; (add-hook 'org-mode-hook '(lambda () (auto-fill-mode -1)))
(add-hook 'org-mode-hook 'turn-on-auto-capitalize-mode)
#+END_SRC

*** globally enable palimpsest-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hook (lambda () (palimpsest-mode 1)))
#+END_SRC

* org-mode other packages

** org-pomodoro
#+BEGIN_SRC emacs-lisp
;; (setq org-pomodoro-format "Pomodoro: %s")
;; (setq org-pomodoro-killed-sound "~/sounds/autodestructsequencearmed_ep.mp3")
(setq org-pomodoro-length 25)
(setq org-pomodoro-short-break-length 5) 
(setq org-pomodoro-long-break-length 30) 
(setq org-pomodoro-long-break-sound "/Users/jay/Dropbox/audio/sounds/InkSoundStroke3.mp3")
 (setq org-pomodoro-play-ticking-sounds nil)
;; (setq org-pomodoro-short-break-format "Short Break: %s")
(setq org-pomodoro-short-break-sound "/Users/jay/Dropbox/audio/sounds/Metal_Gong-Dianakc-109711828.mp3")

;; (setq org-pomodoro-finished-sound "/Users/jay/Dropbox/audio/sounds/InkSoundStroke3.mp3")

(setq org-pomodoro-finished-sound "/Users/jay/Dropbox/audio/sounds/Horse-Gallop.mp3")

;; (setq org-pomodoro-ticking-sound "~/Music/iTunes/iTunes Media/Music/Unknown Artist/Unknown Album/com.taptanium.thunderstorm.DreamQuest_preview.m4a") 



;; (add-hook 'org-pomodoro-started-hook #'(lambda () (adobe-garamond-pro)))
;; (add-hook 'org-pomodoro-finished-hook #'(lambda () (monaco-font)))
;; (add-hook 'org-pomodoro-started-hook #'(lambda () (org-todo 'done)))
;; (add-hook 'org-pomodoro-short-break-finished-hook 'previous-line)
;; (add-hook 'org-pomodoro-long-break-finished-hook 'previous-line)

(defun pomodoro-start-jay ()
  (interactive)
(org-todo 'done) 
(previous-line)
(condition-case nil
 (kill-buffer "fearless.org")
 (error nil))
(org-pomodoro)

)

#+END_SRC

** org-mac-link
#+BEGIN_SRC emacs-lisp
(require 'org-mac-link) 
#+END_SRC

** ~org-mime~

#+BEGIN_SRC emacs-lisp
;; (require 'org-mime)
(setq org-mime-default-header "")

;; put a div tag around the whole message to put it in Sans-Serif font.

(add-hook 'org-mime-html-hook
          (lambda ()
            (goto-char (point-min))
            (insert "<div style=\"font-family:Sans-Serif\">")
            (goto-char (point-max))
            (insert "<font face='georgia, serif'>
<br>
<br>
--<br>
<a href='http://jaydixit.com/' style='text-decoration:none; color:#000;' target='_blank'>Jay Dixit</a><br>
<a href='http://jaydixit.com/' style='text-decoration:none;' target='_blank'>
  jaydixit.com</a>
<br>
<span style='text-decoration:none;'><a href='http://storytelling.nyc/' style='text-decoration:none;' target='_blank'>storytelling.nyc</a><br></span>
<span style='text-decoration:none;'><a href='http://jaydixit.com/' style='text-decoration:none; color:#000;' target='_blank'>(646) 355-8001</a><br></span>
<a href='http://storytelling.nyc/' style='text-decoration:none;' target='_blank'>
<img src='http://incandescentman.github.io/assets/images/storytelling-nyc-logo-final.png' alt='Storytelling NYC' height='55'>
</a>
<a href='https://www.facebook.com/newyorkwriters/' style='text-decoration:none;' target='_blank'>
<img src='http://incandescentman.github.io/assets/images/facebook-512.png' height=16 width=16 alt='New York Writers on Facebook'>
</a>
<a href='https://twitter.com/jaydixit' style='text-decoration:none;' target='_blank'>
<img src='http://incandescentman.github.io/assets/images/twitter-512.png' height=16 width=16 alt='New York Writers on Twitter'>
</a>
<br>
<p style='color:#FFF;' target='_blank'>Jay Dixit</p>
</font>
</div>")))

(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "p" "font-family:Sans-Serif; margin-bottom: 1em;")))

(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "a" "font-family:Sans-Serif; margin-bottom: 1em;")))

(add-hook 'org-mime-html-hook
     (lambda ()
      (org-mime-change-element-style
       "ul.org-ul li a" "line-height: 1.5;")))





(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-class-style 
"example" "
	background:rgba(255,0,0,0.05);
	border:1px solid rgba(255,0,0,0.2);
	border-radius:8px;
	color:#3f3f3f;
  font-family:Garamond, serif;
	line-height:1.2;
  padding: 1em 1em 1em 1em;
margin-bottom: 1em;
margin-left:2em;
	text-align:left;
	text-shadow:rgba(0,0,0,0.2) 0 2px 5px;
	white-space:0;
  width:60%;
  word-wrap:normal!important;")))


(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "li" "font-family:Sans-Serif")))

(add-hook 'org-mime-html-hook
     (lambda ()
      (org-mime-change-element-style
       "strong" "font-family:Sans-Serif;color:#00ADEF;")))


(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "h2" "color:#C92228;
    font-family:Sans-Serif;
    -webkit-transition:all .5s linear;
    border-bottom:2px dotted #CCC;
text-transform:capitalize; font-weight:bold;"))) 

(add-hook 'message-mode-hook
          (lambda ()
;;;            (local-set-key "\C-c\M-o" 'org-mime-htmlize)))
(local-set-key "\M-p" 'org-mime-htmlize)))

#+END_SRC


*** org-mime blockquote hacker style
#+BEGIN_SRC emacs-lisp


(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "pre" "color: #777;
    quotes: none;
    border-radius: 15px;
    font-weight: 400;
    color: #87ceeb;
    line-height: 1.3em;
width:80%;
    background: none repeat scroll 0% 0% rgb(61, 61, 61);
    padding: 20px;
quotes: '«' '»';
font-family: Courier, 'Courier New', monospace;
    font-weight: 400 !important;")))
#+END_SRC

*** org-mime blockquote literary style
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "blockquote" "
	background:rgba(255,0,0,0.05);
	border:1px solid rgba(255,0,0,0.2);
	border-radius:8px;
	color:#3f3f3f;
  font-family:Garamond, serif;
	line-height:1.2;
  padding: 1em 1em 1em 1em;
margin-bottom: 1em;
	text-align:left;
	text-shadow:rgba(0,0,0,0.2) 0 2px 5px;
	white-space:0;
  width:60%;
  word-wrap:normal!important;")))
#+END_SRC

** org-download 
  #+BEGIN_SRC emacs-lisp
(use-package org-download)
(setq-default org-download-image-dir "/Users/jay/Downloads")
(setq org-download-method (quote directory))
  #+END_SRC

* Browsing
** Make URLs in comments/strings clickable

#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hooks 'goto-address-prog-mode)
#+END_SRC

** Set the default browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
#+END_SRC

** Edit with Emacs

To enable Edit with Emacs in Chrome:
#+BEGIN_SRC emacs-lisp
;; (require 'edit-server)
;; (edit-server-start)
#+END_SRC

* Miscellaneous/unsorted settings

#+BEGIN_SRC emacs-lisp
'(cua-enable-cua-keys (quote shift))
'(cua-highlight-region-shift-only t)
'(cua-mode nil nil (cua-base))
'(send-mail-function (quote sendmail-send-it))
'(shift-select-mode nil)
'(transient-mark-mode t)

'(global-flyspell-mode t)
'(message-send-mail-function (quote message-send-mail-with-sendmail))
'(mail-send-mail-function (quote message-send-mail-with-sendmail))
'(setq mail-user-agent 'message-user-agent)
'(global-set-key [(A-W)]  'buffer-stack-bury-and-kill)
'(ns-right-command-modifier (quote meta))
'(ns-tool-bar-display-mode (quote both) t)
'(ns-tool-bar-size-mode nil t)
;; '(standard-indent 3)
'(ns-function-modifier (quote meta))
(transient-mark-mode t)
(tooltip-mode -1)
(setq ns-function-modifier 'hyper)
;; open files in an existing frame instead of a new frame
(setq ns-pop-up-frames nil)
#+END_SRC

** Open everything in its right mode; use ~org-mode~ whenever possible

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (cons '("\\.md" . org-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.abbrev_defs" . emacs-lisp-mode) auto-mode-alist))
;; is this the best mode for editing HTML?
(setq auto-mode-alist (cons '("\\.html" . web-mode) auto-mode-alist))
#+END_SRC

** Enable highlighting of text similar to standard word processors

#+BEGIN_SRC emacs-lisp
'(org-support-shift-select (quote always))
#+END_SRC

** message-mode hooks

#+BEGIN_SRC emacs-lisp
(use-package auto-capitalize)
(add-hook 'message-mode-hook 'turn-on-auto-capitalize-mode) 
#+END_SRC

** Define my default directory:

#+BEGIN_SRC emacs-lisp
(setq default-directory "~/Dropbox/writing/" )
#+END_SRC

* Backups
Sources: [[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][How do I control how Emacs makes backup files? - Stack Overflow]]

** Make backups:
#+BEGIN_SRC emacs-lisp
;; Default and per-save backups go here:
(setq backup-directory-alist '(("" . "~/emacs/backup/per-save")))

(setq make-backup-files t        ; backup of a file the first time it is saved.
   backup-by-copying t        ; don't clobber symlinks
   version-control t         ; version numbers for backup files
   delete-old-versions t       ; delete excess backup files silently
   delete-by-moving-to-trash t
   kept-old-versions 6        ; oldest versions to keep when a new numbered backup is made (default: 2)
   kept-new-versions 9        ; newest versions to keep when a new numbered backup is made (default: 2)
   auto-save-default t        ; auto-save every buffer that visits a file
   auto-save-timeout 20       ; number of seconds idle time before auto-save (default: 30)
   auto-save-interval 200      ; number of keystrokes between auto-saves (default: 300) 
vc-make-backup-files t ; Make backups of files, even when they're in version control 
   ) 
#+END_SRC

** backing up on every save and backing up versioned files. 
#+BEGIN_SRC emacs-lisp

(defun force-backup-of-buffer ()
 ;; Make a special "per session" backup at the first save of each
 ;; emacs session.
 (when (not buffer-backed-up)
  ;; Override the default parameters for per-session backups.
  (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
     (kept-new-versions 3))
   (backup-buffer)))
 ;; Make a "per save" backup on each save. The first save results in
 ;; both a per-session and a per-save backup, to keep the numbering
 ;; of per-save backups consistent.
 (let ((buffer-backed-up nil))
  (backup-buffer)))

(add-hook 'before-save-hook 'force-backup-of-buffer) 

#+END_SRC 

* message mode

** Report problems with the SMTP server

#+BEGIN_SRC emacs-lisp
(setq smtpmail-debug-info t)
#+END_SRC

** Add Cc and Bcc headers to the message buffer

#+BEGIN_SRC emacs-lisp
;; (setq message-default-mail-headers "Cc: \nBcc: \n")
(setq mail-user-agent 'message-user-agent)
(setq auto-mode-alist (cons '("\\.email" . message-mode) auto-mode-alist))
#+END_SRC

** Wrapper for ~message-mail~ that prompts for the 'to' and 'subject' lines

#+BEGIN_SRC emacs-lisp
(defun mail-region (b e to subject)
  "Send the current region in an email"
  (interactive "r\nsRecipient: \nsSubject: ")
  (let ((orig-buffer (current-buffer)))
    (message-mail to subject)
    (message-goto-body)
    (insert (save-excursion (set-buffer orig-buffer)
			    (buffer-substring-no-properties b e)))
    (message-send-and-exit)))
#+END_SRC

** Forgot what this is

#+BEGIN_SRC emacs-lisp
(add-to-list 'completion-styles 'initials t)
#+END_SRC

** orgstruct mode
#+BEGIN_SRC emacs-lisp
;; orgstruct++-mode is enabled in Gnus message buffers to aid in creating structured email messages.
(add-hook 'message-mode-hook 'orgstruct-mode 'append)
; (add-hook 'message-mode-hook 'bbdb-define-all-aliases 'append)
(add-hook 'message-mode-hook 'turn-on-flyspell 'append)
#+END_SRC

** Remember recent email addresses 
#+BEGIN_SRC emacs-lisp
;; (setq recent-addresses-file "~/emacs/prelude/recent-addresses")
;; (add-to-list 'load-path "~/gnulisp/recent-addresses-0.1/")
;; (require 'recent-addresses)
;; (recent-addresses-mode 1)
;; (add-hook 'message-setup-hook 'recent-addresses-add-first-to)

;;(setq mail-default-directory "~/Dropbox/writing/notationaldata/emacs-mail-message-mode-messages")
(setq mail-kill-buffer-on-exit nil)
(setq make-backup-files t)
(setq message-draft-headers (quote (From References Date)))
(setq message-kill-buffer-on-exit nil)
(setq message-required-headers (quote (From (optional . References))))
;; (setq message-send-hook (quote (recent-addresses-add-headers)))
(setq message-send-hook (quote (org-mime-htmlize)))
#+END_SRC

when replying, look kind of like gmail 

#+BEGIN_SRC emacs-lisp
(setq message-citation-line-format "On %e %B %Y at %R %Z, %f wrote:\not")
;; (setq message-citation-line-function 'message-insert-formatted-citation-line) 
#+END_SRC

* ~eshell~

#+BEGIN_SRC emacs-lisp
(setenv "PATH" (shell-command-to-string "source ~/.profile; echo -n $PATH"))
;; (require 'eshell-autojump)
#+END_SRC

* ~ibuffer~

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)
#+END_SRC

Defines ~ibuffer-do-replace-string~:
#+BEGIN_SRC emacs-lisp
(define-ibuffer-op replace-string (from-str to-str)
  "Perform a `replace-string' in marked buffers."
  (:interactive
   (let* ((from-str (read-from-minibuffer "Replace string: "))
          (to-str (read-from-minibuffer (concat "Replace " from-str
                                                " with: "))))
     (list from-str to-str))
   :opstring "replaced in"
   :complex t
   :modifier-p :maybe)
  (save-window-excursion
    (switch-to-buffer buf)
    (save-excursion
      (goto-char (point-min))
      (let ((case-fold-search ibuffer-case-fold-search))
        (while (search-forward from-str nil t)
          (replace-match to-str nil t))))
    t))
#+END_SRC

* Key chords

Use key chord
#+BEGIN_SRC emacs-lisp
;; (require 'key-chord)
(key-chord-mode 1)
#+END_SRC

* Autocomplete

#+BEGIN_EXAMPLE emacs-lisp
(use-package auto-complete)
(defun ac-ispell-get-word ()
  (format "\\(%s\\)" (car (ispell-get-word nil "\\*"))))

(defun ac-ispell-get-candidates (prefix)
  (let ((word prefix)
        (interior-frag nil))
    (lookup-words (concat (and interior-frag "*") word
                          (if (or interior-frag (null ispell-look-p))
                              "*"))
                  ispell-complete-word-dict)))

(ac-define-source ispell
  '((prefix . ac-prefix)
    (candidates . ac-ispell-get-candidates)))
#+END_EXAMPLE 

It's not a good idea to add `ac-source-ispell' to `ac-sources', I'll recommend
manual invoking.

Newer version of ~ac-define-source~ would provide us an
~ac-complete-ispell-word~.  In case it didn't:
#+BEGIN_EXAMPLE emacs-lisp
(defun ac-expand-ispell-word ()
  (interactive)
  (let ((ac-sources '(ac-source-ispell)))
    (call-interactively 'ac-start)))

(define-key global-map (kbd "s-/ s") 'ac-expand-ispell-word)

(ac-flyspell-workaround)

(load-file "~/Library/Preferences/Aquamacs Emacs/ac-ispell.el")
;; Completion words longer than 4 characters
#+END_EXAMPLE


#+BEGIN_EXAMPLE emacs-lisp
(defun buffer-background-black ()
  (interactive)
  (setq buffer-face-mode-face `(:background "black" :foreground "LightSkyBlue"))
  (buffer-face-mode 1))

;;
(defun my/enable-ac-ispell ()
  (add-to-list 'ac-sources 'ac-source-ispell))
;; (add-hook 'org-mode-hook 'my/enable-ac-ispell)
;; (add-hook 'message-mode-hook 'my/enable-ac-ispell)
;; (add-hook 'message-mode-hook 'buffer-background-black)

(eval-after-load "auto-complete"
  '(progn
     (ac-ispell-setup)))

#+END_EXAMPLE

* ido 

#+BEGIN_SRC emacs-lisp
(add-hook 'ido-setup-hook
	  (lambda ()
	    ;; Go straight home
	    (define-key ido-file-completion-map
	      (kbd "~")
	      (lambda ()
		(interactive)
		(if (looking-back "/")
		    (insert "~/")
		  (call-interactively 'self-insert-command))))))

(use-package ido
:config
(setq ido-ignore-directories  '("\\`CVS/" "\\`\\.\\./" "\\`\\./" ".git"))
(setq ido-ignore-files  '("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./" "pdf" "tex" "html" ".mm" "Icon*" ".git"))
)

(ido-mode t)

(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point 'guess
      ido-use-virtual-buffers t
      ido-handle-duplicate-virtual-buffers 2
      ido-decorations (quote ("{" "}" " | " " | ..." "[" "]" " [No match]" " [Matched]" " [Not so readable bro]" " [Too big yo]" " [Make it so.]"))
      ido-enable-last-directory-history t
ido-enter-matching-directory nil
      ido-use-faces t
      ido-use-url-at-point t
      ido-max-prospects 10)
;; (ido-everywhere t)

(setq confirm-nonexistent-file-or-buffer nil)
;; (ido-everywhere 1)
(setq ido-enable-last-directory-history t)
(setq ido-confirm-unique-completion t) ;; wait for RET, even for unique?
(setq ido-show-dot-for-dired nil) ;; put . as the first item
(setq ido-use-filename-at-point t) ;; prefer file names near point
(setq ido-use-filename-at-point 'guess)
(setq ido-file-extensions-order '(".org" ".txt" ".md"  ".emacs" ".el"))

#+END_SRC


** Use IDO for both buffer and file completion and ~ido-everywhere~ to ~t~:
#+BEGIN_SRC emacs-lisp
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
#+END_SRC

Use the current window when visiting files and buffers with IDO:
#+BEGIN_SRC emacs-lisp
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
#+END_SRC

Sort ido filelist by mtime instead of alphabetically.  Why would anyone want an
alphabetically sorted list? You can save keystrokes if the most recently
modified files are at the front:

#+BEGIN_SRC emacs-lisp
(add-hook 'ido-make-file-list-hook 'ido-sort-mtime)
(add-hook 'ido-make-dir-list-hook 'ido-sort-mtime)
(defun ido-sort-mtime ()
  (setq ido-temp-list
        (sort ido-temp-list
              (lambda (a b)
                (time-less-p
                 (sixth (file-attributes (concat ido-current-directory b)))
                 (sixth (file-attributes (concat ido-current-directory a)))))))
  (ido-to-end  ;; move . files to end (again)
   (delq nil (mapc 
              (lambda (x) (and (char-equal (string-to-char x) ?.) x))
              ido-temp-list))))
#+END_SRC

Add superior flex matching to ~ido-mode~:
#+BEGIN_SRC emacs-lisp
;; (require 'flx-ido)
;; (ido-mode 1)
;; (ido-everywhere 1)
(flx-ido-mode 1)
#+END_SRC

Disable IDO faces to see flx highlights:
#+BEGIN_SRC emacs-lisp
(setq ido-use-faces nil)
(setq gc-cons-threshold 20000000)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun ido-bookmark-jump (bname)
  "*Switch to bookmark interactively using `ido'."
  (interactive (list (ido-completing-read "Bookmark: " (bookmark-all-names) nil t)))
  (bookmark-jump bname))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq
 ido-ignore-files (quote ("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./" "html" "*.mm" "Icon*" "*gz" "*ido.hist" "*archive*" "ics")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun ido-goto-symbol (&optional symbol-list)
  "Refresh imenu and jump to a place in the buffer using Ido."
  (interactive)
  (unless (featurep 'imenu)
    (require 'imenu nil t))
  (cond
   ((not symbol-list)
    (let ((ido-mode ido-mode)
          (ido-enable-flex-matching
           (if (boundp 'ido-enable-flex-matching)
               ido-enable-flex-matching t))
          name-and-pos symbol-names position)
      (unless ido-mode
        (ido-mode 1)
        (setq ido-enable-flex-matching t))
      (while (progn
               (imenu--cleanup)
               (setq imenu--index-alist nil)
               (ido-goto-symbol (imenu--make-index-alist))
               (setq selected-symbol
                     (ido-completing-read "Symbol? " symbol-names))
               (string= (car imenu--rescan-item) selected-symbol)))
      (unless (and (boundp 'mark-active) mark-active)
        (push-mark nil t nil))
      (setq position (cdr (assoc selected-symbol name-and-pos)))
      (cond
       ((overlayp position)
        (goto-char (overlay-start position)))
       (t
        (goto-char position)))))
   ((listp symbol-list)
    (dolist (symbol symbol-list)
      (let (name position)
        (cond
         ((and (listp symbol) (imenu--subalist-p symbol))
          (ido-goto-symbol symbol))
         ((listp symbol)
          (setq name (car symbol))
          (setq position (cdr symbol)))
         ((stringp symbol)
          (setq name symbol)
          (setq position
                (get-text-property 1 'org-imenu-marker symbol))))
        (unless (or (null position) (null name)
                    (string= (car imenu--rescan-item) name))
          (add-to-list 'symbol-names name)
          (add-to-list 'name-and-pos (cons name position))))))))
#+END_SRC

* Things that I don't know what they're for 

** I forgot what this is but it looks important
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map
  (kbd "RET")
  (lambda()
    (interactive)
    (if (region-active-p)
        (delete-region (region-beginning)
                       (region-end))
      (call-interactively 'org-return))))
#+END_SRC

* Integration with other apps
** Chrome
*** Emacs Server
Don't start the server unless we can verify that it isn't running.
#+BEGIN_SRC emacs-lisp
(use-package server)
(when (and (functionp 'server-running-p) (not (server-running-p)))
  (server-start))
#+END_SRC

*** ~osx-browse~

(use-package osx-browse)

** PDFs
*** Open PDFs in Skim
#+BEGIN_SRC emacs-lisp
;; (require 'openwith)
;;'(openwith-associations (quote (("\\.skim\\'" "open" (file)) ("\\.pdf\\'" "open" (file)))))
;; (openwith-mode t)
#+END_SRC

* Fuzzy matching
** imenu

[[http://metasandwich.com/2013/01/19/emacs-config-youre-doing-it-wrong/][link]]

#+BEGIN_SRC emacs-lisp
(defun imenu-elisp-sections ()
  (setq imenu-prev-index-position-function nil)
  (add-to-list 'imenu-generic-expression '("Sections" "^;;;; \\(.+\\)$" 1) t))

(add-hook 'emacs-lisp-mode-hook 'imenu-elisp-sections)
;; helm-imenu
#+END_SRC

Jump to a definition in the current file. (This is awesome.)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-i") 'ido-imenu)
;; (add-hook 'my-mode-hook 'imenu-add-menubar-index)
;; (add-hook 'org-mode-hook 'imenu-add-menubar-index)

(defun try-to-add-imenu ()
  (condition-case nil (imenu-add-to-menubar "I love you.") (error nil)))
(add-hook 'font-lock-mode-hook 'try-to-add-imenu)
#+END_SRC

** Helm
Make helm-grep search recursively by default. I want helm-grep to search not only inside the current folder, but also inside subfolders.

#+BEGIN_SRC emacs-lisp
(setq helm-M-x-always-save-history t)
(eval-after-load 'helm-grep
  '(setq helm-grep-default-command helm-grep-default-recurse-command))
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp

(use-package dired

:config
(setq dired-omit-mode t)

  :bind (:map dired-mode-map
              ("M-o" . dired-omit-mode)
              ("o" . dired-omit-mode)
	      ("s-o" . tmtxt/dired-do-shell-mac-open)
              ("s-O" . reveal-in-finder)
              ("C-c n" . my-dired-create-file)
              ("c" . touch-file) 
              ("s-:" .  reveal-in-finder)
              ) 
  )

(add-hook 'dired-mode-hook 'hl-line-mode)

(use-package dired-x)
;; Load Dired X when Dired is loaded.
;; (add-hook 'dired-load-hook '(lambda () (require 'dired-x)))


(setq-default dired-omit-files-p t) ; Buffer-local variable

(setq-default dired-omit-mode t)


(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash/emacs")

;; Note: If you are using Dired Omit Mode with dired+, remember to put the config of Dired Omit Mode before loading (require) dired+ since some feature of dired+ use the config from Dired Omit Mode (for example for displaying the file names).

(defun tmtxt/dired-do-shell-mac-open ()
  (interactive)
  (save-window-excursion
    (let ((files (dired-get-marked-files nil current-prefix-arg))
          command)
      ;; the open command
      (setq command "open ")
      (dolist (file files)
        (setq command (concat command (shell-quote-argument file) " ")))
      (message command)
      ;; execute the command
      (async-shell-command command))))

(defun dired-open-current-directory-in-finder ()
  "Open the current directory in Finder"
  (interactive)
  (save-window-excursion
    (dired-do-async-shell-command
     "open .")))


;; https://truongtx.me/2013/04/25/dired-as-default-file-manager-5-customize-ls-command/

;; look at this: https://truongtx.me/2013/12/22/emacs-search-for-text-occurences-with-grep/


(setq-default dired-omit-files-p t) ; this is buffer-local variable
#+END_SRC


* savefile 
** file current locations
#+BEGIN_SRC emacs-lisp
(setq ido-save-directory-list-file "~/emacs/.savefile/ido.hist")
(setq projectile-known-projects-file "~/emacs/.savefile/projectile-bookmarks.eld")
#+END_SRC 

** recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf

:config


(setq recentf-max-menu-items 100)
(setq recentf-max-saved-items 100) 
(run-with-idle-timer 60 t 'recentf-save-list) ; save recentf automatically so recent files are stored even in the case of abnormal exit
)
#+END_SRC

* Ignore / Exclude Uninteresting Things

** buffer-stack untrack / ignore uninteresting buffers
#+BEGIN_SRC emacs-lisp
(defun buffer-stack-filter-regexp (buffer)
  "Non-nil if buffer is in buffer-stack-tracked."
  (not (or (string-match "\\Help\\|help\\|minibuf\\|org2blog\\|echo\\|conversion\\|converting\\|agenda\\|server\\|Messages\\|tex\\|Output\\|autoload\\|Customize\\|address\\|clock\\|Backtrace\\|Completions\\|grep\\|Calendar\\|archive\\||*Compile-Log*\\|tramp\\|helm\\|Alerts\\|Minibuf\\|Agenda\\|Echo\\|gnugol\\|RNC\\|ediff\\|widget\\|melpa\\|git\\|hydra\\|which\\|fontification\\|Helm\\|popwin\\|Custom\\|*Warnings*\\|*tags*\\|*emacs*\\|*gnugol*\\|*guide-key*\\|*scratch*\\|vc\\|booktime\\|accountability\\|Compile\\|*mm*\\|nntpd\\|Gnus agent\\|dribble\\|gnus work\\|Original Article\\|Prefetch\\|Backlog\\|article copy\\|Gnorb\\|wordnik\\|trace\\|*.log\\|accountability\\|debug\\|Re-Builder\\|spacemacs\\|Ilist\\|contacts-org-jay.txt\\|later.txt\\|.gz\\|orgmode\\|loaddefs\\|gnu\\|elpa\\|*org*\\|sent mail\\|version" (buffer-name buffer))
     (member buffer buffer-stack-untracked))))
(setq buffer-stack-filter 'buffer-stack-filter-regexp)
(setq buffer-stack-filter 'buffer-stack-filter-regexp)
(setq buffer-stack-filter 'buffer-stack-filter-regexp)
#+END_SRC

** recentf-exclude
Make it so that recentf does not record the following uninteresting file types:
#+BEGIN_SRC emacs-lisp
(add-to-list 'recentf-exclude "*Org tags*")
(add-to-list 'recentf-exclude "*sent mail")
(add-to-list 'recentf-exclude "/var/")
(add-to-list 'recentf-exclude "750words")
(add-to-list 'recentf-exclude "Applications")
(add-to-list 'recentf-exclude "Calendar")
(add-to-list 'recentf-exclude "LaTeX")
(add-to-list 'recentf-exclude "System")

(add-to-list 'recentf-exclude "\\\.Icon")
(add-to-list 'recentf-exclude "\\\.avi")
(add-to-list 'recentf-exclude "\\\.bmk")
(add-to-list 'recentf-exclude "\\\.bmp")
(add-to-list 'recentf-exclude "\\\.doc")
(add-to-list 'recentf-exclude "\\\.docx")
(add-to-list 'recentf-exclude "\\\.emacs.d")
(add-to-list 'recentf-exclude "\\\.flv")
(add-to-list 'recentf-exclude "\\\.gif")
(add-to-list 'recentf-exclude "\\\.git")
(add-to-list 'recentf-exclude "\\\.gz")
(add-to-list 'recentf-exclude "\\\.html")
(add-to-list 'recentf-exclude "\\\.ics")
(add-to-list 'recentf-exclude "\\\.jabber")
(add-to-list 'recentf-exclude "\\\.jpeg")
(add-to-list 'recentf-exclude "\\\.jpg")
(add-to-list 'recentf-exclude "\\\.mkv")
(add-to-list 'recentf-exclude "\\\.mov")
(add-to-list 'recentf-exclude "\\\.mp4")
(add-to-list 'recentf-exclude "\\\.mpeg")
(add-to-list 'recentf-exclude "\\\.mpg")
(add-to-list 'recentf-exclude "\\\.odg")
(add-to-list 'recentf-exclude "\\\.odp")
(add-to-list 'recentf-exclude "\\\.ods")
(add-to-list 'recentf-exclude "\\\.odt")
(add-to-list 'recentf-exclude "\\\.ogg")
(add-to-list 'recentf-exclude "\\\.ogm")
(add-to-list 'recentf-exclude "\\\.pdf")
(add-to-list 'recentf-exclude "\\\.png")
(add-to-list 'recentf-exclude "\\\.ppt")
(add-to-list 'recentf-exclude "\\\.tex")
(add-to-list 'recentf-exclude "\\\.tif")
(add-to-list 'recentf-exclude "\\\.wav")
(add-to-list 'recentf-exclude "\\\.wmv")
(add-to-list 'recentf-exclude "\\\.xls")
(add-to-list 'recentf-exclude "\\\.xlsx")

(add-to-list 'recentf-exclude "accountability")
(add-to-list 'recentf-exclude "agenda")
(add-to-list 'recentf-exclude "archive")
(add-to-list 'recentf-exclude "bookmark")
(add-to-list 'recentf-exclude "bookmarks")
(add-to-list 'recentf-exclude "contacts")
(add-to-list 'recentf-exclude "elpa")
(add-to-list 'recentf-exclude "gnugol")
(add-to-list 'recentf-exclude "helm")
;; (add-to-list 'recentf-exclude "-hours")
(add-to-list 'recentf-exclude "ido")
(add-to-list 'recentf-exclude "ido.hist")
(add-to-list 'recentf-exclude "ido.last'")
(add-to-list 'recentf-exclude "koma")
(add-to-list 'recentf-exclude "message")
(add-to-list 'recentf-exclude "mu2")
(add-to-list 'recentf-exclude "org-clock-save.el")
(add-to-list 'recentf-exclude "paths")
(add-to-list 'recentf-exclude "persp-auto")
(add-to-list 'recentf-exclude "png")
(add-to-list 'recentf-exclude "recent-addresses'")
(add-to-list 'recentf-exclude "recentf")
(add-to-list 'recentf-exclude "rollback-info")
(add-to-list 'recentf-exclude "scp")
(add-to-list 'recentf-exclude "ssh:")
;; (add-to-list 'recentf-exclude "gnu-emacs-startup")
;; (add-to-list 'recentf-exclude "shared-functions")
#+END_SRC

** grep-ignore
#+BEGIN_SRC emacs-lisp
(setq grep-find-ignored-directories (quote ("SCCS" "RCS" "CVS" "MCVS" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "devonthink")))
 '(grep-find-ignored-files (quote (".#*" "*.o" "*~" "*.bin" "*.lbin" "*.so" "*.a" "*.ln" "*.blg" "*.bbl" "*.elc" "*.lof" "*.glo" "*.idx" "*.lot" "*.fmt" "*.tfm" "*.class" "*.fas" "*.lib" "*.mem" "*.x86f" "*.sparcf" "*.fasl" "*.ufsl" "*.fsl" "*.dxl" "*.pfsl" "*.dfsl" "*.p64fsl" "*.d64fsl" "*.dx64fsl" "*.lo" "*.la" "*.gmo" "*.mo" "*.toc" "*.aux" "*.cp" "*.fn" "*.ky" "*.pg" "*.tp" "*.vr" "*.cps" "*.fns" "*.kys" "*.pgs" "*.tps" "*.vrs" "*.pyc" "*.pyo" "*.pdf" "*.tex" "*.html" "*.mm" "*.js" "*.doc" "*.docx" "*.xls" "*.jpg" "*.png" "*.xlsx" "*devonthink*" "*.gif" "Icon**" "*fontification*" "*helm*" "*750words*")))

(setq grep-find-ignored-files (quote (".#*" "*.o" "*~" "*.bin" "*.lbin" "*.so" "*.a" "*.ln" "*.blg" "*.bbl" "*.elc" "*.lof" "*.glo" "*.idx" "*.lot" "*.fmt" "*.tfm" "*.class" "*.fas" "*.lib" "*.mem" "*.x86f" "*.sparcf" "*.fasl" "*.ufsl" "*.fsl" "*.dxl" "*.pfsl" "*.dfsl" "*.p64fsl" "*.d64fsl" "*.dx64fsl" "*.lo" "*.la" "*.gmo" "*.mo" "*.toc" "*.aux" "*.cp" "*.fn" "*.ky" "*.pg" "*.tp" "*.vr" "*.cps" "*.fns" "*.kys" "*.pgs" "*.tps" "*.vrs" "*.pyc" "*.pyo" "*.pdf" "*.tex" "*.html" "*.mm" "*.js" "*.doc" "*.pdf" "*.docx" "*.xls" "*.jpg" "*.png" "*.xlsx" "*devonthink*" "*.gif" "#*"))) 
#+END_SRC

** dired-omit
#+BEGIN_SRC emacs-lisp
(setq 
dired-omit-files "^\\.[^.]\\|\\.pdf$\\|\\.tex$\\|Icon*"

dired-omit-extensions
  (quote
  (".o" "~" ".bin" ".lbin" ".so" ".a" ".ln" ".blg" ".bbl" ".elc" ".lof" ".glo" ".idx" ".lot" ".svn/" ".hg/" ".git/" ".bzr/" "CVS/" "_darcs/" "_MTN/" ".fmt" ".tfm" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".dfsl" ".pfsl" ".d64fsl" ".p64fsl" ".lx64fsl" ".lx32fsl" ".dx64fsl" ".dx32fsl" ".fx64fsl" ".fx32fsl" ".sx64fsl" ".sx32fsl" ".wx64fsl" ".wx32fsl" ".fasl" ".ufsl" ".fsl" ".dxl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo" ".idx" ".lof" ".lot" ".glo" ".blg" ".bbl" ".cp" ".cps" ".fn" ".fns" ".ky" ".kys" ".pg" ".pgs" ".tp" ".tps" ".vr" ".vrs" ".html" ".pdf" ".tex" ".git" ".skim" "docx" "mp4"))
)


;; (setq dired-omit-files "^\\.[^.]\\|\\.pdf$\\|\\.tex$\\|\\.DS_Store$\\|\\.doc$\\|\\.docx$\\|\\.ini$\\|\\.rtf$\\|\\Icon*\\|\\*.html")

#+END_SRC


* Word count
#+BEGIN_SRC emacs-lisp
(use-package wc-mode)
(setq wc-modeline-format "[Words: %tw, Chars: %tc]")
;; (add-hook 'org-mode-hook 'wc-mode) 
** count words
#+BEGIN_SRC emacs-lisp
(defun word-count (arg)
(interactive "r") 
(count-words arg)
  )
#+END_SRC

* unused packages 
** ~ls-lisp~

I think this is correct:
#+BEGIN_EXAMPLE emacs-lisp
(use-package ls-lisp)
(setq ls-lisp-ignore-case 't)
#+END_EXAMPLE 

* web research functions
** Sourcing / Citing / Attributing
*** Copy link from Chrome
#+BEGIN_SRC emacs-lisp
(defun org-mac-chrome-insert-frontmost-url-with-quotes ()
  "with quotes"
  (interactive)
  (insert "\"")
  (org-mac-chrome-insert-frontmost-url)
  (insert ",\"")
  )
#+END_SRC

** Paste notes with attribution
#+BEGIN_SRC emacs-lisp
(defun web-research ()
  (interactive)
  (insert "#+BEGIN_QUOTE\n")
  (let ((p (point)))
    (insert "\n#+END_QUOTE\nSource: ")
    (org-mac-chrome-insert-frontmost-url)
    (goto-char p))
  (pasteboard-paste)
  (next-line)
  (next-line)
  (next-line)
    (insert "\n"))
#+END_SRC

** Paste notes with attribution in quotes
#+BEGIN_SRC emacs-lisp
(defun web-research-quotes ()
  (interactive)
  (insert "\"")
    (org-mac-chrome-insert-frontmost-url)
       (insert "\,\" "))
#+END_SRC

** Paste HTML
Paste HTML using proper org-mode format
Source: [[http://emacs.stackexchange.com/questions/12121/org-mode-parsing-rich-html-directly-when-pasting][source]]
#+BEGIN_SRC emacs-lisp
(defun kdm/html2org-clipboard ()
  "Convert clipboard contents from HTML to Org and then paste (yank)."
  (interactive)
  (setq cmd "osascript -e 'the clipboard as \"HTML\"' | perl -ne 'print chr foreach unpack(\"C*\",pack(\"H*\",substr($_,11,-3)))' | pandoc -f html -t json | pandoc -f json -t org")
  (kill-new (shell-command-to-string cmd))
  (yank))
#+END_SRC

* My custom functions for working with dates and times

#+BEGIN_SRC emacs-lisp
(defun jd-org-current-time ()
  "foo"
  (interactive)
(insert (format-time-string "[%H:%M]"))
  )


(defun jd-org-today ()
  "insert a new heading with today's date"
  (interactive)
(smart-org-meta-return-dwim)
  (org-insert-time-stamp (current-time))
(insert "\n")
)


(defun jd-org-approach ()
 "insert a new heading with today's date"
 (interactive)
(insert "\n** ")
 (org-insert-time-stamp (current-time))
(insert "\n")
(insert "*** TODO morning pages\n")
(insert "*** TODO meditate\n")
(insert "*** TODO work on book\n")
(insert "**** TODO pomodoro #1\n")
(insert "**** TODO pomodoro #2\n")
(insert "*** TODO an approach\n")
)


(defun jd-org-today-and-accountability ()
  "insert a new heading with today's date"
  (interactive)
(insert "\n** committed actions: ")
  (org-insert-time-stamp (current-time))
  (insert " [0%]\n")

(insert "*** TODO wake up by 8:30am\n")
(insert "*** TODO blue light\n")

(insert "*** TODO morning pages\n")
(insert "*** TODO bookwriting [0/8]\n")
(insert "**** TODO bookwriting #1\n")
(insert "**** TODO bookwriting #2\n")
(insert "**** TODO bookwriting #3\n")
(insert "**** TODO bookwriting #4\n")
(insert "**** TODO bookwriting #5\n")
(insert "**** TODO bookwriting #6\n")
(insert "**** TODO bookwriting #7\n")
(insert "**** TODO bookwriting #8\n")
(insert "*** TODO ")
; (left-char)
  )

(defun jd-clock-in ()
  "insert a new heading with today's date, and then clock in"
  (interactive)
  (org-insert-heading ())
  (org-insert-time-stamp (current-time))
  (org-clock-in)
  (next-line)
  (next-line)
  )

#+END_SRC

* Prose editing settings
** Tab Completion for Prose
# haven't tried this yet

Source: ([[http://endlessparentheses.com/tab-completion-for-prose.html][source]])
#+BEGIN_EXAMPLE emacs-lisp
(setq ac-auto-start 3)
(setq company-minimum-prefix-length 3)

(defun endless/config-prose-completion ()
  "Make auto-complete less agressive in this buffer."
  (setq-local company-minimum-prefix-length 6)
  (setq-local ac-auto-start 6))

(add-hook 'org-mode-hook
  #'endless/config-prose-completion)
#+END_EXAMPLE 

** Capitalization
*** Intelligently change punctuation of sentences when I change the capitalization
([[http://endlessparentheses.com/super-smart-capitalization.html][source]]):
#+BEGIN_SRC emacs-lisp
(defun endless/convert-punctuation (rg rp)
  "Look for regexp RG around point, and replace with RP.
Only applies to text-mode."
  (let ((f "\\(%s\\)\\(%s\\)")
        (space "?:[[:blank:]\n\r]*"))
    ;; We obviously don't want to do this in prog-mode.
    (if (and (derived-mode-p 'text-mode)
             (or (looking-at (format f space rg))
                 (looking-back (format f rg space))))
        (replace-match rp nil nil nil 1))))

(defun endless/capitalize ()
  "Capitalize region or word.
Also converts commas to full stops, and kills
extraneous space at beginning of line."
  (interactive)
  (endless/convert-punctuation "," ".")
  (if (use-region-p)
      (call-interactively 'capitalize-region)
    ;; A single space at the start of a line:
    (when (looking-at "^\\s-\\b")
      ;; get rid of it!
      (delete-char 1))
    (call-interactively 'capitalize-word)))

(defun endless/downcase ()
  "Downcase region or word.
Also converts full stops to commas."
  (interactive)
  (endless/convert-punctuation "\\." ",")
  (if (use-region-p)
      (call-interactively 'downcase-region)
    (call-interactively 'downcase-word)))

(defun endless/upcase ()
  "Upcase region or word."
  (interactive)
  (if (use-region-p)
      (call-interactively 'upcase-region)
    (call-interactively 'upcase-word)))

(defun capitalize-or-endless/capitalize ()
(interactive)
(if

; If
(or
(looking-back "^")
)
    (call-interactively 'capitalize-word); then
    (call-interactively 'endless/capitalize); else

)
)

(global-set-key "\M-c" 'capitalize-or-endless/capitalize)
(global-set-key "\M-l" 'downcase-or-endless-downcase)
(global-set-key (kbd "M-u") 'endless/upcase)
(global-set-key (kbd "M-U") 'caps-lock-mode) ;; hell yes!! This is awesome!

(defun endless/upgrade ()
  "Update all packages, no questions asked."
  (interactive)
  (save-window-excursion
    (list-packages)
    (package-menu-mark-upgrades)
    (package-menu-execute 'no-query)))
#+END_SRC

** Reconfigure shift-select
For prose editing tasks, make m-s-right and m-s-left behave as they do in
traditional word processors, highlighting whole words at a time:
#+BEGIN_SRC emacs-lisp
(defvar lawlist-movement-syntax-table
  (let ((st (make-syntax-table)))
    ;; ` default = punctuation
    ;;  default = punctuation
    ;; , default = punctuation
    ;; ; default = punctuation
    (modify-syntax-entry ?{ "." st)  ;; { = punctuation
    (modify-syntax-entry ?} "." st)  ;; } = punctuation
    (modify-syntax-entry ?\" "." st) ;; " = punctuation
    (modify-syntax-entry ?\\ "_" st) ;; \ = symbol
    (modify-syntax-entry ?\$ "_" st) ;; $ = symbol
    (modify-syntax-entry ?\% "_" st) ;; % = symbol
    st)
  "Syntax table used while executing custom movement functions.")

(defun lawlist-forward-entity ()
"http://stackoverflow.com/q/18675201/2112489"
(interactive "^")
  (with-syntax-table lawlist-movement-syntax-table
    (cond
      ((eolp)
        (forward-char))
      ((and
          (save-excursion (< 0 (skip-chars-forward " \t")))
          (not (region-active-p)))
        (skip-chars-forward " \t"))
      ((and
          (save-excursion (< 0 (skip-chars-forward " \t")))
          (region-active-p))
        (skip-chars-forward " \t")
        (cond
          ((save-excursion (< 0 (skip-syntax-forward "w")))
            (skip-syntax-forward "w"))
          ((save-excursion (< 0 (skip-syntax-forward ".")))
            (skip-syntax-forward "."))
          ((save-excursion (< 0 (skip-syntax-forward "_()")))
            (skip-syntax-forward "_()"))))
      ((save-excursion (< 0 (skip-syntax-forward "w")))
        (skip-syntax-forward "w")
        (if (and
              (not (region-active-p))
              (save-excursion (< 0 (skip-chars-forward " \t"))))
          (skip-chars-forward " \t")))
      ((save-excursion (< 0 (skip-syntax-forward ".")))
        (skip-syntax-forward ".")
        (if (and
              (not (region-active-p))
              (save-excursion (< 0 (skip-chars-forward " \t"))))
          (skip-chars-forward " \t")))
      ((save-excursion (< 0 (skip-syntax-forward "_()")))
        (skip-syntax-forward "_()")
        (if (and
              (not (region-active-p))
              (save-excursion (< 0 (skip-chars-forward " \t"))))
          (skip-chars-forward " \t"))))))

(defun lawlist-backward-entity ()
"http://stackoverflow.com/q/18675201/2112489"
(interactive "^")
  (with-syntax-table lawlist-movement-syntax-table
    (cond
      ((bolp)
        (backward-char))
      ((save-excursion (> 0 (skip-chars-backward " \t")) (bolp))
        (skip-chars-backward " \t"))
      ((save-excursion (> 0 (skip-chars-backward " \t")) (> 0 (skip-syntax-backward "w")))
        (skip-chars-backward " \t")
        (skip-syntax-backward "w"))
      ((save-excursion (> 0 (skip-syntax-backward "w")))
        (skip-syntax-backward "w"))
      ((save-excursion (> 0 (skip-syntax-backward ".")))
        (skip-syntax-backward "."))
      ((save-excursion (> 0 (skip-chars-backward " \t")) (> 0 (skip-syntax-backward ".")))
        (skip-chars-backward " \t")
        (skip-syntax-backward "."))
      ((save-excursion (> 0 (skip-syntax-backward "_()")))
        (skip-syntax-backward "_()"))
      ((save-excursion (> 0 (skip-chars-backward " \t")) (> 0 (skip-syntax-backward "_()")))
        (skip-chars-backward " \t")
        (skip-syntax-backward "_()")))))

(define-key global-map [M-s-right] 'lawlist-forward-entity)
(define-key global-map [M-s-left] 'lawlist-backward-entity)
#+END_SRC

** Working with windows
Transpose windows, useful:
#+BEGIN_SRC emacs-lisp
(defun transpose-windows (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
	    (next-win (window-buffer (funcall selector))))
	(set-window-buffer (selected-window) next-win)
	(set-window-buffer (funcall selector) this-win)
	(select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
#+END_SRC

* move stuff around 
** Move region to other window, very useful:
#+BEGIN_SRC emacs-lisp
(defun move-region-to-other-window (start end)
  "Move selected text to other window"
  (interactive "r")
  (if (use-region-p)
      (let ((count (count-words-region start end)))
        (save-excursion
          (kill-region start end)
(newline)
(other-window 1)
          (yank)
          (newline))
        (other-window -1)
        (message "Moved %s words" count))
    (message "No region selected")))
#+END_SRC

** copy region to other window
#+BEGIN_SRC emacs-lisp
(defun copy-region-to-other-window (start end)
 "Move selected text to other window"
 (interactive "r")
 (if (use-region-p)
   (let ((count (count-words-region start end)))
    (save-excursion
     (copy-region-as-kill start end)
(other-window 1)
(newline) 
     (yank)
(newline) 
     (newline))
    (other-window -1)
    (message "Moved %s words" count))
  (message "No region selected")))

#+END_SRC


** org-refile
#+BEGIN_SRC emacs-lisp
(setq org-outline-path-complete-in-steps nil) ; Refile in a single go 
(setq org-completion-use-ido nil) 
(setq org-refile-use-outline-path t) ; Show full paths for refiling 



(defun my-org-files-list ()
 (delq nil
  (mapc (lambda (buffer)
   (buffer-file-name buffer))
   (org-buffer-list 'files t)))) 

(setq org-refile-targets '((my-org-files-list :maxlevel . 4))) 



;; allow refile to create parent tasks with confirmation: 
(setq org-refile-allow-creating-parent-nodes (quote confirm)) 

; (setq org-goto-interface 'outline-path-completion org-goto-max-level 3) 



#+END_SRC

** Refile region
Refile highlighted to a particular heading ([[http://stackoverflow.com/questions/25256304/in-emacs-org-mode-how-to-refile-highlighted-text-under-an-org-heading/25262538?iemail=1&noredirect=1#25262538][Source]]):

#+BEGIN_SRC emacs-lisp
(defvar refile-region-format "\n%s\n")

(defvar refile-region-position 'top
  "Where to refile a region. Use 'bottom to refile at the
end of the subtree. ")

(defun jay-refile-region (beg end copy)
  "Refile the active region.
If no region is active, refile the current paragraph.
With prefix arg C-u, copy region instad of killing it."
  (interactive "r\nP")
  ;; mark paragraph if no region is set
  (unless (use-region-p)
    (setq beg (save-excursion
                (backward-paragraph)
                (skip-chars-forward "\n\t ")
                (point))
          end (save-excursion
                (forward-paragraph)
                (skip-chars-backward "\n\t ")
                (point))))
  (let* ((target (save-excursion (org-refile-get-location)))
         (file (nth 1 target))
         (pos (nth 3 target))
         (text (buffer-substring-no-properties beg end)))
    (unless copy (kill-region beg end))
    (deactivate-mark)
    (with-current-buffer (find-file-noselect file)
      (save-excursion
        (goto-char pos)
        (if (eql refile-region-position 'bottom)
            (org-end-of-subtree)
          (org-end-of-meta-data))
        (insert (format refile-region-format text))))))


#+END_SRC


** move-region-or-subtree-to-other-window

#+BEGIN_SRC emacs-lisp
(defun move-region-or-subtree-to-other-window ()
  (interactive)
  (when (and
         (eq 'org-mode major-mode)
         (not (region-active-p)))
    (org-mark-subtree))
  (call-interactively 'move-region-to-other-window))
#+END_SRC

* Remove hyperlink
A useful function: remove a hyperlink but leave the link description:
#+BEGIN_SRC emacs-lisp
(defun remove-link ()
    "Replace an org link by its description or if empty its address"
  (interactive)
  (if (org-in-regexp org-bracket-link-regexp 1)
      (let ((remove (list (match-beginning 0) (match-end 0)))
        (description (if (match-end 3)
                 (org-match-string-no-properties 3)
                 (org-match-string-no-properties 1))))
    (apply 'delete-region remove)
    (insert description))))
#+END_SRC

* Working with files
** Reopen last closed file, very useful:
#+BEGIN_SRC emacs-lisp
(defun recentf-open-files-compl ()
  (interactive)
  (let* ((all-files recentf-list)
	 (tocpl (mapcar (function
			 (lambda (x) (cons (file-name-nondirectory x) x))) all-files))
	 (prompt (append '("File name: ") tocpl))
	 (fname (completing-read (car prompt) (cdr prompt) nil nil)))
    (find-file (cdr (assoc-string fname tocpl)))))

(global-set-key [(control x)(control r)] 'recentf-open-files-compl)

(defun visit-most-recent-file ()
  "Visits the most recently open file in `recentf-list' that is not already being visited."
  (interactive)
  (let ((buffer-file-name-list
         (mapcar 'file-truename
                 (remove nil (mapcar 'buffer-file-name (buffer-list)))))
        (recent-files-names (delete-dups (mapcar 'file-truename recentf-list)))
        most-recent-filename)
    (dolist (filename recent-files-names)
      (unless (member filename buffer-file-name-list)
        (setq most-recent-filename filename)
        (cl-return)))
    (ignore-errors (find-file most-recent-filename))))

#+END_SRC

** Copy path
Useful for working with files and references:
#+BEGIN_SRC emacs-lisp
(defun path-copy-path-to-clipboard ()
  "Copy the full current filename and path to the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename)))
  (push-kill-ring-pasteboard-to-clipboard)
)
#+END_SRC

** Copy path with quotes
Useful for working with files and references:
#+BEGIN_SRC emacs-lisp
(defun path-copy-path-to-clipboard-with-quotes ()
  "Copy the full current filename and path to the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename)))
  (push-kill-ring-pasteboard-to-clipboard)
)
#+END_SRC

** Recent files
Enable recent files using Ido mode COMMAND-R (then RIGHT-ARROW to browse) ~xsteve-ido-choose-from-recentf~ allows me to switch to any recently opened file. The nice thing, using that function is, that it does not matter, if I have the buffer already opened, or if the file must be opened now. With that function I have a persistent buffer list available.

*** Ido recent files
#+BEGIN_EXAMPLE emacs-lisp
(defun xsteve-ido-choose-from-recentf ()
  "Use ido to select a recently opened file from the 'recentf-list'"
  (interactive)
  (let ((home (expand-file-name (getenv "HOME"))))
    (find-file
     (ido-completing-read ""
			  (mapc (lambda (path)
				    (replace-regexp-in-string home "~" path))
				  recentf-list)
			  nil t))))
#+END_EXAMPLE

*** Enable recent files without using Ido mode via C-x C-r:
#+BEGIN_EXAMPLE emacs-lisp
(recentf-mode 1) ; recentf

(defun recentf-open-files-compl ()
  (interactive)
  (let* ((all-files recentf-list)
	 (tocpl (mapc (function
			 (lambda (x) (cons (file-name-nondirectory x) x))) all-files))
	 (prompt (append '("File name: ") tocpl))
	 (fname (completing-read (car prompt) (cdr prompt) nil nil)))
    (find-file (cdr (assoc-string fname tocpl)))))

(global-set-key [(control x)(control r)] 'recentf-open-files-compl)
#+END_EXAMPLE

** save some buffers
#+BEGIN_SRC emacs-lisp
(defun jay/save-some-buffers ()
(interactive)
  (save-some-buffers 'no-confirm (lambda ()
    (cond
      ((and buffer-file-name (equal buffer-file-name abbrev-file-name)))
      ((and buffer-file-name (eq major-mode 'latex-mode)))
((and buffer-file-name (eq major-mode 'emacs-lisp-mode)))
((and buffer-file-name (eq major-mode 'fundamental-mode)))
((and buffer-file-name (eq major-mode 'conf-mode)))
((and buffer-file-name (eq major-mode 'markdown-mode)))
((and buffer-file-name (eq major-mode 'js2-mode)))
((and buffer-file-name (eq major-mode 'json-mode)))
((and buffer-file-name (eq major-mode 'conf-mode))) 
((and buffer-file-name (eq major-mode 'conf-mode)))
((and buffer-file-name (eq major-mode 'graphviz-dot-mode)))
((and buffer-file-name (eq major-mode 'python-mode)))
((and buffer-file-name (eq major-mode 'text-mode)))
((and buffer-file-name (eq major-mode 'snippet-mode))) 
((and buffer-file-name (eq major-mode 'css-mode))) 
((and buffer-file-name (eq major-mode 'xml-mode))) 
((and buffer-file-name (eq major-mode 'nxml-mode))) 
((and buffer-file-name (eq major-mode 'fountain-mode))) 
((and buffer-file-name (eq major-mode 'nmxml-mode)))
((and buffer-file-name (eq major-mode 'web-mode)))
((and buffer-file-name (eq major-mode 'conf-mode)))
((and buffer-file-name (eq major-mode 'gitconfig-mode)))
((and buffer-file-name (eq major-mode 'gitignore-mode)))
      ((and buffer-file-name (eq major-mode 'sh-mode)))
      ((and buffer-file-name (derived-mode-p 'org-mode)))))))
#+END_SRC

** find-file tricks
[[http://oremacs.com/2015/01/09/ido-find-file-tilde/][tilde in ido-find-file ]]- doesn't work with smex

#+BEGIN_SRC emacs-lisp
(defun oleh-ido-setup-hook ()
  (define-key ido-file-dir-completion-map "~"
    (lambda ()
      (interactive)
      (ido-set-current-directory "~/")
      (setq ido-exit 'refresh)
      (exit-minibuffer))))

(add-hook 'ido-setup-hook 'oleh-ido-setup-hook)

(defun ido-find-file-jump (dir)
  "Return a command that sends DIR to `ido-find-file'."
  `(lambda ()
     (interactive)
     (ido-set-current-directory ,dir)
     (setq ido-exit 'refresh)
     (exit-minibuffer)))



(defvar oleh-ido-shortcuts
  '(("~/" "~")
    ("~/Dropbox/source/site-lisp/" "!")
    ("~/git/lispy/" "@")))

(mapc (lambda (x)
        (setcar x (ido-find-file-jump (car x))))
      oleh-ido-shortcuts)

(defun oleh-ido-setup-hook ()
  (mapc
   (lambda (x)
     (define-key ido-file-dir-completion-map (cadr x) (car x)))
   oleh-ido-shortcuts))

(add-hook 'ido-setup-hook 'oleh-ido-setup-hook)
#+END_SRC


** Google search
Enable Google search:
#+BEGIN_SRC emacs-lisp
;; (require 'engine-mode)
;; (engine-mode t)

;; (defengine google  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"  "g")
#+END_SRC

** Google search through Gnugol
#+HEADER: :comments noweb 
#+BEGIN_SRC emacs-lisp
;; (require 'gnugol)

(defun region-or-word-at-point ()
  (if (use-region-p)
      (buffer-substring-no-properties
       (region-beginning)
       (region-end))
    (substring-no-properties
     (thing-at-point 'word))))

 ;; (defun gnugol-word-at-point ()
 ;;   (interactive)
 ;;  (gnugol-search-google (region-or-word-at-point)))

#+END_SRC

* Things I want to learn
** Need to add "cleanup buffer safe" here from whattheemacsd.com
#+BEGIN_SRC emacs-lisp
(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer.
Including indent-buffer, which should not be called automatically on save."
  (interactive)
  (cleanup-buffer-safe)
  (indent-region (point-min) (point-max)))

(global-set-key (kbd "C-c n") 'cleanup-buffer)
#+END_SRC

* Keybindings

Best guide to [[http://www.nongnu.org/emacs-tiny-tools/keybindings/][keybindings]].

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-C-N") 'outline-next-visible-heading)
(global-set-key (kbd "M-C-P") 'outline-previous-visible-heading)
(define-key key-minor-mode-map (kbd "M-C-N") 'outline-next-visible-heading)
(define-key key-minor-mode-map (kbd "M-C-P") 'outline-previous-visible-heading)

(global-set-key (kbd "M-N") 'org-forward-heading-same-level)
(global-set-key (kbd "M-n") 'org-next-visible-heading)
(global-set-key (kbd "M-P") 'org-backward-heading-same-level)
(global-set-key (kbd "M-p") 'org-previous-visible-heading) 
(define-key key-minor-mode-map (kbd "M-N") 'org-forward-heading-same-level)
(define-key key-minor-mode-map (kbd "M-P") 'org-backward-heading-same-level)


(define-key key-minor-mode-map (kbd "M-{") 'org-backward-heading-same-level)
(define-key key-minor-mode-map (kbd "M-}") 'org-forward-heading-same-level)
(define-key key-minor-mode-map (kbd "M-[") 'org-previous-visible-heading)
(define-key key-minor-mode-map (kbd "M-]") 'org-next-visible-heading)

(global-set-key (kbd "s-p") 'org-export-dispatch)
(define-key key-minor-mode-map (kbd "s-p") 'org-export-dispatch)

(global-set-key (kbd "M-1") 'auto-capitalize-mode)
;; (global-set-key (kbd "s-u") 'dired-single)


(define-key global-map (kbd "<C-wheel-up>") (lambda ()
                                              (interactive)
                                              (scroll-up-command)))
(define-key global-map (kbd "<C-wheel-down>") (lambda ()
                                               (interactive)
                                               (scroll-down-command)))

(global-set-key "\C-f" 'forward-word)
(global-set-key "\C-b" 'backward-word)

(global-set-key '[(f5)] 'point-stack-push)
(global-set-key '[(f6)] 'point-stack-pop)
(global-set-key '[(f7)] 'point-stack-forward-stack-pop)
(global-set-key '[(f8)] 'search-open-buffers)

(define-key key-minor-mode-map (kbd "<M-S-backspace>") 'backward-kill-sexp)
(define-key key-minor-mode-map (kbd "<M-S-backspace>") 'backward-kill-sexp)
(define-key key-minor-mode-map (kbd "<M-S-backspace>") 'backward-kill-sexp)
(define-key key-minor-mode-map (kbd "<M-S-backspace>") 'backward-kill-sexp)
#+END_SRC

Make ^H delete rather than help:
#+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "C-h") 'delete-backward-char)
#+END_SRC

Redefine help shortcut:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-h") 'help-command)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (define-key key-minor-mode-map (kbd "C-x C-f") 'helm-find-files)
;; (define-key key-minor-mode-map (kbd "C-x C-f") 'ido-find-file-in-dir)
(global-set-key (kbd "C-c h") 'helm-mini)
#+END_SRC

~helm~ keybindings:
- [C-n] Move to next helm suggestion.
- [C-p] Move to previous helm suggestion.

#+BEGIN_SRC emacs-lisp
(cl-dolist (map '(message-mode-map orgstruct-mode-map))
  (cl-dolist (key '("<M-S-left>" "<M-S-right>" "<M-S-up>" "<M-S-down>" "<M-left>" "<M-right>" "<M-up>" "<M-down>"))
    (define-key (eval map) (kbd key) nil)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-ce" 'eval-buffer)
(global-set-key "\C-cr" 'eval-region)
(define-key org-mode-map (kbd "`") 'flyspell-auto-correct-word)
(define-key orgstruct-mode-map (kbd "`") 'flyspell-auto-correct-word)
;; (define-key key-minor-mode-map (kbd "`") 'flyspell-auto-correct-word)
(global-set-key (kbd "s-z") 'undo)
(global-set-key (kbd "s-y") 'redo)
#+END_SRC

** OSX ⌘ key bindings
Recognize the ⌘ key in both GNU Emacs and Aquamacs as hyper key:
#+BEGIN_SRC emacs-lisp
(defvar gnuemacs-flag (string-match "GNU" (emacs-version)))
(defvar aquamacs-flag (string-match "Aquamacs" (emacs-version)))

(defun define-super-key (key fun)
  (cond
   (aquamacs-flag
    (define-key osx-key-mode-map (kbd (concat "A-" key)) fun))
   (gnuemacs-flag
    (define-key key-minor-mode-map (kbd (concat "s-" key)) fun))))
#+END_SRC

*** mksuper - shared Aquamacs / GNU Emacs keybindings:
#+BEGIN_SRC emacs-lisp
(define-super-key "h" 'replace-string)


(define-super-key "m" 'mc/mark-all-like-this-dwim)


(define-super-key "\\" 'visit-most-recent-file)

;; (define-super-key "f" 'isearch-forward)
(define-super-key "F" 'pasteboard-search-for-clipboard-contents) 
;; (define-super-key "R" 'helm-projectile-recentf)
;; (define-super-key "r" 'helm-mini)

(define-super-key "R" 'projectile-find-file)
(define-super-key "t" 'new-buffer)
(define-super-key "T" 'org-new-scratch-buffer)
(define-super-key "g" 'isearch-repeat-forward)
(define-super-key "k" 'kill-buffer)
(define-super-key "K" 'org-cut-subtree)
(define-super-key "d" 'org-todo)
(define-super-key "L" 'org-mac-chrome-insert-frontmost-url)
(define-super-key "S" 'org-mac-skim-insert-page)
(define-super-key "a" 'mark-whole-buffer) ; select all
(define-super-key "w" 'delete-window) ; close
(define-super-key "`" 'other-window)
(define-super-key "s" 'jay/save-some-buffers ) ; save all
#+END_SRC

Key bindings I don't use much and should remember to learn:
#+BEGIN_SRC emacs-lisp
(define-super-key "4" 'clone-indirect-buffer-other-window)
(define-super-key "5" 'point-stack-push)
(define-super-key "6" 'point-stack-pop)
(define-super-key "7" 'point-stack-forward-stack-pop)
(define-super-key "8" 'search-open-buffers)
;; (define-super-key "o" 'eval-buffer)
(define-super-key "F" 'pasteboard-search-for-clipboard-contents)
(define-super-key "(" 'org-velocity)
(define-super-key "{" 'path-copy-path-to-clipboard)
(define-super-key "}" 'path-copy-path-to-clipboard)
;; why not use N and P here? TODO



;; (define-super-key "j a" 'org-agenda)
(define-super-key "j j" 'helm-imenu-anywhere)
;; (define-super-key ";" 'ido-goto-symbol)
;; (define-super-key ";" 'helm-resume)
;; (define-super-key "D" 'diredp-dired-recent-dirs)

#+END_SRC

mkprefix: Key bindings for my own custom functions, using ⌘-m as a prefix:
#+BEGIN_SRC emacs-lisp
(define-super-key "j cy" 'cyberpunk-jay)
(define-super-key "j cl" 'cyberpunk-large)
(define-super-key "j zb" 'zenburn)
(define-super-key "j le" 'leuven)
(define-super-key "j ts" 'transparent-serenity)
(define-super-key "j tg" 'top-gun-mode)
(define-super-key "j tn" 'tomorrow-night)

(define-super-key "j ma" 'inverse-add-global-abbrev) 

(define-super-key "j rr" 'replace-regexp) 


(define-super-key "j cf" 'customize-face) 

;; (define-super-key "j h" 'org-export-dispatch)




;(define-super-key "j nm" 'notmuch-hello)
(define-super-key "j mu" 'mu4e)

;; (define-super-key "j cl" 'cyberpunk-large)

(define-super-key "j dd" 'delete-duplicate-lines-keep-blanks) 

(define-super-key "j cw" 'count-words)
(define-super-key "j wb" 'whiteboard)
(define-super-key "j sl" 'spacemacs-light)

(define-super-key "j sd" 'solarized-dark)
(define-super-key "j ri" 'ritchie)
(define-super-key "j sp" 'spolsky)
(define-super-key "j wr" 'writeroom-mode)
(define-super-key "j wf" 'workflowy-mode)
(define-super-key "j st" 'small-type)
(define-super-key "j mp" 'morning-pages)
(define-super-key "j lt" 'load-theme)
(define-super-key "j mt" 'medium-type)

(define-super-key "j bl" 'blue-light)

(define-super-key "j eu" 'endless/upgrade)


;; accountability

(define-super-key "j ek" 'erika-send-email-styled)
(define-super-key "j ad" 'adrien-send-email-styled)

(defun keybinding-read-and-insert (key)
  (interactive "kKey: ")
(insert "(define-key key-minor-mode-map ")
        (insert (format "(kbd \"%s\")" (key-description key)))
        (insert " '")
(save-excursion (insert ")")
                ))

(define-super-key "j kb" 'keybinding-read-and-insert)
(define-super-key "j mk" 'keybinding-read-and-insert)



#+END_SRC

** cut-subtree
   :PROPERTIES:
   :ID:       D283A971-F9C3-4683-A419-82F7D9816F72
   :END:

   #+BEGIN_SRC emacs-lisp
(define-key key-minor-mode-map (kbd "M-s-k") 'org-cut-subtree)
(define-key key-minor-mode-map (kbd "C-s-k") 'org-cut-subtree)
   #+END_SRC

* Searching for things
** isearch
*** isearch settings
#+BEGIN_SRC emacs-lisp
(defun my-isearch-word-at-point ()
  (interactive)
  (call-interactively 'isearch-forward-regexp))

(defun my-isearch-yank-word-hook ()
  (when (equal this-command 'my-isearch-word-at-point)
    (let ((string (concat "\\<"
			  (buffer-substring-no-properties
			   (progn (skip-syntax-backward "w_") (point))
			   (progn (skip-syntax-forward "w_") (point)))
			  "\\>")))
      (if (and isearch-case-fold-search
	       (eq 'not-yanks search-upper-case))
	  (setq string (downcase string)))
      (setq isearch-string string
	    isearch-message
	    (concat isearch-message
		    (mapconcat 'isearch-text-char-description
			       string ""))
	    isearch-yank-flag t)
      (isearch-search-and-update))))

(add-hook 'isearch-mode-hook 'my-isearch-yank-word-hook)

;; (global-set-key "\C-cw" 'my-isearch-word-at-point)
#+END_SRC

*** search all open buffers
I know that string is in my Emacs somewhere!
#+BEGIN_SRC emacs-lisp
(use-package cl)


(defcustom search-open-buffers-ignored-files (list (rx-to-string '(and bos (or ".bash_history" "TAGS" "Preferences" "Backtrace" "Messages" "Custom" "scratch") eos)))
  "Files to ignore when searching buffers via \\[search-open-buffers]."
  :type 'editable-list)

(use-package grep)

(defun search-open-buffers (regexp prefix)
  "Searches file-visiting buffers for occurence of REGEXP. With
prefix > 1 (i.e., if you type C-u \\[search-open-buffers]),
searches all buffers."
  (interactive (list (grep-read-regexp)
                     current-prefix-arg))
  (message "Regexp is %s; prefix is %s" regexp prefix)
  (multi-occur
   (if (member prefix '(4 (4)))
       (buffer-list)
     (remove-if
      (lambda (b) (some (lambda (rx) (string-match rx  (file-name-nondirectory (buffer-file-name b)))) search-open-buffers-ignored-files))
      (remove-if-not 'buffer-file-name (buffer-list))))

   regexp))
#+END_SRC

*** Position of the Cursor after Searching

Note that when you type ‘C-r’, isearch goes backwards. When you search
backwards, find something, and then end the search, for example by hitting
‘RET’, point is at the beginning of the string you searched. When you search
forwards, point is not necessarily at the end of the string you were searching
for, but only after the last character that you typed – bad usability! That
means that you cannot predict point based on the string you are searching for
(and thinking about). You must predict point based on the numbers of characters
you typed. Here is how to change that in your InitFile, courtesy of
AdrianKubala:

#+BEGIN_SRC emacs-lisp
(add-hook 'isearch-mode-end-hook 'my-goto-match-beginning)

(defun my-goto-match-beginning ()
  (when (and isearch-forward isearch-other-end)
    (goto-char isearch-other-end)))

(defadvice isearch-exit (after my-goto-match-beginning activate)
  "Go to beginning of match."
  (when (and isearch-forward isearch-other-end)
    (goto-char isearch-other-end))
(recenter-top-bottom)
)

(defun isearch-from-buffer-start ()
  (interactive)
  (push-mark)
  (goto-char (point-min))
  (isearch-forward))
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(use-package helm-config 
:config
(helm-mode t)
;; (helm-adaptative-mode t)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package helm-swoop)
; (global-set-key (kbd "M-i") (lambda() (interactive) (helm-swoop :$query nil)))

(setq helm-swoop-pre-input-function
      (lambda () nil))
#+END_SRC

When doing isearch, hand the word over to ~helm-swoop~:
#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
#+END_SRC

From ~helm-swoop~ to ~helm-multi-swoop-all~:
#+BEGIN_SRC emacs-lisp
;; (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
#+END_SRC

When doing evil-search, hand the word over to ~helm-swoop~:
#+BEGIN_SRC emacs-lisp
;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)
#+END_SRC

Save buffer when ~helm-multi-swoop-edit~ completes:
#+BEGIN_SRC emacs-lisp
(setq helm-multi-swoop-edit-save t)
#+END_SRC

If this value is ~t~, split window inside the current window:
#+BEGIN_SRC emacs-lisp
(setq helm-swoop-split-with-multiple-windows nil)
#+END_SRC

Split direcion. ~split-window-vertically~ or ~split-window-horizontally~:
#+BEGIN_SRC emacs-lisp
;; (setq helm-swoop-split-direction 'split-window-vertically)
#+END_SRC

If ~nil~, you can slightly boost invoke speed in exchange for text color:
#+BEGIN_SRC emacs-lisp
(setq helm-swoop-speed-or-color nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
#+END_SRC 

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x r l") #'helm-filtered-bookmarks)
(global-set-key (kbd "M-y")     #'helm-show-kill-ring)
(global-set-key (kbd "M-s /")   #'helm-multi-swoop)

(setq helm-ff-transformer-show-only-basename nil
      helm-adaptive-history-file             "~/emacs/.savefile/helm-history"
      helm-yank-symbol-first                 t
      helm-move-to-line-cycle-in-source      t
      helm-buffers-fuzzy-matching            t
      helm-ff-auto-update-initial-value      t)

(autoload 'helm-descbinds      "helm-descbinds" t)
(autoload 'helm-eshell-history "helm-eshell"    t)
(autoload 'helm-esh-pcomplete  "helm-eshell"    t)

(global-set-key (kbd "M-h a")    #'helm-apropos)
(global-set-key (kbd "M-h i")    #'helm-info-emacs)
(global-set-key (kbd "M-h b")    #'helm-descbinds)

(add-hook 'eshell-mode-hook
          #'(lambda ()
              (define-key eshell-mode-map (kbd "TAB")     #'helm-esh-pcomplete)
              (define-key eshell-mode-map (kbd "C-c C-l") #'helm-eshell-history)))


(global-set-key (kbd "C-x c!")   #'helm-calcul-expression)
(global-set-key (kbd "C-x c:")   #'helm-eval-expression-with-eldoc)
(define-key helm-map (kbd "M-o") #'helm-previous-source)

(global-set-key (kbd "M-s s")   #'helm-again)
#+END_SRC

** projectile

   #+BEGIN_SRC emacs-lisp
(use-package projectile

:config
(setq projectile-completion-system (quote helm))
(setq projectile-enable-caching nil)
;; (setq projectile-globally-ignored-buffers (quote ("docx ")))
(setq projectile-globally-ignored-file-suffixes (quote ("docx " "jpg" "png" "tmp" "tex" "html" "pdf" "pptx" "tmp")))
(setq projectile-globally-ignored-directories
   (quote
    (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn"".tmp" "archived-work" "images" "excel-mindnode-omni" "archive")))


(setq projectile-globally-ignored-files
  (quote
  ("TAGS" ".DS_Store" ".projectile" ".dropbox"))) 


:bind (:map projectile-mode-map 
( "s-o" . nil)
))


   #+END_SRC

** helm projectile

   #+BEGIN_SRC emacs-lisp


(setq ad-redefinition-action 'accept) 
(use-package helm-projectile

:config
(setq helm-projectile-sources-list (cons 'helm-source-projectile-files-list
(remove 'helm-source-projectile-files-list helm-projectile-sources-list)))
)

(helm-projectile-on)

(define-key projectile-mode-map (kbd "C-c p /")
  #'(lambda ()
      (interactive)
      (helm-ag (projectile-project-root))))
   #+END_SRC 

** isearch
   :PROPERTIES:
   :ID:       646E722F-EEEE-4986-9DFA-A0A11068ECAD
   :END:
*** isearch current word
  isearch Current Word

  Buy Xah Emacs Tutorial. Master emacs benefits for life.
  PayPal
  Xah Lee, 2010-05-29, …, 2015-09-03
  Here's a command that will do isearch of the word under cursor.

  (defun xah-search-current-word ()
    "Call `isearch' on current word or text selection.
  "word" here is A to Z, a to z, and hyphen 「-」 and underline 「_」, independent of syntax table.
  URL `http://ergoemacs.org/emacs/modernization_isearch.html'
  Version 2015-04-09"
    (interactive)
    (let ( ξp1 ξp2 )
      (if (use-region-p)
          (progn
            (setq ξp1 (region-beginning))
            (setq ξp2 (region-end)))
        (save-excursion
          (skip-chars-backward "-_A-Za-z0-9")
          (setq ξp1 (point))
          (right-char)
          (skip-chars-forward "-_A-Za-z0-9")
          (setq ξp2 (point))))
      (setq mark-active nil)
      (when (< ξp1 (point))
        (goto-char ξp1))
      (isearch-mode t)
      (isearch-yank-string (buffer-substring-no-properties ξp1 ξp2))))

  (define-key key-minor-mode-map (kbd "M-o") 'xah-search-current-word)

  You need to give it a easy key. Such as 【Ctrl+3】. 〔➤ Emacs: How to Define Keys〕 Note: if you use the key 【Ctrl+⇧ Shift+s】, it won't work if emacs runs in terminal.





*** isearch arrow keys

  Here's very convenient keys for isearch. Put it in your emacs init.


  #+BEGIN_SRC emacs-lisp

(progn
  ;; set arrow keys in isearch. left/right is backward/forward, up/down is history. press Return to exit
;;  (define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat )
;; (define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance )
  (define-key isearch-mode-map (kbd "<tab>") 'isearch-ring-advance )
  (define-key isearch-mode-map (kbd "<S-tab>") 'isearch-repeat-backward) ; single key, useful

;  (define-key isearch-mode-map (kbd "<right>") 'isearch-repeat-forward) ; single key, useful
 )

  #+END_SRC


  when in isearch, the arrow keys will:

  → next occurrence.
  ← previous occurrence.
  ↑ previous search term.
  ↓ next search term.
  Enter ↵ exit isearch.

  This way, searching forward/backward is just one single key press, no key combination.

  This is especially useful with a command that searches current word. See: Emacs: isearch Current Word. 



** searching 
   :PROPERTIES:
   :ID:       37637C3F-0CB1-48CE-8CD0-4436182F212A
   :END:
*** swiper 

**** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy


 :config

(define-key ivy-minibuffer-map (kbd "SPC") 'insert-space)
(define-key ivy-minibuffer-map (kbd "s-v") 'pasteboard-paste-no-spaces)
(setq ivy-height 25)
(setq ivy-display-style 'fancy)

)
#+END_SRC

**** swiper
  #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'swiper)
(setq ivy-re-builders-alist
 '((t . ivy--regex-plus))) 



(define-key key-minor-mode-map (kbd "C-7") 'swiper-mc) 

  #+END_SRC

**** ivy add actions
  [[https://www.reddit.com/r/emacs/comments/5453d4/what_does_your_ivyswiper_configuration_look_like/][What does your ivy/swiper configuration look like? : emacs]]

  [[http://pastebin.com/g867n8h6][{Lisp} My ivy configuration - Pastebin.com]]
  #+BEGIN_SRC emacs-lisp
(ivy-add-actions t
 '(("W" kill-new "save to kill ring")
  ("I" insert "insert in buffer"))) 
  #+END_SRC

**** swiper hydra
  #+BEGIN_SRC emacs-lisp
(defun ivy-dired-mark (arg)
 (interactive "p")
 (dotimes (_i arg)
  (with-selected-window swiper--window
   (dired-mark 1))
  (ivy-next-line 1)
  (ivy--exhibit)))

(defun ivy-dired-unmark (arg)
 (interactive "p")
 (dotimes (_i arg)
  (with-selected-window swiper--window
   (dired-unmark 1))
  (ivy-next-line 1)
  (ivy--exhibit)))

(defun ivy-replace ()
 (interactive)
 (let ((from (with-selected-window swiper--window
        (move-beginning-of-line nil)
        (when (re-search-forward
            (ivy--regex ivy-text) (line-end-position) t)
         (match-string 0)))))
  (if (null from)
    (user-error "No match")
   (let ((rep (read-string (format "Replace [%s] with: " from))))
    (with-selected-window swiper--window
     (undo-boundary)
     (replace-match rep t t))))))

(defun ivy-undo ()
 (interactive)
 (with-selected-window swiper--window
  (undo))) 


(defhydra hydra-ivy (:hint nil
           :color pink)
 "
^^^^^^     ^Actions^  ^Dired^   ^Quit^
^^^^^^--------------------------------------------
^ ^ _l_ ^ ^   _._ repeat  _m_ark   _i_: cancel
_j_ ^✜^ _;_   _r_eplace  _,_ unmark _o_: quit
^ ^ _k_ ^ ^   _u_ndo 
"
 ;; arrows
 ("j" ivy-beginning-of-buffer)
 ("k" ivy-next-line)
 ("l" ivy-previous-line)
 (";" ivy-end-of-buffer)
 ;; actions
 ("." hydra-repeat)
 ("r" ivy-replace)
 ("u" ivy-undo)
 ;; dired
 ("m" ivy-dired-mark)
 ("," ivy-dired-unmark)
 ;; exit
 ("o" keyboard-escape-quit :exit t)
 ("i" nil)) 

(define-key ivy-minibuffer-map (kbd "C-o") 'hydra-ivy/body) 

  #+END_SRC

** searching 
   :PROPERTIES:
   :ID:       B637F4A7-B467-4273-8394-535DC3BF9C9C
   :END:

*** Tell isearch that curly apostrophes are the same as straight ones
 Source: [[http://endlessparentheses.com/ispell-and-apostrophes.html][Ispell and Apostrophes in Emacs]]

 #+BEGIN_SRC emacs-lisp
 ;;; Tell ispell.el that ’ can be part of a word.
(setq ispell-local-dictionary-alist
      `((nil "[[:alpha:]]" "[^[:alpha:]]"
             "['\x2019]" nil ("-B") nil utf-8)))

;;; Don't send ’ to the subprocess.
(defun endless/replace-apostrophe (args)
  (cons (replace-regexp-in-string
         "’" "'" (car args))
        (cdr args)))
(advice-add #'ispell-send-string :filter-args
            #'endless/replace-apostrophe)

;;; Convert ' back to ’ from the subprocess.
(defun endless/replace-quote (args)
  (if (not (derived-mode-p 'org-mode))
      args
    (cons (replace-regexp-in-string
           "'" "’" (car args))
          (cdr args))))
(advice-add #'ispell-parse-output :filter-args
            #'endless/replace-quote)
 #+END_SRC




* these seem to need to go at the end

** Palimpsest - best ever
#+BEGIN_SRC emacs-lisp
;; (require 'palimpsest)
(palimpsest-mode 1)
(define-key org-mode-map (kbd "C-c C-r") 'palimpsest-move-region-to-bottom)
#+END_SRC

C-C C-R to move text to the bottom of the buffer

** Make block quotes appear nicely in buffer, displaying > instead of :

This doesn't seem to be working.

http://thread.gmane.org/gmane.emacs.orgmode/64980/focus=65987
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords
 'org-mode '(("^\\(:+\\) " 1 (compose-region (match-beginning 1) (match-end 1) ?❱) nil)))
#+END_SRC

* replace word
#+BEGIN_SRC emacs-lisp
(defun replace-word (tosearch toreplace)
  (interactive "sSearch for word: \nsReplace with: ")
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search nil)
          (count 0))
      (while (re-search-forward (concat "\\b" tosearch "\\b") nil t)
        (setq count (1+ count))
        (replace-match toreplace 'fixedcase 'literal))
      (message "Replaced %s match(es)" count))))
#+END_SRC



* capitalization 
** words to never downcase
#+BEGIN_SRC emacs-lisp
(setq never-downcase-words '("Internet" "Jay" "Dixit" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday" "York" "Canada" "I" "U" "I'm" "I'll" "I've" "I'd" "OK"))
#+END_SRC

** auto-capitalize-predicate 
#+BEGIN_SRC emacs-lisp
(setq auto-capitalize-predicate
      (lambda ()
        (and
         (not (org-checkbox-p))
         (save-match-data
           (not (and
                 (org-or-orgtsruct-p)
                 (looking-back
                 "\\[\\[.*\\]\\][^.\n]*\\.?"))))
         (save-match-data
           (not (looking-back
                 "\\([Ee]\\.g\\|[Uu]\\.S\\|[Uu]\\.K\\|Ph\\.D\\|\\bal\\|Mr\\|Mrs\\|[M]s\\|cf\\|[N]\\.B\\|[U]\\.N\\|[E]\\.R\\|[M]\\.C\\|[Vv]S\\|[Ii]\.e\\|\\.\\.\\)\\.[^.\n]*\\|E.R\\|\!\"[ ]*\\|\?\"[ ]*"
                 (- (point) 20)))))))

#+END_SRC 

** words to never upcase (always downcase)
#+BEGIN_SRC emacs-lisp
(setq auto-capitalize-words '("fn" "\bI\b" "setq" "iPhone" "IPad" "nil" "use" "ediff" "btw" "nyc" "file" "http" "provide" "load" "require" "alias" "looking-at" "blockquote" "http" "https" "eBay" "omg" "zk" "http" "https" "looking" "or" "youarehere"))
#+END_SRC

* org-links
** allow org-insert-link to accept mail addresses like 'Name <name@some.address>'?
#+BEGIN_SRC emacs-lisp
(advice-add #'org-remove-angle-brackets :before-until
            (lambda (s) (if (string-prefix-p "mailto:" s) s)))
#+END_SRC
source: [[http://emacs.stackexchange.com/questions/12743/how-to-allow-org-insert-link-to-accept-mail-addresses-like-name-namesome-addr][org mode - How to allow org-insert-link to accept mail addresses like 'Name <name@some.address>'? - Emacs Stack Exchange]]


* update packages
 (run-with-idle-timer 6000 t 'endless/upgrade)

* pop to mark
Handy way of getting back to previous places.

#+BEGIN_SRC emacs-lisp
;(setq set-mark-command-repeat-pop t)
#+END_SRC 

* Treat all themes as safe

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC


* key-seq
key-seq.el provides a way to map pairs of sequentially but quickly pressed keys to commands. It includes two interactive functions: key-seq-define-global and key-seq-define which are complementary to key-chord-* functions found in key-chord.el. The difference is that key-seq-* functions produce bindings only in a defined key order while bindings defined with key-chord-* are symmetrical.

#+BEGIN_SRC emacs-lisp
(use-package key-seq)
(key-seq-define-global "qd" 'dired)
(key-seq-define text-mode-map "qf" 'flyspell-buffer)

;; (key-seq-define-global "mn" 'new-email-from-subtree-no-signature)
;; (key-seq-define-global "nm" 'new-email-from-subtree-with-signature)

;; these got hit accidentally via typos

#+END_SRC

* org-toggle-heading-same-level

  #+BEGIN_SRC emacs-lisp
(defun org-toggle-heading-same-level ()
  "Toggles the current line between a non-heading and TODO heading."
  (interactive)
  (let ((is-heading))
    (save-excursion
      (forward-line 0)
      (when (looking-at "^\\*")
        (setq is-heading t)))
    (if is-heading
        (progn
          (org-todo 'none) ; remove TODO
          (org-toggle-heading)) ; remove heading
      (progn
        (org-toggle-heading) ; convert to heading
(org-do-promote)
;        (org-todo 'nextset)
)))) ; add TODO  #+END_SRC
#+END_SRC

* org-toggle-todo-heading

  #+BEGIN_SRC emacs-lisp
(defun org-toggle-todo-heading ()
  "Toggles the current line between a non-heading and TODO heading."
  (interactive)
  (let ((is-heading))
    (save-excursion
      (forward-line 0)
      (when (looking-at "^\\*")
        (setq is-heading t)))
    (if is-heading
        (progn
          (org-todo 'none) ; remove TODO
          (org-toggle-heading)) ; remove heading
      (progn
        (org-toggle-heading) ; convert to heading
(org-do-promote)
        (org-todo 'nextset))))) ; add TODO  #+END_SRC
#+END_SRC

* delete-extra-whitespace-region


  #+BEGIN_SRC emacs-lisp
(defun delete-extra-whitespace-region (beg end)
  "replace all whitespace in the region with single spaces"
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (while (re-search-forward "^\\s-+" nil t)
        (replace-match "")))))
  #+END_SRC

* double-line-breaks-in-region

  #+BEGIN_SRC emacs-lisp
(defun double-line-breaks-in-region (begin end)
  (interactive "r")
  (xah-replace-pairs-region begin end
 '(
 ["\r" "\n\n"]
["\n" "\n\n"]
)))
  #+END_SRC

* xah-replace-pairs

  #+BEGIN_SRC emacs-lisp
(use-package xah-replace-pairs)
(defun xah-convert-entities-to-html-chars-region (begin end)
  (interactive "r")
  (xah-replace-pairs-region begin end
 '(
 ["&" "&amp;"]
 ["<" "&lt;"]
 [">" "&gt;"]
 )))


(defun xah-convert-html-chars-to-entities-region (begin end)
 (interactive "r")
 (xah-replace-pairs-region begin end
 '(
 ["&amp;" "&"]
 ["&lt;" "<"]
 ["&gt;" ">"]
 )))

  #+END_SRC

* contract contractions
#+BEGIN_SRC emacs-lisp
(defun contract-contractions (begin end)
 (interactive "r")
 (xah-replace-pairs-region begin end
 '(
 ["do not" "don't"]
 ["I would" "I'd"]
 ["I had" "I'd"]
 ["did not" "didn't"]
 ["you would" "you'd"]
 ["I have" "I've"]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]

 )))
#+END_SRC

* Monochrome rainbows are the best way to reveal unbalanced delimiters
I rely and paredit and formatting to keep my parenthesis honest, and for the most part that works out great. Occasionally I need to go outside the box. Emacs defaults are terrible for finding unbalanced forms when things go wrong. This setting makes it obvious that there is an error when I have fallen out with my grouping delimiters.

The trick is to not use different colored delimiters! The reason I need the rainbow delimiters package is only to highlight unbalanced delimiters, which it does quickly and accurately. For those cases where I really want to differentiate a group, placing the cursor on the delimiter causes Emacs to highlight the other delimiter.

#+BEGIN_EXAMPLE emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
;; (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
(add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
(use-package rainbow-delimiters)
(set-face-attribute 'rainbow-delimiters-unmatched-face nil
                    :foreground 'unspecified
                    :inherit 'error)
#+END_EXAMPLE

* Chords
Emacs key-strokes are pretty gnarly. Especially for a VIM guy like me (Emacs evil-mode is the best VIM). Chords are so much more comfortable! For example I press j and x together instead of M-x. Just be careful when choosing chords that they are combinations you will never type normally. I mainly use chords for switching buffers, navigating windows, opening files, and transposing expressions.

* helm search current directory 

  #+BEGIN_SRC emacs-lisp
(defun helm-do-grep-current-directory-tree ()
  "Recursively search current directory.
If a parent directory has a `dir-locals-file', use that as the
root instead."
  (interactive)
  (let ((variables-file (dir-locals-find-file
                         (or (buffer-file-name) default-directory))))
    (helm-do-grep-1
     (list
      (cond
       ((stringp variables-file)
        (file-name-directory variables-file))
       ((consp variables-file)
        (nth 0 variables-file))
       (t default-directory)))
     t nil '("*"))))
  #+END_SRC


* contract-contractions


  #+BEGIN_SRC emacs-lisp

(defun contract-contractions (begin end)
(interactive "r")
  (xah-replace-pairs-region begin end
 '(
 ["I have" "I've"]
["I am" "I'm"] 
)))

  #+END_SRC

* fix double capitals
Source: [[http://endlessparentheses.com/fixing-double-capitals-as-you-type.html?source%3Drss][Fixing DOuble CApitals as you type · Endless Parentheses]]

  #+BEGIN_SRC emacs-lisp
(defun dcaps-to-scaps ()
  "Convert word in DOuble CApitals to Single Capitals."
  (interactive)
  (and (= ?w (char-syntax (char-before)))
       (save-excursion
         (and (if (called-interactively-p)
                  (skip-syntax-backward "w")
                (= -3 (skip-syntax-backward "w")))
              (let (case-fold-search)
                (looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
              (capitalize-word 1)))))

(add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)

(define-minor-mode dubcaps-mode
  "Toggle `dubcaps-mode'.  Converts words in DOuble CApitals to
Single Capitals as you type."
  :init-value nil
  :lighter (" DC")
  (if dubcaps-mode
      (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
    (remove-hook 'post-self-insert-hook #'dcaps-to-scaps 'local)))

(add-hook 'text-mode-hook #'dubcaps-mode)
(add-hook 'org-mode-hook #'dubcaps-mode)
  #+END_SRC

* yasnippet 
#+BEGIN_SRC emacs-lisp 


(use-package yasnippet 
:ensure t 
:bind 
("C-c e" . yas-load-snippet-buffer)
("." . insert-period)
:init
(yas-global-mode 1) 

:config 
;; load yasnippet directories
(setq yas-snippet-dirs '("~/emacs/interesting-snippets" "~/emacs/snippets"))

(add-hook 'yas-before-expand-snippet-hook (key-minor-mode nil))
(add-hook 'yas-after-exit-snippet-hook (key-minor-mode 1))



;; don't insert random spaces in my prose
(setq yas-indent-line (quote none)) 

;; take input word including hyphen.
(setq yas/key-syntaxes '("w_" "w_." "^ ")) ; default is '("w" "w_" "w_." "^ ")

;; suppress backquote warnings, whatever those are 
;; (add-to-list 'warning-suppress-types '(yasnippet backquote-change)) 
) 

(defun suppress-backquote-warnings ()
(interactive) 
(add-to-list 'warning-suppress-types '(yasnippet backquote-change)) 
  ) 
#+END_SRC

* fix yasnippet org-mode conflict
#+BEGIN_SRC emacs-lisp
(defun yas-org-very-safe-expand ()
   (let ((yas-fallback-behavior 'return-nil)) (yas-expand))) 

(add-hook 'org-mode-hook
     (lambda ()
      (make-variable-buffer-local 'yas--trigger-key)
      (setq yas-trigger-key [tab])
      (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
      (define-key yas-keymap [tab] 'yas-next-field))) 
#+END_SRC

* flyspell

** flyspell setup
#+BEGIN_SRC emacs-lisp
(use-package flyspell

:config
'(flyspell-abbrev-p t)
'(flyspell-use-global-abbrev-table-p t)
'(global-flyspell-mode t)

:bind
(:map flyspell-mode-map
("C-." . nil)
)
)

(setq flyspell-mark-duplications-exceptions
 (quote
 ((nil "that" "had" "really" "very" "much")
  ("\\`francais" "nous" "vous"))))

#+END_SRC

** flyspell skip source blocks

  #+BEGIN_SRC emacs-lisp
;; NO spell check for embedded snippets
(defadvice org-mode-flyspell-verify (after org-mode-flyspell-verify-hack activate)
  (let ((rlt ad-return-value)
        (begin-regexp "^[ \t]*#\\+begin_\\(src\\|html\\|latex\\)")
        (end-regexp "^[ \t]*#\\+end_\\(src\\|html\\|latex\\)")
        old-flag
        b e)
    (when ad-return-value
      (save-excursion
        (setq old-flag case-fold-search)
        (setq case-fold-search t)
        (setq b (re-search-backward begin-regexp nil t))
        (if b (setq e (re-search-forward end-regexp nil t)))
        (setq case-fold-search old-flag))
      (if (and b e (< (point) e)) (setq rlt nil)))
    (setq ad-return-value rlt)))
  #+END_SRC

* tiny-expand

#+BEGIN_SRC emacs-lisp 
(use-package tiny)
(tiny-setup-default) 

(defun new-week ()
  (interactive)
(tiny-expand "m0\n7|*** committed actions:  <%(date "mon" x)>\n**** TODO \n") 
  ) 



#+END_SRC 


* outline mode 
  #+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (make-local-variable 'outline-regexp)
            (setq outline-regexp "^;;; ")
            (make-local-variable 'outline-heading-end-regexp)
            (setq outline-heading-end-regexp ":\n")
            (outline-minor-mode 1)
))
  #+END_SRC

* which-key mode 
  #+BEGIN_SRC emacs-lisp
;; (require 'which-key)
;; (setq which-key-popup-type 'side-window) 
;; (setq which-key-side-window-location 'bottom) 
;; (which-key-mode)
  #+END_SRC 

* a keybinding to open my accountability file

  #+BEGIN_SRC emacs-lisp
;; (defun accountability-open ()
;;   (interactive)
;;   (find-file "/Users/jay/Dropbox/writing/notationaldata/accountability.org")
;;   )

;; (define-key key-minor-mode-map (kbd "<s-S-right>") 'accountability-open)

(defun warm-open ()
  (interactive)
  (find-file "/Users/jay/Dropbox/writing/notationaldata/fearless.org")
  )
(define-key key-minor-mode-map (kbd "<s-S-left>") 'playful-open)

  #+END_SRC

* dictionary look up

  #+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "/Users/jay/Downloads/dictionary-el-master")
  #+END_SRC


* re-builder

  #+BEGIN_SRC emacs-lisp
(use-package re-builder)
(setq reb-re-syntax 'string)
  #+END_SRC

* re-builder "Query Replace This"
[[http://echosa.github.io/blog/2012/06/26/re-builder-query-replace-this/][RE Builder “Query Replace This” - Dev and Such]]


#+BEGIN_SRC emacs-lisp
(defun reb-query-replace-this-regxp (replace)
 "Uses the regexp built with re-builder to query the target buffer.
This function must be run from within the re-builder buffer, not the target
buffer.

Argument REPLACE String used to replace the matched strings in the buffer.
 Subexpression references can be used (\1, \2, etc)."
 (interactive "sReplace with: ")
 (if (eq major-mode 'reb-mode)
   (let ((reg (reb-read-regexp)))
    (select-window reb-target-window)
    (save-excursion
     (beginning-of-buffer)
     (query-replace-regexp reg replace)))
  (message "Not in a re-builder buffer!")))

(define-key reb-mode-map "\C-c\M-%" 'reb-query-replace-this-regxp)
#+END_SRC

* stripe buffer 
  #+BEGIN_SRC emacs-lisp
;;(add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)

;; note that this slows everything down 
;; (add-hook 'org-mode-hook 'turn-on-stripe-table-mode)

  #+END_SRC

* email 

** mu4e 
*** mu4e setup
 #+BEGIN_SRC emacs-lisp 

(setq user-mail-address "jay@storytelling.nyc")
(setq user-full-name "Jay Dixit") 

(setq mu4e-user-mail-address-list '("sunjaydixit@gmail.com" "dixit@aya.yale.edu" "jay@jaydixit.com" "jay@storytelling.nyc"))

;; (let ((default-directory "/usr/local/share/emacs/site-lisp/")) (normal-top-level-add-subdirs-to-load-path)) 
; what is this?
(use-package smtpmail) 
(use-package mu4e)
(setq mu4e-mu-binary "/usr/local/bin/mu") 
(setq user-mail-address "jay@storytelling.nyc")
(setq mu4e-user-mail-address-list '("sunjaydixit@gmail.com" "dixit@aya.yale.edu" "jay@storytelling.nyc" "jay@jaydixit.com" "jay@newyorkwritersintensive.com" "jaydixit@neuroleadership.com"))
(setq user-full-name "Jay Dixit" )
(setq mu4e-maildir "/Users/jay/Dropbox/mu2")
(setq mu4e-compose-signature "\n---\nJay Dixit\n[[http://jaydixit.com/][jaydixit.com]]\n")


(setq mu4e-sent-folder "/sent")
(setq mu4e-drafts-folder "/drafts")
(setq mu4e-trash-folder "/trash") 
;; (setq mu4e-org-contacts-file "/Users/jay/nd/contacts-org-jay.txt")

(setq mu4e-get-mail-command "mbsync -a") 


;; (setq mu4e-mu-home "/Users/jay/Dropbox/mail/mu/gmail") 



;; display HTML email nicely
; (setq mu4e-html2text-command "w3m -T text/html")
;; works but better than the other one, html2text or whatever it's called 
;; convert html emails properly
;; Possible options:
;; ---html2text -utf8 -width 72
;; ---textutil -stdin -format html -convert txt -stdout
;; ---html2markdown | grep -v '&nbsp_place_holder;' (Requires html2text pypi)
;; ---w3m -dump -cols 80 -T text/html
;; ---view in browser (provided below)
; (setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")


  ;; convert org mode to HTML automatically
; (setq org-mu4e-convert-to-html t); I think this is redundant? Maybe?

  ;; need this to convert some e-mails properly
  (setq mu4e-html2text-command "html2text -utf8 -width 72")

;; collect email addresses
;; only add email addresses of email sent directly to me 
(setq mu4e-compose-complete-only-personal t)
(setq mu4e-compose-complete-only-after "2015-01-01")

;;(setq mu4e-contacts-func 'mu4e~fill-contacts)
;;(mu4e~proc-contacts t nil) 

;; composing mail
(setq mu4e-compose-dont-reply-to-self t)
(setq mu4e-compose-in-new-frame nil)
(setq mu4e-compose-signature-auto-include nil)

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; don't confirm before applying flags
(setq mu4e-headers-leave-behavior 'apply) 

;; allow for updating mail using 'U' in the main view:
;; (setq mu4e-get-mail-command "offlineimap")
(setq mu4e-get-mail-command "mbsync -a")
(setq mu4e-change-filenames-when-moving t)

(setq mu4e-attachment-dir "~/Downloads") 



;; show images
(setq mu4e-show-images t)

;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
 (imagemagick-register-types))


;; spell check
(add-hook 'mu4e-compose-mode-hook
 (defun my-do-compose-stuff ()
  "My settings for message composition."
  (set-fill-column 72)
  (flyspell-mode)
(turn-on-auto-capitalize-mode)
))

;; add option to view html message in a browser
;; `aV` in view to activate
(add-to-list 'mu4e-view-actions
 '("ViewInBrowser" . mu4e-action-view-in-browser) t)

;; fetch mail every 10 mins
(setq mu4e-update-interval 600)


;; Use fancy chars
(setq mu4e-use-fancy-chars t) 


(setq mu4e-confirm-quit nil
 mu4e-headers-date-format "%d/%b/%Y %H:%M" ; date format
 mu4e-html2text-command "html2text -utf8 -width 72"
 ) 

;; maildirs
;; (require 'mu4e-maildirs-extension)
;; (mu4e-maildirs-extension) 
;; (setq mu4e-maildirs-extension-title "Folders")

 #+END_SRC

*** mu4e keybindings 
 #+BEGIN_SRC emacs-lisp

;; shortcuts
(setq mu4e-maildir-shortcuts
'( 
("/gmail/starred" . ?i) 
("/nli/inbox" . ?l)
("/nywi/inbox" . ?n) 
("/gmail/sent" . ?s)))


;; (define-key mu4e-mode-map "r" 'mu4e-compose-reply)


;; start screen
(define-key mu4e-main-mode-map "r" 'mu4e-compose-reply) 
(define-key mu4e-main-mode-map "c" 'mu4e-compose-new) 
(define-key mu4e-main-mode-map "j" 'mu4e-update-mail-and-index)
(define-key mu4e-main-mode-map "g" 'mu4e~headers-jump-to-maildir)

;; inbox
(define-key mu4e-headers-mode-map "r" 'mu4e-compose-reply) 
(define-key mu4e-headers-mode-map "c" 'mu4e-compose-new) 
(define-key mu4e-headers-mode-map "y" 'mu4e-headers-mark-for-unflag) 
(define-key mu4e-headers-mode-map "j" 'mu4e-update-mail-and-index)
;; (local-unset-key mu4e-headers-mode-map "g" 'mu4e-update-mail-and-index) 
;; (define-key mu4e-headers-mode-map "k" 'mu4e-headers-prev)
;; (define-key mu4e-headers-mode-map "j" 'mu4e-headers-next)


;; message view ("mu4e-view-mode)")
(define-key mu4e-view-mode-map "r" 'mu4e-compose-reply) 
(define-key mu4e-view-mode-map "c" 'mu4e-compose-new) 
(define-key mu4e-view-mode-map "y" 'mu4e-view-mark-for-unflag) 
(define-key mu4e-view-mode-map "k" 'mu4e-view-headers-prev)
(define-key mu4e-view-mode-map "j" 'mu4e-view-headers-next)

(define-key mu4e-view-mode-map "g" 'mu4e-update-mail-and-index)



;; unset keys (worked!)
(add-hook 'mu4e-headers-mode-hook 
  (lambda ()
  (local-unset-key (kbd "<M-right>"))
  (local-unset-key (kbd "<M-left>"))
)) 

(add-hook 'mu4e-view-mode-hook 
  (lambda ()
  (local-unset-key (kbd "<M-right>"))
  (local-unset-key (kbd "<M-left>"))
)) 
 #+END_SRC

*** gmail emulation
#+BEGIN_SRC emacs-lisp
(defun archive-and-previous ()
  (interactive)
  (mu4e-view-mark-for-unflag)
(mu4e-view-headers-prev)
)


(defun archive-and-next ()
  (interactive)
  (mu4e-view-mark-for-unflag)
(mu4e-view-headers-next)
)

(define-key mu4e-view-mode-map "]" 'mu4e-view-headers-prev)
(define-key mu4e-view-mode-map "[" 'mu4e-view-headers-next)

#+END_SRC


*** mu4e attachments
 Wouldn't it be awesome to be able to send files from dired using your mail client?

 I'll need a special version of the gnus-dired-mail-buffers function so it understands mu4e buffers as well:

*** mu4e don't reply all
So talk about super hacky. I've spent a while and i've come up with something that works, even if it's far from being beautiful.

[[https://www.bountysource.com/issues/7054870-option-for-automatically-reply-to-sender-vs-reply-to-all][Option for automatically reply-to-sender vs. reply-to-all -]]

#+BEGIN_EXAMPLE emacs-lisp

;; The ...-false version is omitted because of verbosity, 
;; as is the pd:reply-to-all helper, which simply does the inverse.
(defun pd:reply-to-all-ask-intercept-true (orig-fun &rest args)
 ; true == reply to all. See mu4e~draft-user-wants-reply-all for inspiration,
 ; in mu/mu4e/mu4e-draft.el
 t)

(defun pd:reply-to-sender ()
 (interactive)
 (advice-remove 'mu4e~draft-user-wants-reply-all #'pd:reply-to-all-ask-intercept-true)
 (advice-add 'mu4e~draft-user-wants-reply-all :around #'pd:reply-to-all-ask-intercept-false)
 (mu4e-compose-reply)
 )

(define-key mu4e-headers-mode-map "r" 'pd:reply-to-sender) 
#+END_EXAMPLE

*** gmail starred 
The remaining problem is to propagate to Gmail that I've refiled 
(archived) a message. I also noticed that flagging a message in /mu4e/ 
doesn't immediately mean the message is starred on the Gmail side. With 
the recently added ~mu4e-mark-execute-pre-hook~ it becomes possible to 
whip Gmail into doing my bidding :) 

# #+BEGIN_SRC elisp 
(add-hook 'mu4e-mark-execute-pre-hook 
  (lambda (mark msg) 
  (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox")) 
   ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred")) 
   ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred"))))) 
# #+END_SRC 

I've been using this for about a week now and I'm rather liking this setup so far. 

It wasn't until after a couple of days that I realised this makes /mu4e/ 
more like Gmail than it was with me first setup, i.e. all email is in a 
single folder and I use searching exclusively to find stuff :-) 
Source: [[https://groups.google.com/forum/#!msg/mu-discuss/BpGtwVHMd2E/Wf1rJdx9DgAJ][Mu4e and Gmail, my current setup---Google Groups]]

*** mu4e contexts
#+BEGIN_SRC emacs-lisp

(setq mu4e-context-policy 'ask-if-none)
(setq mu4e-compose-context-policy 'ask-if-none)


(setq mu4e-contexts
 `( 

,(make-mu4e-context
	 :name "Sunjay E. Dixit"
	 :enter-func (lambda () 
(mu4e-message "Switch to sunjaydixit@gmail.com context")
;; switch to sendmail to send email through gmail 
(setq message-send-mail-function (quote message-send-mail-with-sendmail))
;; open my starred gmail maildir
(mu4e~headers-jump-to-maildir "/gmail/starred") 
)
:vars '
(
(user-mail-address . "jay@storytelling.nyc")
(mu4e-get-mail-command . "mbsync gmail") 
(mu4e-compose-signature .
		 ("\n---\nJay Dixit\n[[http://jaydixit.com/][jaydixit.com]]\n"))))


,(make-mu4e-context
	 :name "New York Writers Intensive"
	 :enter-func (lambda () (mu4e-message "Switch to New York Writers Intensive context")
;; switch to smtp-mail in order to change send-from address
(setq message-send-mail-function 'smtpmail-send-it
 smtpmail-stream-type 'starttls
 smtpmail-default-smtp-server "smtp.gmail.com"
 smtpmail-smtp-server "smtp.gmail.com"
;; smtpmail-auth-credentials '(("smtp.gmail.com" 587 "jay@storytelling.nyc" Nil))

smtpmail-auth-credentials (expand-file-name "~/.authinfo-nywi") 

 smtpmail-smtp-service 587) 
;; open my newyorkwritersintensive inbox
(mu4e~headers-jump-to-maildir "/nywi/inbox") 
)
	 ;; leave-fun not defined 
	 :vars '(
(user-mail-address . "jay@storytelling.nyc")
(mu4e-get-mail-command . "mbsync nywi") 
 ( mu4e-compose-signature .
		 ("Jay Dixit\nnewyorkwritersintensive.com\n")))) 


,(make-mu4e-context
	 :name "Leadership"
	 :enter-func (lambda () (mu4e-message "Switch to Leadership context")
;; switch to smtp-mail in order to change send-from address
(setq message-send-mail-function 'smtpmail-send-it
 smtpmail-stream-type 'starttls
 smtpmail-default-smtp-server "smtp.gmail.com"
 smtpmail-smtp-server "smtp.gmail.com"
smtpmail-auth-credentials (expand-file-name "~/.authinfo-nli")

smtpmail-smtp-service 587)
;; open my neuroleadership inbox
(mu4e~headers-jump-to-maildir "/nli/inbox")
)
	 ;; leave-fun not defined 
	 :vars '(
(user-mail-address . "jaydixit@neuroleadership.com")
(mu4e-get-mail-command . "mbsync nli")
 ( mu4e-compose-signature .
		 ("Jay Dixit\nneuroleadership.com\n"))))


))


;; change send-from address interactively 
(defun neuroleadership-compose ()
  (interactive)
  (setq message-send-mail-function 'smtpmail-send-it
 smtpmail-stream-type 'starttls
 smtpmail-default-smtp-server "smtp.gmail.com"
 smtpmail-smtp-server "smtp.gmail.com"
smtpmail-auth-credentials (expand-file-name "~/.authinfo-neuroleadership")
;; smtpmail-auth-credentials '(("smtp.gmail.com" 587 "jaydixit@neuroleadership.com" nil))
 smtpmail-smtp-service 587) 
(setq user-mail-address "jaydixit@neuroleadership.com")
(compose-mail)
)

;; change send-from address interactively 
(defun nywi-compose ()
 (interactive)
 (setq message-send-mail-function 'smtpmail-send-it
 smtpmail-stream-type 'starttls
 smtpmail-default-smtp-server "smtp.gmail.com"
 smtpmail-smtp-server "smtp.gmail.com"
smtpmail-auth-credentials (expand-file-name "~/.authinfo-nywi") 
;; smtpmail-auth-credentials '(("smtp.gmail.com" 587 "jay@storytelling.nyc" Nil))
 smtpmail-smtp-service 587) 
(setq user-mail-address "jay@storytelling.nyc")
(compose-mail)
)


;; change send-from address interactively 
(defun yale-compose ()
  (interactive)
  (setq message-send-mail-function (quote message-send-mail-with-sendmail)) 
(setq user-mail-address "jay@storytelling.nyc")
(compose-mail) 
  )

(defun yale-or-neuroleadership-compose (arg)
 (interactive "p")
 (if (and arg (= 0 (mod arg 4)))
   (neuroleadership-compose)
  (yale-compose)))
;; (global-set-key (kbd "C-c m") 'yale-or-neuroleadership-compose)


;; go straight to my personal gmail inbox; bound to s-l
(defun mu4e-gmail ()
 (interactive)
(mu4e)
 (mu4e~headers-jump-to-maildir "/gmail/starred")
 ) 

;; go to Neuroleadership (work) inbox
(defun mu4e-neuroleadership ()
 (interactive)
(mu4e)
 (mu4e~headers-jump-to-maildir "/nli/inbox")
 ) 

;; go to NYWI (my company) inbox
(defun mu4e-nywi ()
 (interactive)
(mu4e)
 (mu4e~headers-jump-to-maildir "/nywi/inbox")
 ) 



(defun mu4e-context-label ()
 "Propertized string with the current context name, or \"\" if
 there is none."
 (if (mu4e-context-current)
  (concat "[" (propertize (mu4e~quote-for-modeline
			   (mu4e-context-name (mu4e-context-current)))
		 'face 'mode-line-buffer-id) "]") "")) 

#+END_SRC


*** mu4e-send-delay 
#+BEGIN_SRC emacs-lisp
(require 'mu4e-send-delay) 
(mu4e-send-delay-setup) 
(add-hook 'mu4e-main-mode-hook 'mu4e-send-delay-initialize-send-queue-timer) 
#+END_SRC


** org-contacts

  #+BEGIN_SRC emacs-lisp
(use-package org-contacts) 
;; (require 'org-vcard)
(setq org-contacts-files (quote ("/Users/jay/nd/contacts-org-jay.txt")))



  #+END_SRC

*** Maintaining an address-book with org-contacts

Note, mu4e supports built-in address autocompletion; Address autocompletion, and that is the recommended way to do this. However, it is also possible to manage your addresses with org-mode, using org-contacts41.

mu4e-actions defines a useful action (Actions) for adding a contact based on the From:-address in the message at point. To enable this, add to your configuration something like:

#+BEGIN_SRC emacs-lisp
(setq mu4e-org-contacts-file "/Users/jay/nd/contacts-org-jay.txt")
(add-to-list 'mu4e-headers-actions
 '("org-contact-add" . mu4e-action-add-org-contact) t)
(add-to-list 'mu4e-view-actions
 '("org-contact-add" . mu4e-action-add-org-contact) t) 
#+END_SRC

After this, you should be able to add contacts using a o in the headers view and the message view, using the org-capture mechanism. Note, the shortcut character o is due to the first character of org-contact-add.



** html reply---doesn't work yet 
#+BEGIN_SRC emacs-lisp
(defvar *gt-div-style* "border-left: 1px solid #CCC; padding-left: 16px;")

(defun org-mime-replace-multy-gt ()
(interactive)
(beginning-of-buffer)
(while (re-search-forward "\\(\\(^&gt;\\( *.*\\)?\n\\)+\\)" nil t)
(replace-match (concat "<div style='" *gt-div-style* "'>\n"
(replace-regexp-in-string "^&gt; ?" "" (match-string 1))
"</div> \n\n"))
(beginning-of-buffer))) 



(add-hook 'org-mime-html-hook
(lambda ()
(org-mime-replace-multy-gt))) 
#+END_SRC 





*** new-email-from-subtree-with-signature 

#+BEGIN_SRC emacs-lisp 

(defun new-email-from-subtree-with-signature ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
 ; store location.
(widen)
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO (org-entry-get (point) "TO" t))
     (CC (org-entry-get (point) "CC" t))
     (BCC (org-entry-get (point) "BCC" t))
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
(end-of-buffer)
(insert "\nWarm regards,\nJay Dixit\n\n---\nJay Dixit
(646) 355-8001
[[http://jaydixit.com/][jaydixit.com]]
\n")
(message-goto-to))
))


(defun new-email-from-subtree-no-signature ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
(widen)
 ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO (org-entry-get (point) "TO" t))
     (CC (org-entry-get (point) "CC" t))
     (BCC (org-entry-get (point) "BCC" t))
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
;; (end-of-buffer)
)
))
#+END_SRC

*** erika-send-mail
#+BEGIN_SRC emacs-lisp
(defun erika-send-email ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "\"Erika Casriel\" <erika.casriel@comcast.net>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>") 
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
) 
))
#+END_SRC

**** erika-send-email-styled

#+BEGIN_SRC emacs-lisp
(defun erika-send-email-styled ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Erika Casriel <erika.casriel@comcast.net>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))



   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")

(goto-char (point-min))
          (org-mime-change-class-style "todo STARTED" "color:red;font-weight:bold")

        (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min)) 

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)
#+END_SRC

**** adrien-send-email-styled 

#+BEGIN_SRC emacs-lisp
(defun adrien-send-email-styled ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Adrien Behn <adrien.behn@gmail.com>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))



   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")

(goto-char (point-min))
          (org-mime-change-class-style "todo STARTED" "color:red;font-weight:bold")

        (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min)) 

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)
#+END_SRC

**** erika-send-email-test---clone of erika-send-email-styled
This function should be kept exactly the same as the one above, except the emails should go only to myself or Rúdi. Used for testing purposes.

#+BEGIN_SRC emacs-lisp
(defun erika-send-email-test ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Erika Casriel <sunjaydixit@gmail.com>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <sunjaydixit@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min)) 

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)
#+END_SRC


** Automatic send email to myself

#+BEGIN_SRC emacs-lisp
(defun email-heading-to-me ()
  "Send the current org-mode heading as the body of an email, with headline
as the subject."
  (interactive)
  (save-excursion
    (org-mark-subtree)
    (let ((content (buffer-substring (point) (mark)))
          (SUBJECT (nth 4 (org-heading-components))))

      (compose-mail "your@email.here" SUBJECT)
      (message-goto-body)
      (insert content)
      (message-send)
      (message-kill-buffer))))
#+END_SRC

** fixup-css-region

  #+BEGIN_SRC emacs-lisp
(defun fixup-css-region (begin end)
(interactive "r")
  (xah-replace-pairs-region begin end
                          '(["h2" "li"]
["<span class=\"todo DONE\">" "<span class=\"todo DONE\" style=\"color:green;font-weight:bold\">"]

["<span class=\"todo MISSED\">" "<span class=\"todo MISSED\" style=\"color:red;font-weight:bold\">"]

["<span class=\"todo TODO\">" "<span class=\"todo TODO\" style=\"color:red;font-weight:bold\">"]

))
)
  #+END_SRC


* poetry
(define-key key-minor-mode-map (kbd "s-}") 'poetry-rhyme-word)

* TODO unbind orgstruct navigation keys 

  #+BEGIN_SRC emacs-lisp 
(defun unbind-orgstruct-keys ()
  (interactive)
       (cl-dolist (map '(message-mode-map orgstruct-mode-map))
  (cl-dolist (key '("S-<right>" "S-<left>" "S-<down>" "S-<up>" "<M-S-left>" "<M-S-right>" "<M-S-up>" "<M-S-down>"
                    "<M-left>" "<M-right>" "<M-up>" "<M-down>"))
    (define-key (eval map) (kbd key) nil)))
  )

(defun unbind-orgstruct-keys-in-message-mode ()
  (interactive)
  (when (and (eq 'message-mode major-mode)
             (bound-and-true-p orgstruct-mode))
    (unbind-orgstruct-keys)))

(defun unbind-orgstruct-keys-in-mu4e-compose-mode ()
 (interactive)
 (when (and (eq 'mu4e-compose-mode major-mode)
       (bound-and-true-p orgstruct-mode))
  (unbind-orgstruct-keys)))


(add-hook 'orgstruct-mode-hook 'unbind-orgstruct-keys-in-message-mode)
(add-hook 'orgstruct-mode-hook 'unbind-orgstruct-keys-in-mu4e-compose-mode)



;;(add-hook 'message-mode-hook 'unbind-orgstruct-keys)
  #+END_SRC


* If you want Emacs to treat all new files as modified, you can automate the solution like this:


  #+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hooks 'assume-new-is-modified)
(defun assume-new-is-modified ()
  (when (not (file-exists-p (buffer-file-name)))
    (set-buffer-modified-p t))) 
  #+END_SRC

Here's an adaptation of dired-create-directory. It works the same way, so as well as a plain filename, you can also specify new parent directories (to be created under the current directory) for the file (e.g. foo/bar/filename).


#+BEGIN_SRC emacs-lisp


       (defun my-dired-create-file (file)
         "Create a file called FILE.
  If FILE already exists, signal an error."
         (interactive
          (list (read-file-name "Create file: " (dired-current-directory))))
         (let* ((expanded (expand-file-name file))
                (try expanded)
                (dir (directory-file-name (file-name-directory expanded)))
                new)
           (if (file-exists-p expanded)
               (error "Cannot create file %s: file exists" expanded))
           ;; Find the topmost nonexistent parent dir (variable `new')
           (while (and try (not (file-exists-p try)) (not (equal new try)))
             (setq new try
                   try (directory-file-name (file-name-directory try))))
           (when (not (file-exists-p dir))
             (make-directory dir t))
           (write-region "" nil expanded t)
           (when new
             (dired-add-file new)
             (dired-move-to-filename))))
#+END_SRC

Although I've specified a user-reserved binding in the code, I've actually bound this to _ which on my keyboard layout is the shifted sequence next to +, meaning the keys for "new directory" and "new file" in dired are right next to one another.

* olivetti
  #+BEGIN_SRC emacs-lisp
(use-package olivetti

:config
(setq olivetti-body-width 120)
(unbind-key (kbd "C-c [") olivetti-mode-map)
(unbind-key (kbd "C-c ]") olivetti-mode-map)
(setq org-tags-column 40)
)

(add-hook 'olivetti-mode-hook 'turn-on-visual-line-mode)


(add-hook 'message-mode-hook 'turn-on-olivetti-mode 'append)
(add-hook 'emacs-lisp-mode-hook 'turn-on-olivetti-mode)
(add-hook 'css-mode-hook 'turn-on-olivetti-mode)
(add-hook 'sh-mode-hook 'turn-on-olivetti-mode)
(add-hook 'web-mode-hook 'turn-on-olivetti-mode)


  #+END_SRC


* access config files
#+BEGIN_SRC emacs-lisp
(defun load-shared-functions ()
  (interactive)
(find-file "/Users/jay/emacs/emacs-settings/shared-functions.org"))

(defun load-gnu-startup ()
  (interactive)
(find-file "/Users/jay/emacs/emacs-settings/gnu-emacs-startup.org")) 

(defun open-abbrevs ()
  (interactive)
(find-file "/Users/jay/emacs/aquamacs-jay/.abbrev_defs")) 

#+END_SRC


M-p
C-x y
C-x x
C-x w
C-x t
C-x j
C-c z
C-c x
C-c q



* org-agenda skip keywords

  #+BEGIN_SRC emacs-lisp
;; (setq org-agenda-custom-commands '(org-agenda-skip-function 'org-agenda-skip-regexp-if 'todo '("MISSED" "COMMITTED" "RESULTS"))) 


  #+END_SRC 

* org-ellipsis

  #+BEGIN_SRC emacs-lisp
;; (setq org-ellipsis " ◦◦◦ ") 
;; (set-face-attribute org-ellipsis '(((:background "white" :underline nil))))

;; (setq org-ellipsis "⤵")
;; other interesting characters are ▼, ↴, ⬎, ⤷, and ⋱ 

(setq org-ellipsis "…")
  #+END_SRC


* embolden-region-or-point
#+BEGIN_SRC emacs-lisp
(defun embolden-region-or-point ()
  (interactive)
  (if (region-active-p)
      (progn
        (goto-char (region-end))
        (insert "*")
        (goto-char (region-beginning))
        (insert "*"))
    (insert "**")
    (backward-char)))

(define-key key-minor-mode-map (kbd "M-s-b") 'embolden-region-or-point)
#+END_SRC


* italicize-region-or-point
#+BEGIN_SRC emacs-lisp
(defun italicize-region-or-point ()
  (interactive)
  (if (region-active-p)
      (progn
        (goto-char (region-end))
        (insert "/")
        (goto-char (region-beginning))
        (insert "/"))
(insert "//")
    (backward-char)))

(define-key key-minor-mode-map (kbd "<C-i>") 'italicize-region-or-point)
#+END_SRC



* org todo stuff
** move point to next TODO heading upon DONE state change 

   #+BEGIN_SRC emacs-lisp 
(defun bb/next-heading (&rest args) 
(when 

(or
(org-entry-is-done-p) 
(string= (org-get-todo-state) "MISSED") 
)
(outline-next-visible-heading 1))) 



(advice-add 'org-todo :after 'bb/next-heading) 
   #+END_SRC


** Check checkbox then automatically move to next item in list ([[http://superuser.com/questions/568482/org-mode-function-to-check-checkbox-and-move-to-next-in-list#][Source]]):
 #+BEGIN_EXAMPLE emacs-lisp
(defmacro my/with-advice (adlist &rest body)
  "Execute BODY with temporary advice in ADLIST.

Each element of ADLIST should be a list of the form
  (SYMBOL WHERE FUNCTION [PROPS])
suitable for passing to `advice-add'.  The BODY is wrapped in an
`unwind-protect' form, so the advice will be removed even in the
event of an error or nonlocal exit."
  (declare (debug ((&rest (&rest form)) body))
           (indent 1))
  `(progn
     ,@(mapc (lambda (adform)
                 (cons 'advice-add adform))
               adlist)
     (unwind-protect (progn ,@body)
       ,@(mapc (lambda (adform)
                   `(advice-remove ,(car adform) ,(nth 2 adform)))
                 adlist))))

(defun my/org-checkbox-toggle-advice (orig-fn &rest args)
  "Advice to move to next list item on checkbox toggle."
  (my/with-advice 
      ((#'org-update-checkbox-count-maybe 
        :after (lambda ()
                 (ignore-errors (org-next-item)))))
    (apply orig-fn args)))

(advice-add #'org-ctrl-c-ctrl-c   :around #'my/org-checkbox-toggle-advice)
(advice-add #'org-toggle-checkbox :around #'my/org-checkbox-toggle-advice)
 #+END_EXAMPLE 

** a temporary hack
#+BEGIN_SRC emacs-lisp
(defun zin/org-checkbox-next ()
 (interactive)
 (when (org-at-item-checkbox-p)
 (org-toggle-checkbox))
 (org-next-item)) 
#+END_SRC

* multiple cursors

** endless multiple cursors keybindings
  #+BEGIN_SRC emacs-lisp
(use-package multiple-cursors) 
(use-package multiple-cursors-core)
;; This is globally useful, so it goes under `C-x', and `m'
;; for "multiple-cursors" is easy to remember.
(define-key ctl-x-map "\C-m" #'mc/mark-all-dwim)
;; Usually, both `C-x C-m' and `C-x RET' invoke the
;; `mule-keymap', but that's a waste of keys. Here we put it
;; _just_ under `C-x RET'.
(define-key ctl-x-map (kbd "<return>") mule-keymap)

;; Remember `er/expand-region' is bound to M-2!
;; (define-key key-minor-mode-map (kbd "M-#") 'mc/mark-all-dwim)
;; (global-set-key (kbd "M-2") #'mc/mark-all-dwim)
(define-key key-minor-mode-map (kbd "M-2") 'mc/mark-all-dwim)

;; (global-set-key (kbd "M-3") #'mc/mark-next-like-this)
;; (global-set-key (kbd "M-4") #'mc/mark-previous-like-this)
(define-key key-minor-mode-map (kbd "C-3") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-M-3") #'mc/unmark-previous-like-this)

(define-key key-minor-mode-map (kbd "C-4") 'mc/mark-next-like-this)
(global-set-key (kbd "C-M-4") #'mc/unmark-next-like-this)

(define-prefix-command 'endless/mc-map)
(define-key ctl-x-map "m" 'endless/mc-map)
(define-key key-minor-mode-map (kbd "C-8") 'endless/mc-map)

;;; Really really nice!
(define-key endless/mc-map "i" #'mc/insert-numbers)
(define-key endless/mc-map "h" #'mc-hide-unmatched-lines-mode)
(define-key endless/mc-map "a" #'mc/mark-all-like-this)

(global-set-key (kbd "s-<mouse-1>") 'mc/add-cursor-on-click) 


;;; Occasionally useful
(define-key endless/mc-map (kbd "<backspace>") 'delete-backward-char) 
(define-key endless/mc-map "d" #'mc/mark-all-symbols-like-this-in-defun)
(define-key endless/mc-map "r" #'mc/reverse-regions)
(define-key endless/mc-map "s" #'mc/sort-regions)
(define-key endless/mc-map "l" #'mc/edit-lines)
(define-key endless/mc-map "\C-a"
  #'mc/edit-beginnings-of-lines)
(define-key endless/mc-map "\C-e"
  #'mc/edit-ends-of-lines)

(setq mc/always-run-for-all t)
;; always run for all cursors

(setq mc/insert-numbers-default 1)
;; start counting from 0

(global-set-key
 (kbd "C-2")

(defhydra multiple-cursors-hydra (:hint nil)
 "
   ^Up^      ^Down^    ^Other^
----------------------------------------------
[_p_]  previous  [_n_]  next  [_l_] Edit lines
[_P_]  Skip  [_N_]  Skip  [_a_] Mark all
[_M-p_] Unmark [_M-n_] Unmark [_r_] Mark by regexp
[_h_] Hide unmatched lines
^ ^       ^ ^       [_q_] Quit
"
 ("l" mc/edit-lines :exit t)
 ("a" mc/mark-all-like-this :exit t)
 ("n" mc/mark-next-like-this)
 ("N" mc/skip-to-next-like-this)
 ("M-n" mc/unmark-next-like-this)
 ("p" mc/mark-previous-like-this)
 ("P" mc/skip-to-previous-like-this)
 ("M-p" mc/unmark-previous-like-this)
 ("h" mc/hide-unmatched-lines-mode)
;; don't know why this doesn't work
 ("r" mc/mark-all-in-region-regexp :exit t)
 ("q" nil)) )

  #+END_SRC


** multiple-cursors-mode-map
#+BEGIN_SRC emacs-lisp
 (define-key mc/keymap (kbd ".") 'insert-period)
 (define-key mc/keymap (kbd ",") 'insert-comma)
 (define-key mc/keymap (kbd "SPC") 'insert-space)
(define-key mc/keymap (kbd "<return>") 'smart-return)
(define-key mc/keymap (kbd "<backspace>") 'my/delete-backward)
#+END_SRC





* wrap region

  #+BEGIN_SRC emacs-lisp
;; (require 'wrap-region)
;; (wrap-region-add-wrapper "*" "*" "*")
;; (wrap-region-add-wrapper "\/" "\/" "\/")
;; (add-hook 'org-mode-hook 'wrap-region-mode)

;; wrap-region
(use-package wrap-region
  :ensure t
  :config
(wrap-region-add-wrapper "\n#+BEGIN_QUOTE\n" "\n#+END_QUOTE\n" ";")

(defun wrap-region-define-wrappers ()
  "Defines defaults wrappers."
  (mapc
   (lambda (pair)
     (apply 'wrap-region-add-wrapper pair))
   '(
;; ("\"" "\"")
     ;; ("'"  "'")
     ;; ("("  ")")
     ("{"  "}")
     ;; ("["  "]")
     ("<"  ">"))))


  (wrap-region-add-wrappers
   '(
;;     ("*" "*" nil org-mode)
;;     ("/" "/" nil org-mode)
;; ("\"" "\"" nil org-mode)
     ("~" "~" nil org-mode)
     ("_" "_" nil org-mode)
     ("*" "*" nil (org-mode message-mode))
     ("/" "/" nil (org-mode message-mode))
      ("$" "$" nil (org-mode latex-mode))
      ))
  (add-hook 'org-mode-hook 'wrap-region-mode)
  (add-hook 'latex-mode-hook 'wrap-region-mode))
  #+END_SRC
Source: [[http://pragmaticemacs.com/emacs/wrap-text-in-custom-characters/][Wrap text in custom characters | Pragmatic Emacs]]


* faces 
** bold

   #+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(bold ((t (:inherit font-lock-warning-face :weight bold))))
)
   #+END_SRC


** god mode

   #+BEGIN_EXAMPLE emacs-lisp
;; (require 'god-mode) 
(defun my-update-cursor ()
  (setq cursor-type (if (or god-local-mode buffer-read-only)
                        'bar
                      'box)))

;; (add-hook 'god-mode-enabled-hook 'my-update-cursor)
;; (add-hook 'god-mode-disabled-hook 'my-update-cursor)


             (require 'god-mode-isearch)
(define-key isearch-mode-map (kbd "<escape>") 'god-mode-isearch-activate)
(define-key god-mode-isearch-map (kbd "<escape>") 'god-mode-isearch-disable)
(define-key god-local-mode-map (kbd ".") 'repeat)


   #+END_EXAMPLE

** C-c C-c to exit source code blocks

   #+BEGIN_SRC emacs-lisp
(eval-after-load 'org-src
  '(define-key org-src-mode-map
     "\C-c\C-c" #'org-edit-src-exit))
   #+END_SRC


** narrow or widen

   #+BEGIN_SRC emacs-lisp
(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or defun,
whichever applies first. Narrowing to org-src-block actually
calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is
already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if you
         ;; don't want it.
         (cond ((ignore-errors (org-edit-src-code))
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))
   #+END_SRC


** org go speed

; Speed commands are really useful, but I often want to make use of
; them when I'm not at the beginning of a header. This command brings
; you back to the beginning of an item's header, so that you can do
; speed commands.

(defun org-go-speed ()
  "Goes to the beginning of an element's header, so that you can
execute speed commands."
  (interactive)
  (when (equal major-mode 'org-mode)
    (if (org-at-heading-p)
        (org-beginning-of-line)
      (org-up-element))))

; bind-key comes from Use Package
(bind-key "C-c s" 'org-go-speed) 

(global-set-key "\M-9" 'backward-sexp)
(global-set-key "\M-0" 'forward-sexp) 


** org insert easy template source blocks 
   #+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
'("p" "#+BEGIN_SRC python\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>") )

(add-to-list 'org-structure-template-alist
'("a" "#+BEGIN_LaTeX\n?\n#+END_LaTeX"  "<literal style=\"latex\">\n?\n</literal>") )

(add-to-list 'org-structure-template-alist
'("f" "#+BEGIN_EXPORT fountain\n?\n#+END_EXPORT" "<src lang=\"fountain\">\n?\n</src>"))

(add-to-list 'org-structure-template-alist
'("hh" "#+BEGIN_HTML\n?\n#+END_HTML" "<src lang=\"HTML\">\n?\n</src>") )

(add-to-list 'org-structure-template-alist
'("l" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>"))

(add-to-list 'org-structure-template-alist
'("le" "#+BEGIN_EXAMPLE emacs-lisp\n?\n#+END_EXAMPLE" "<src lang=\"emacs-lisp\">\n?\n</src>")) 

#+END_SRC

Source: [[http://emacs.stackexchange.com/questions/12841/quickly-insert-source-blocks-in-org-mode][org babel - Quickly insert source blocks in org mode - Emacs Stack Exchange]]




* if then else indentation
#+BEGIN_SRC 
(put 'if 'lisp-indent-function nil) 
#+END_SRC 


* convert from org-mode to Word
#+BEGIN_SRC emacs-lisp
;; This setup is tested on Emacs 24.3 & Emacs 24.4 on Linux/OSX
;; org v7 bundled with Emacs 24.3
(setq org-export-odt-preferred-output-format "doc")
;; org v8 bundled with Emacs 24.4
(setq org-odt-preferred-output-format "doc")
;; BTW, you can assign "pdf" in above variables if you prefer PDF format

;; Only OSX need below setup
(defun my-setup-odt-org-convert-process ()
  (interactive)
  (let ((cmd "/Applications/LibreOffice.app/Contents/MacOS/soffice"))
    (when (and (eq system-type 'darwin) (file-exists-p cmd))
      ;; org v7
      (setq org-export-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i")))
      ;; org v8
      (setq org-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i"))))
    ))
(my-setup-odt-org-convert-process) 
#+END_SRC

Source: [[http://blog.binchen.org/posts/how-to-take-screen-shot-for-business-people-efficiently-in-emacs.html][How to take screen shot for business people efficiently in Emacs | Chen's blog]]

2.4 Tips

If you need page break in exported document, insert below snippet into the org file:

#+ODT: <text:p text:style-name="PageBreak"/> 

* Create org file and insert path of screen shot 
#+BEGIN_SRC emacs-lisp
(defun insert-file-link-from-clipboard ()
  "Make sure the full path of file exist in clipboard. This command will convert
The full path into relative path and insert it as a local file link in org-mode"
  (interactive)
  (let (str)
    (with-temp-buffer
      (shell-command
       (cond
        ((eq system-type 'cygwin) "getclip")
        ((eq system-type 'darwin) "pbpaste")
        (t "xsel -ob"))
       1)
      (setq str (buffer-string)))

    ;; convert to relative path (relative to current buffer) if possible
    (let ((m (string-match (file-name-directory (buffer-file-name)) str) ))
      (when m
        (if (= 0 m )
            (setq str (substring str (length (file-name-directory (buffer-file-name)))))
          ))
        (insert (format "[[file:%s]]" str)))
    )) 
#+END_SRC


* unbind meta-number

This unbinds M-1, M-2, ..., M-0, which I very rarely used (I use C-u for count arguments) and I suddenly found myself with 10 new shortcuts that are easy to type (especially M-1, M-2 and M-3). You can also use them as prefixes, so for example M-1 r could be ivy-recentf and M-1 s could be swiper.

I hope this is somewhat helpful to someone else, happy hacking! Source: [[https://www.reddit.com/r/emacs/comments/3ricev/tip_for_when_you_are_running_out_of_easytopress/][Tip for when you are running out of easy-to-press key shortcuts : emacs]]

#+BEGIN_SRC emacs-lisp
(dotimes (n 10)
  (global-unset-key (kbd (format "M-%d" n))))
#+END_SRC

* key chords

Hydras and key-chords.
q is a good candidate for chords, since in words it has u after, and only a few letters ever come before a q. so I tap my two pinkie-fingers on qp to summon a project(ile)-related hydra.

[[https://github.com/abo-abo/hydra][abo-abo/hydra]]


* hydras experiments


#+BEGIN_EXAMPLE emacs-lisp
(defhydra email (global-map "s-]")
 "email"
 ("a" erika-send-email)
 ("i" notmuch "inbox")
 ("n" new-email-from-subtree-no-signature "new-email-from-subtree-no-signature")
 ("s" new-email-from-subtree-with-signature "new-email-from-subtree-with-signature")
)


(defhydra hydra-zoom (global-map "s-[")
 "email"
 ("e" erika-send-mail)
 ("n" notmuch)
)


#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp


(global-set-key
 (kbd "C-p")
(defhydra hydra-move-previous
   (:body-pre (previous-line))
   "move" 
("p" previous-line) 
("n" next-line)
("k" my/kill-line-dwim)
   ("f" forward-char)
   ("b" backward-char)
   ("a" beginning-of-line)
   ("e" move-end-of-line)
   ("v" scroll-up-command)
   ;; Converting M-v to V here by analogy.
   ("V" scroll-down-command)
   ("l" recenter-top-bottom)))



(global-set-key
 (kbd "C-n")
(defhydra hydra-move-next
   (:body-pre (next-line))
   "move"
   ("n" next-line)
   ("p" previous-line)
   ("k" my/kill-line-dwim)
   ("f" forward-char)
   ("b" backward-char)
   ("a" beginning-of-line)
   ("e" move-end-of-line)
   ("v" scroll-up-command)
   ;; Converting M-v to V here by analogy.
   ("V" scroll-down-command)
   ("l" recenter-top-bottom)))




(global-set-key
 (kbd "s-n")
(defhydra accountability-move
   (:body-pre (next-line))
   "move"
   ("n" org-next-visible-heading)
   ("p" org-previous-visible-heading)
   ("k" org-cut-subtree)
   ("f" forward-char)
   ("b" backward-char)
   ("d" org-todo)
   ("m" (lambda nil (interactive) (org-todo "MISSED")))
   ("e" move-end-of-line)
   ("v" scroll-up-command)
   ;; Converting M-v to V here by analogy.
   ("V" scroll-down-command)
   ("l" recenter-top-bottom)
))



#+END_SRC

Projectile hydra [[https://github.com/abo-abo/hydra/wiki/Projectile][Projectile · abo-abo/hydra Wiki]]


* hydra helm
#+BEGIN_SRC emacs-lisp
(defhydra hydra-helm (:hint nil :color pink)
	"
									  ╭──────┐
   Navigation   Other  Sources     Mark             Do             Help   │ Helm │
  ╭───────────────────────────────────────────────────────────────────────┴──────╯
	^_k_^         _K_       _p_   [_m_] mark         [_v_] view         [_H_] helm help
	^^↑^^         ^↑^       ^↑^   [_t_] toggle all   [_d_] delete       [_s_] source help
    _h_ ←   → _l_     _c_       ^ ^   [_u_] unmark all   [_f_] follow: %(helm-attr 'follow)
	^^↓^^         ^↓^       ^↓^    ^ ^               [_y_] yank selection
	^_j_^         _J_       _n_    ^ ^               [_w_] toggle windows
  --------------------------------------------------------------------------------
	"
	("<tab>" helm-keyboard-quit "back" :exit t)
	("<escape>" nil "quit")
	("\\" (insert "\\") "\\" :color blue)
	("h" helm-beginning-of-buffer)
	("j" helm-next-line)
	("k" helm-previous-line)
	("l" helm-end-of-buffer)
	("g" helm-beginning-of-buffer)
	("G" helm-end-of-buffer)
	("n" helm-next-source)
	("p" helm-previous-source)
	("K" helm-scroll-other-window-down)
	("J" helm-scroll-other-window)
	("c" helm-recenter-top-bottom-other-window)
	("m" helm-toggle-visible-mark)
	("t" helm-toggle-all-marks)
	("u" helm-unmark-all)
	("H" helm-help)
	("s" helm-buffer-help)
	("v" helm-execute-persistent-action)
	("d" helm-persistent-delete-marked)
	("y" helm-yank-selection)
	("w" helm-toggle-resplit-and-swap-windows)
	("f" helm-follow-mode))
#+END_SRC
[[https://github.com/abo-abo/hydra/wiki/Helm-2][Helm 2 · abo-abo/hydra Wiki]]



* fontify list titles
#+BEGIN_SRC emacs-lisp

;; define list-title face
(defface list-title-face
  '((t (:foreground "red" :weight bold)))
  "fontify list titles")

;; define heading-title face
(defface heading-title-face
  '((t (:foreground "red" :weight bold)))
  "fontify heading titles")


;; define anki-clozure face
(defface anki-clozure-face
  '((t (:foreground "red" :weight bold)))
  "fontify anki clozures")


(font-lock-add-keywords 'org-mode
                        '(
			  ;; ("^.*:[ ]*$" . 'list-title-face) ; fontify any line that ends with a colon
                          ("^Q\\(UESTION\\|uestion\\):" . 'list-title-face) ; fontify "Question:" and "QUESTION:"

			  ("^[A-Za-z]+:" . 'list-title-face); fontify any word followed by a colon if it begins the line

			  ;; ("^\\*+[ ]*[a-Za-z]+:" . 'heading-title-face); fontify any heading that starts with a word followed by a colon. But how to make this face supersede the other one?
                          )
                        )



#+END_SRC

** and on export
#+BEGIN_SRC emacs-lisp

;; old code (works for HTML export, breaks http links)
;; (add-hook 'org-export-before-parsing-hook (lambda (backend) (replace-regexp "^[A-Za-z]+:" "*\\&*"))) 

(add-hook 'org-export-before-parsing-hook (lambda (backend) (replace-regexp "^\\([A-Za-z]+:\\)\\([^/]\\|/[^/]\\|$\\)" "*\\1*\\2"))) 

;; (add-hook 'org-export-before-parsing-hook (lambda (backend) (replace-regexp "^\\(.*:\\)[ ]*$" "*\\1*")))
 ;; any line that ends with a colon


#+END_SRC

* downcase-or-endless-downcase
#+BEGIN_SRC emacs-lisp
(defun downcase-or-endless-downcase ()
(interactive)
(if

; If
(or
(looking-back "\\.\\.\\.[ ]*[\n\t ]*") 
(looking-back "i.e.[ ]*") 
(looking-back "[0-9]\.[ ]*") 
(looking-back "e.g.[ ]*") 
(looking-back "vs.[ ]*") 
(looking-back "U.K.[ ]*")
(looking-back "U.S.[ ]*")
(looking-back "vs.[ ]*")
(looking-back "^")
)
    (call-interactively 'downcase-word); then
    (call-interactively 'endless/downcase); else

)
)
#+END_SRC


* use dired for directory links
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-file-apps '(directory . emacs)) 
#+END_SRC

Alternatively you can modify the link description as follows:
#+BEGIN_SRC

[[file+emacs:~/projects][Projects]]

Use this notation in the org mode to create a link:

[[/path/to/file.php::line][string-to-display]]
If you want the file name to be displayed, use just

[[/path/to/file.php::line]]


#+END_SRC

It will open the link in Emacs with typing C-c C-o.


* sort lines case insensitive
#+BEGIN_SRC emacs-lisp
(defun sort-lines-case-insensitive ()
  (interactive)
  (let ((sort-fold-case t))
    (call-interactively 'sort-lines))) 
#+END_SRC


* re-builder large
#+BEGIN_SRC emacs-lisp

(defun re-builder-large ()
  "Just like `re-builder', only make the font and window larger."
  (interactive)
  (re-builder)
  (text-scale-increase 5)
  (set-window-text-height (selected-window) 7))

#+END_SRC

* typewriter mode
#+BEGIN_SRC emacs-lisp
(defun typewriter-mode ()
  (interactive)
  (setq centered-cursor-mode t)
  (setq global-centered-cursor-mode t)
  )
#+END_SRC

* Save file as new 

#+BEGIN_SRC emacs-lisp
(defun save-file-as-new ()
  "Force modification of current file, unless already modified."
  (interactive)
  (if (and (verify-visited-file-modtime (current-buffer))
           (not (buffer-modified-p)))
      (progn
        (set-buffer-modified-p t)
        (save-buffer 0)))) 
#+END_SRC

* touch-file
#+BEGIN_SRC emacs-lisp

    (defun touch-file (file)
    "Create a file called FILE.
  If FILE already exists, signal an error."
    (interactive
    (list (read-file-name "Create file: " (dired-current-directory))))
    (let* ((expanded (expand-file-name file))
      (try expanded)
      (dir (directory-file-name (file-name-directory expanded)))
      new)
     (if (file-exists-p expanded)
      (error "Cannot create file %s: file exists" expanded))
     ;; Find the topmost nonexistent parent dir (variable `new')
     (while (and try (not (file-exists-p try)) (not (equal new try)))
     (setq new try
       try (directory-file-name (file-name-directory try))))
     (when (not (file-exists-p dir))
     (make-directory dir t))
     (write-region "" nil expanded t)
     (when new
     (dired-add-file new)
     (dired-move-to-filename))))
#+END_SRC

* If you want Emacs to treat all new files as modified, you can automate the solution like this 

#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hooks 'assume-new-is-modified)
(defun assume-new-is-modified ()
  (when (not (file-exists-p (buffer-file-name)))
    (set-buffer-modified-p t))) 
#+END_SRC

* create directories when necessary 

** Can I create directories that don't exist while creating a new file in emacs?

In emacs, I create a file by visiting it with C-x C-f. Let's say I'd like to create /home/myself/new_directory/file.txt.

If new_directory does not exist yet, is there a way to have it get created during the creation of file.txt without any extra steps? (I'm thinking of something like using the -p flag to mkdir in Linux.)

I feel like there's a different keystroke instead of C-x C-f that can do this, but I can't remember what it is. 

You can also advise function find-file to transparently create necessary directories.

#+BEGIN_EXAMPLE 
(defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
  "Create parent directory if not exists while visiting file."
  (unless (file-exists-p filename)
    (let ((dir (file-name-directory filename)))
      (unless (file-exists-p dir)
        (make-directory dir)))))
Simply put this in your .emacs somewhere and use C-x C-f as usual. 
#+END_EXAMPLE

** create intermediate dirs when saving a file 

Wow, this works.
#+BEGIN_EXAMPLE emacs-lisp
(add-hook 'before-save-hook
          (lambda ()
            (when buffer-file-name
              (let ((dir (file-name-directory buffer-file-name)))
                (when (and (not (file-exists-p dir))
                           (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                  (make-directory dir t)))))) 
#+END_EXAMPLE


* exporting 
** org-twbs
 #+BEGIN_SRC emacs-lisp
'(org-twbs-head-include-default-style t)
 '(org-twbs-htmlize-output-type (quote inline-css))
 '(org-twbs-indent t)

 #+END_SRC



** LaTeX
*** Find LaTeX on my system

 #+BEGIN_SRC emacs-lisp
(if (eq window-system 'mac)
    (add-to-list 'exec-path "/usr/local/texlive/2017/bin/x86_64-darwin")
  )
 #+END_SRC

*** XeLaTeX customisations

 ~org~ to LaTeX customisations, ~-shell-escape~ needed for ~minted~:
 #+BEGIN_SRC emacs-lisp
(setq  ; org-export-dispatch-use-expert-ui t non-intrusive export dispatch
 org-latex-pdf-process               ; for regular export

 '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

;; don't add extra lines to numbered lists and bulleted lists (set to nil)
(setq org-export-preserve-breaks nil) 

;; add padding to numbered lists and bulleted lists (set to t)
;; (setq org-export-preserve-breaks t) 
 #+END_SRC

*** load my custom latex templates

    #+BEGIN_SRC emacs-lisp
(load "/Users/jay/emacs/emacs-settings/mu4e-context.el")

(defun jay-load-latex ()
(interactive)

(load "/Users/jay/emacs/emacs-settings/new-latex-templates/blue-ruin.el")
(load "/Users/jay/emacs/emacs-settings/new-latex-templates/modest-ruin.el")
(load "/Users/jay/emacs/emacs-settings/new-latex-templates/elegant.el")
(load "/Users/jay/emacs/emacs-settings/new-latex-templates/elegant-garamond.el")
(load "/Users/jay/emacs/emacs-settings/new-latex-templates/resonate.el")
(load "/Users/jay/emacs/emacs-settings/new-latex-templates/blue-invoice.el") 
(load "/Users/jay/emacs/emacs-settings/new-latex-templates/blue-ruin_no_cover.el") 
(load "/Users/jay/emacs/emacs-settings/new-latex-templates/jay-latex-yosemite-setup.el")

(use-package blue-ruin) 
(use-package blue-invoice) 
(use-package blue-ruin-no-cover) 
  )
    #+END_SRC 


*** koma letter
#+BEGIN_SRC emacs-lisp
(defun load-koma-letter ()
 (interactive)
 (load "/Users/jay/emacs/emacs-settings/ox-koma-letter.el")
 (load "/Users/jay/emacs/emacs-settings/fiverr-koma.el")
 )
#+END_SRC

*** fix latex verbatim 
  You can use a filter function that will replace default "verbatim" with
  whatever you want.

  Here's my fancyvrb filter for when such a place is created.

  Source: [[https://lists.gnu.org/archive/html/emacs-orgmode/2013-04/msg01035.html][Re: {O} {patch} ox-latex.el to allow customization of verbatim environment]]
  #+BEGIN_SRC emacs-lisp

 (defun org-latex-filter-fancyvrb (text backend info)
  "Convert begin/end{verbatim} to begin/end{Verbatim}.
 Allows use of the fancyvrb latex package."
  (when 
    (org-export-derived-backend-p backend 'latex) 
  (replace-regexp-in-string
   "\\\\\\(begin\\|end\\){verbatim}"
   "\\\\\\1{quote}"
   text)))

 (add-to-list 'org-export-filter-final-output-functions
     'org-latex-filter-fancyvrb) 
  #+END_SRC

* no inline images
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images nil) 
#+END_SRC


* reuse directory buffers
#+BEGIN_SRC emacs-lisp
;; (require ''dired+)
(toggle-diredp-find-file-reuse-dir 1) 
(add-hook 'dired-mode-hook
 (lambda ()
  (define-key dired-mode-map (kbd "C-<up>")
    (lambda () (interactive) (find-alternate-file "..")))
  ; was dired-up-directory
 )) 
#+END_SRC


* open recent directories
#+BEGIN_SRC emacs-lisp
;; open recent directory, requires ivy (part of swiper)
;; borrows from http://stackoverflow.com/questions/23328037/in-emacs-how-to-maintain-a-list-of-recent-directories
(defun bjm/ivy-dired-recent-dirs ()
 "Present a list of recently used directories and open the selected one in dired"
 (interactive)
 (let ((recent-dirs
     (delete-dups
     (mapcar (lambda (file)
          (if (file-directory-p file) file (file-name-directory file)))
         recentf-list))))

  (let ((dir (ivy-read "Directory: "
             recent-dirs
             :re-builder #'ivy--regex
             :sort nil
             :initial-input nil)))
   (dired dir))))


(define-key key-minor-mode-map (kbd "C-x d") 'bjm/ivy-dired-recent-dirs) 
;; c-x C-d runs the command ido-list-directory 
#+END_SRC


* calc eval region 
#+BEGIN_SRC emacs-lisp
(defun calc-eval-region (arg)
  "Evaluate an expression in calc and communicate the result.

If the region is active evaluate that, otherwise search backwards
to the first whitespace character to find the beginning of the
expression. By default, replace the expression with its value. If
called with the universal prefix argument, keep the expression
and insert the result into the buffer after it. If called with a
negative prefix argument, just echo the result in the
minibuffer."
  (interactive "p")
  (let (start end)
(if (use-region-p)
    (setq start (region-beginning) end (region-end))
  (progn
    (setq end (point))
    (setq start (search-backward-regexp "\\s-\\|\n" 0 1))
    (setq start (1+ (if start start 0)))
    (goto-char end)))
(let ((value (calc-eval (buffer-substring-no-properties start end))))
  (pcase arg
    (1 (delete-region start end))
    (4 (insert " = ")))
  (pcase arg
    ((or 1 4) (insert value))
    (-1 (message value)))))) 
#+END_SRC


* cheatsheet
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Common
                :key "M-s-="
                :description "calc-eval-region")

(cheatsheet-add :group 'Dired
                :key "C-x C-j"
                :description "dired of current file")

(cheatsheet-add :group 'Dired
                :key "C-x d"
                :description "recent directories")

(cheatsheet-add :group 'Dired
                :key "DD"
                :description "recent directories")


(cheatsheet-add :group 'Dired
                :key "C-x C-d"
                :description "ido-list-directory")


(cheatsheet-add :group 'Mu4e
		:key "a e"
		:description "org-contact-add")


(cheatsheet-add :group 'Common
                :key "C-x u"
                :description "undo-tree-visualize")

(cheatsheet-add :group 'Mooovement
                :key "C-c C-j"
                :description "org-goto")


(cheatsheet-add :group 'Mooovement
                :key "C- -"
                :description "goto-last-edit")


(cheatsheet-add :group 'Search
                :key "s-G"
                :description "helm-projectile-grep")

(cheatsheet-add :group 'Mooovement
                :key "C- drag"
                :description "mouse-copy")


(cheatsheet-add :group 'Mooovement
                :key "jj"
                :description "helm-imenu")

(cheatsheet-add :group 'Mooovement
                :key "kk"
                :description "helm-imenu")

(cheatsheet-add :group 'Mooovement
                :key "jk"
                :description "avy-goto-line")

(cheatsheet-add :group 'Common
                :key "XX"
                :description "M-x")

(cheatsheet-add :group 'Search
                :key "ww"
                :description "helm-swoop")


(cheatsheet-add :group 'Search
                :key "FF"
                :description "isearch")

(cheatsheet-add :group 'Search
                :key "SS"
                :description "swiper")


(cheatsheet-add :group 'Buffers
                :key "WW"
                :description "widen")

(cheatsheet-add :group 'Editing
                :key "ZZ"
                :description "undo")

(cheatsheet-add :group 'Editing
		:key "C-x C-o"
		:description "delete-blank-lines")


(cheatsheet-add :group 'Replacing
                :key "RR"
                :description "replace-regexp")

(cheatsheet-add :group 'Action!
                :key "XX"
                :description "helm-mx")

(cheatsheet-add :group 'Action!
		:key "HH"
		:description "cheatsheet")


(cheatsheet-add :group 'MultipleCursors
                :key "MM"
                :description "mc/mark-all-dwim")


(cheatsheet-add :group 'MultipleCursors
		:key "s-m"
		:description "mc/mark-all-like-this-dwim")


(cheatsheet-add :group 'MultipleCursors
                :key "M-2"
                :description "mc/mark-all-dwim")


(cheatsheet-add :group 'MultipleCursors
                :key "C-4"
                :description "mc/mark-next-like-this")


(cheatsheet-add :group 'MultipleCursors
                :key "C-3"
                :description "mc/mark-previous-like-this")


(cheatsheet-add :group 'MultipleCursors
                :key "C-8"
                :description "endless/mc-map")

(cheatsheet-add :group 'MultipleCursors
                :key "i"
                :description "mc/insert-numbers")

(cheatsheet-add :group 'MultipleCursors
                :key "h"
                :description "mc/hide-unmatched-lines")

(cheatsheet-add :group 'MultipleCursors
                :key "h"
                :description "mc/mark-all-like-this")



#+END_SRC 




;; (key-chord-define-global "HH" 'helm-M-x)


;; (key-chord-define-global "NN" 'ni-narrow-to-region-indirect-other-window)
(key-chord-define-global "NN" 'org-narrow-to-subtree)

(key-chord-define-global "II" 'god-mode-all)


* mouse-copy
#+BEGIN_SRC emacs-lisp
;; (require 'mouse-copy)
;; (global-set-key [C-down-mouse-1] 'mouse-drag-secondary-pasting)
;; (global-set-key [C-S-down-mouse-1] 'mouse-drag-secondary-moving) 
#+END_SRC


* proselint 
Source: http://unconj.ca/blog/linting-prose-in-emacs.html 

#+BEGIN_SRC emacs-lisp
(require 'flycheck)
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
        (id (one-or-more (not (any " "))))
        (message) line-end))
  :modes (text-mode markdown-mode gfm-mode org-mode))

(add-to-list 'flycheck-checkers 'proselint) 
#+END_SRC


* query-replace-duplicate-lines-keep-blanks

Source: [[http://emacs.stackexchange.com/questions/20344/how-to-query-delete-duplicate-lines/20384?noredirect=1#comment31370_20384][replace - how to query-delete-duplicate-lines? - Emacs Stack Exchange]]

#+BEGIN_SRC emacs-lisp 
(defun delete-duplicate-lines-keep-blanks ()
 (interactive)
 (delete-duplicate-lines (region-beginning) (region-end) nil nil t)) 
#+END_SRC

* display

** recenter top bottom
 #+BEGIN_SRC emacs-lisp
(setq scroll-margin 25)
;; (setq recenter-positions (quote (top middle bottom))) 
 #+END_SRC




* org-clock
#+BEGIN_SRC emacs-lisp
(setq org-clock-auto-clock-resolution t)
 (setq org-clock-idle-time 30)
 (setq org-clock-in-resume t)
 (setq org-clock-persist-query-resume nil)
 (setq org-clock-report-include-clocking-task t) 
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(setq org-clock-persist t)
(setq org-clock-into-drawer nil)
(setq org-clocktable-defaults
 (quote
 (:maxlevel 3 :lang "en" :scope file :block nil :wstart 1 :mstart 1 :tstart nil :tend nil :step nil :stepskip0 nil :fileskip0 nil :tags nil :emphasize nil :link nil :narrow 40! :indent t :formula nil :timestamp nil :level nil :tcolumns nil :formatter nil)))

(setq org-time-clocksum-format
 (quote
 (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))) 
#+END_SRC







* iCal
#+BEGIN_SRC emacs-lisp
(setq org-icalendar-include-todo nil) 
(setq org-icalendar-use-scheduled (quote (event-if-todo todo-start))) 
(setq org-icalendar-alarm-time 60)
 (setq org-icalendar-combined-description "Jay Dixit---Emacs ")
 (setq org-icalendar-combined-name "Org-Mode")
(setq org-icalendar-store-UID nil)
(setq org-icalendar-timezone "(-18000 \"EST\") ")
(setq org-agenda-default-appointment-duration '15)

(defun org-icalendar-open-ics-file (file) (start-process "org-icalendar-open-ics-file-process" nil "open" "-a" "/Applications/Calendar.app" file)) (add-hook 'org-icalendar-after-save-hook 'org-icalendar-open-ics-file) 
#+END_SRC

* sensible defaults
Source: [[https://github.com/hrs/sensible-defaults.el/blob/master/sensible-defaults.el][sensible-defaults.el/sensible-defaults.el at master · hrs/sensible-defaults.el 🔊]]

#+BEGIN_SRC emacs-lisp

;; Utility functions:

(defun sensible-defaults/comment-or-uncomment-region-or-line ()
 "Comments or uncomments the region or the current line if there's no active region."
 (interactive)
 (let (beg end)
  (if (region-active-p)
    (setq beg (region-beginning) end (region-end))
   (setq beg (line-beginning-position) end (line-end-position)))
  (comment-or-uncomment-region beg end)))

(global-set-key (kbd "M-;")
         'sensible-defaults/comment-or-uncomment-region-or-line)


(setq gc-cons-threshold 20000000)
(setq vc-follow-symlinks t) 

"When saving a file that starts with `#!', make it executable."
 (add-hook 'after-save-hook
      'executable-make-buffer-file-executable-if-script-p)
#+END_SRC


* inline CSS on org-export
#+BEGIN_EXAMPLE emacs-lisp
(defun my-org-inline-css-hook (exporter)
 "Insert custom inline css"
 (when (eq exporter 'html)
  (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
      (path (concat dir "style.css"))
      (homestyle (or (null dir) (null (file-exists-p path))))
      (final (if homestyle "/Users/jay/Dropbox/web-design/custom-css/email.css" path))) ;; <- set your own style file path
   (setq org-html-head-include-default-style nil)
   (setq org-html-head (concat
              "<style type=\"text/css\">\n"
              "<!--/*--><![CDATA[/*><!--*/\n"
              (with-temp-buffer
               (insert-file-contents final)
               (buffer-string))
              "/*]]>*/-->\n"
              "</style>\n")))))

(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook) 

(setq org-export-htmlize-output-type 'inline-css) 
#+END_EXAMPLE


* repeat-last-command
#+BEGIN_SRC emacs-lisp
(defun repeat-last-command ()
"repeats the last command called via M-x"
(interactive)
(let ((history extended-command-history)
cmd)
;; remove any occurence of this-command at the head of `history'.
(while (string= this-command (setq cmd (pop history))))
(message "Running cmd: %s" cmd)
(call-interactively (intern cmd)))) 
#+END_SRC

* org 
** editing
*** lines 
**** org-copy-line
   #+BEGIN_SRC emacs-lisp
(defun org-select-line ()
 "Select the current line"
 (interactive)
 (org-beginning-of-line) ; move to end of line
 (set-mark (line-end-position)))

(defun org-copy-line ()
 (interactive)
(org-select-line)
(pasteboard-copy)
(set-mark nil)) 
   #+END_SRC

*** lines

*** paragraphs 
**** kill whole paragraph
     :PROPERTIES:
     :ID:       4DCE53D0-0D37-464B-B398-BD5B4BE18492
     :END:
   #+BEGIN_SRC emacs-lisp
(defun kill-paragraph-from-beginning (b e)
  (interactive)
  (mark-paragraph)
  (kill-region)
  )
   #+END_SRC


*** subtrees 
**** eval-subtree
     :PROPERTIES:
     :ID:       A97FDEB2-CB0D-4B17-9A73-FB737A5F030F
     :END:
   #+BEGIN_SRC emacs-lisp
(defun eval-subtree ()
 (interactive)
 (org-edit-src-code)
 (eval-buffer)
 (org-edit-src-exit)
 ) 
   #+END_SRC

*** document 
**** my/delete-duplicate-lines
     :PROPERTIES:
     :ID:       7E335494-C925-4D11-8D01-6175377F1F3C
     :END:
   #+BEGIN_EXAMPLE emacs-lisp
(defun my/update-lines (bunches pos keep)
 (cl-loop with dec = (if keep 0 1)
      for line being the hash-key of bunches
      using (hash-value positions) do
      (puthash
      line
      (cl-loop for p in positions
           if (< p pos) collect p
           else if (> p pos) collect (- p dec))
      bunches)))

(defun my/suggest-delete-line (line)
 (let ((len (length line)))
  (move-overlay selection (point) (+ (point) len))
  (let* ((inhibit-quit t)
      (answer 
      (with-local-quit
       (read-key
        (format "Delete '%s%s'? [y]es/[n]o"
            (substring line 0 (min len 13))
            (cond
            ((> len 16) "...")
            ((> len 13) (substring line 13 len))
            (t "")))))))
   (when (= answer ?y)
    (delete-region
     (point)
     (progn
      (move-end-of-line 1)
      (forward-char)
      (point))))
   answer)))

(defun my/delete-duplicate-lines (beg end)
 (interactive
  (if (region-active-p)
    (list (region-beginning) (region-end))
   (list (point-min) (point-max))))
 (let ((ignore-white (< (prefix-numeric-value current-prefix-arg) 1))
    (ignore-blank (< (prefix-numeric-value current-prefix-arg) 4))
    (bunches (make-hash-table :test 'equal))
    (selection (make-overlay 1 1)))
  (overlay-put selection 'face 'secondary-selection)
  (save-excursion
   (goto-char beg)
   (move-beginning-of-line 1)
   (cl-loop for lnum = (count-lines (point-min) beg)
        then (1+ lnum)
        for line = (buffer-substring-no-properties
              (point)
              (progn
               (move-end-of-line 1)
               (point)))
        while (< (point) end) do
        (forward-char)
        (unless
          (or (and (string-match "[ \t]+" line) ignore-white)
            (and (string-match "^$" line) ignore-blank))
         (puthash line (cons lnum (gethash line bunches)) bunches))))
  (cl-loop for line being the hash-key of bunches 
       using (hash-value positions)
       unless (cdr positions) do
       (remhash line bunches))
  (cl-loop named :outer for line being the hash-key of bunches do
       (cl-loop for positions = (gethash line bunches)
           while positions do
           (cl-loop with continue = t
                for pos in positions
                while continue do
                (goto-char (point-min))
                (forward-line pos)
                (recenter)
                (cl-case (my/suggest-delete-line line)
                 (?\C-g (cl-return-from :outer))
                 (?y)
                 (otherwise (setf continue nil)))
                (my/update-lines bunches pos continue))))
  (delete-overlay selection))) 
   #+END_EXAMPLE 

**** kill to buffer end
     :PROPERTIES:
     :ID:       49820CA2-490C-4DA0-9036-F16B262F712E
     :END:

     #+BEGIN_SRC emacs-lisp
(defun kill-to-buffer-end-or-beginning (arg)
  (interactive "p")
  (if (and arg (= 0 (mod arg 4)))
      (beginning-of-buffer)
    (end-of-buffer))
  (kill-region (mark) (point))
  (recenter-top-bottom))

(define-key key-minor-mode-map (kbd "M-w") 'kill-to-buffer-end-or-beginning)
     #+END_SRC


** navigation 
*** up by degrees
 #+BEGIN_SRC emacs-lisp
(defun up-by-degrees ()
 (interactive)
       (previous-line 6)
 )


(defun down-by-degrees ()
 (interactive)
       (next-line 6)
 )


 #+END_SRC


*** next-subtree-same-level-and-narrow
 #+BEGIN_SRC emacs-lisp
(defun org-next-subtree-same-level-and-narrow ()
 (interactive)
 (widen)
 (org-forward-heading-same-level 1)
 (org-narrow-to-subtree)
 )

(defun org-previous-subtree-same-level-and-narrow ()
 (interactive)
(org-previous-visible-heading 1) 
 (widen)
(org-backward-heading-same-level 1) 
 (org-narrow-to-subtree)
 ) 
 #+END_SRC

*** next-subtree-and-narrow - original
 #+BEGIN_SRC emacs-lisp
(defun org-next-subtree-and-narrow ()
 (interactive)
 (widen)
 (org-next-visible-heading 1)
 (org-narrow-to-subtree)
 )

(defun org-previous-subtree-and-narrow ()
 (interactive)
(org-previous-visible-heading 1) 
 (widen)
 (org-previous-visible-heading 1)
 (org-narrow-to-subtree)
 ) 
 #+END_SRC

*** filing
    :PROPERTIES:
    :ID:       8DEDEA6E-ED28-46E7-8277-588FE1048EA6
    :END:
**** refile active region or subtree

   #+BEGIN_SRC emacs-lisp
(defun refile-region-or-subtree ()
  (interactive)
  (if (region-active-p)
      (call-interactively 'jay-refile-region)
    (org-refile)))
   #+END_SRC


* Make Messages Buffer modifiable in Emacs 24.4
Chen Bin

Insert below code into the beginning of ~/.emacs because any part of .emacs may create Messages Buffer instance.

#+BEGIN_SRC emacs-lisp
(when (boundp 'messages-buffer-mode-hook)
 (defun messages-buffer-mode-hook-setup ()
 (read-only-mode -1))
 (add-hook 'messages-buffer-mode-hook 'messages-buffer-mode-hook-setup)) 
#+END_SRC

* org-config-files-mode
#+BEGIN_EXAMPLE emacs-lisp
(define-minor-mode org-config-files-local-mode
  "Minor mode for editing configuration files in org-mode." 
  :init-value nil)
(define-key org-config-files-local-mode-map (kbd "<SPC>") 'insert-space) 
(setq abbrev-mode nil) )

You can toggle it in necessary files by setting the local variables section at the end of the file as follows. You can also change or add the keybinding here. You will still need to define different minor modes for each buffer that maps the same key-sequence to different commands.

#+END_EXAMPLE

* yasnippet fixes

#+BEGIN_SRC emacs-lisp
(defun yas/pasteboard-without-spaces ()
 "Return content of OS X system pasteboard via `pbpaste'."
 (shell-command-to-string "pbpaste | perl -p -e 's/\r$//' | tr '\r' '\n'")) 
#+END_SRC

#+BEGIN_SRC emacs-lisp 
(defun yas/org-get-time-stamp (&rest args)
 "Return the string that `org-insert-time-stamp' would insert."
 (with-temp-buffer
  (apply #'org-insert-time-stamp args)
  (buffer-string))) 
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun yas/tiny-expand (str)
  (with-temp-buffer
    (insert str)
    (goto-char (point-max)) ; tiny-expand works on text preceding point
    (tiny-expand)
    (buffer-string)))
#+END_SRC 

#+BEGIN_SRC emacs-lisp
(defun yas/suppress-errors ()
(interactive)
  (ignore-errors (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
)
#+END_SRC

* presentations 
** org-html-slideshow
 Set variables as safe
 #+BEGIN_SRC emacs-lisp
(put 'org-export-html-style-include-scripts 'safe-local-variable (lambda (xx) t))

(put 'org-export-html-style-include-default 'safe-local-variable (lambda (xx) t))

(put 'buffer-file-coding-system 'safe-local-variable (lambda (xx) t))

(put 'my-org-buffer-local-mode 'safe-local-variable (lambda (xx) t))

(setq safe-local-variable-values


  (quote
  (
(eval define-key key-minor-mode-map
	  (kbd "SPC")
	  (quote insert-space))

(eval define-key org-mode-map
      (kbd ":")
      (quote insert-colon))


(org-html-head-include-scripts)
   (org-export-allow-bind-keywords . t)
   (eval define-key key-minor-mode-map
      (kbd "SPC")
      (quote insert-space)))))

 #+END_SRC


* optimize emacs load time
#+BEGIN_SRC emacs-lisp
(defun loadup-gen ()
 "Generate the lines to include in the lisp/loadup.el file
to place all of the libraries that are loaded by your InitFile
into the main dumped emacs"
 (interactive)
 (defun get-loads-from-*Messages* ()
  (save-excursion
   (let ((retval ()))
	(set-buffer "*Messages*")
	(beginning-of-buffer)
	(while (search-forward-regexp "^Loading " nil t)
	 (let ((start (point)))
	  (search-forward "...")
	  (backward-char 3)
	  (setq retval (cons (buffer-substring-no-properties start (point)) retval))))
	retval)))
 (map 'list
    (lambda (file) (princ (format "(load \"%s\")\n" file)))
    (get-loads-from-*Messages*))) 
#+END_SRC

* crux
#+BEGIN_SRC emacs-lisp

(use-package crux 
:bind
( "M-`" . crux-swap-windows)

( "s-j rf" .  crux-rename-file-and-buffer)

( "s-j df" . crux-delete-file-and-buffer)

( "C-c d" . crux-duplicate-current-line-or-region)

( "C-c i" . crux-find-user-init-file)

;; ( "C-j") crux-top-join-line)
) 
#+END_SRC

* typography custom functions 

** em dash
 #+BEGIN_SRC emacs-lisp
(defun em-dash ()
(interactive) 
(cond (mark-active
   (progn (delete-region (mark) (point)))))
(expand-abbrev)
(insert "---")
  ) 
 #+END_SRC 

** true em dash
 #+BEGIN_SRC emacs-lisp
(defun true-em-dash ()
(interactive)
(cond (mark-active
   (progn (delete-region (mark) (point)))))
(expand-abbrev)
(insert "—")
  )
 #+END_SRC

** double quote
   :PROPERTIES:
   :ID:       1566B9D2-A4A7-498B-8478-8D2C0DFF0287
   :END:
#+BEGIN_SRC emacs-lisp
(defun insert-one-double-quote ()
(interactive)
(cond (mark-active
   (progn (delete-region (mark) (point))))) 
(insert "\"")) 
#+END_SRC


** insert right-bracket
   :PROPERTIES:
   :ID:       C6D2D34A-628B-4DB2-9082-DECEBB5D8F9F
   :END:
 #+BEGIN_SRC emacs-lisp
(defun insert-right-bracket ()
  (interactive)
(cond (mark-active
   (progn (delete-region (mark) (point))))) 
  (insert "\]")
  )
 #+END_SRC 

** insert equals sign
 #+BEGIN_SRC emacs-lisp
(defun insert-equals-sign ()
  (interactive)
(cond (mark-active
   (progn (delete-region (mark) (point)))))
  (insert "=")
  )
 #+END_SRC

** insert slash no abbrev
   :PROPERTIES:
   :ID:       D2AC465A-336E-4DCD-979C-6484FDF969C6
   :END:

   #+BEGIN_EXAMPLE emacs-lisp
(defun jay/insert-slash ()
  (interactive)
  (insert "/")
  )
   #+END_EXAMPLE 


* undo-tree-mode
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
:bind (:map undo-tree-map
("M-_" . nil)
)
)
#+END_SRC

* Emacs 25 

** don't create new frames
#+BEGIN_SRC emacs-lisp
(setq display-buffer-alist (quote (("" ignore (nil . reusable-frames))))) 
#+END_SRC

* from Harry Schwartz

** find file as sudo 
#+BEGIN_SRC emacs-lisp
(defun edit-this-file-as-sudo ()
  (interactive)
  (let ((file-name (buffer-file-name)))
   (when file-name
    (find-alternate-file (concat "/sudo::" file-name))))) 

(defun sudo-find-file ()
 (interactive)
 (let ((file-name (buffer-file-name)))
  (when file-name
  (find-file (concat "/sudo::" file-name))))) 

(defun sudo-edit-paths ()
 (interactive)
(find-file "/sudo::/etc/paths"))

#+END_SRC


** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
 (global-prettify-symbols-mode t)
#+END_SRC



** Lisps

All the lisps have some shared features, so we want to do the same things for
all of them. That includes using =paredit-mode= to balance parentheses (and
more!), =rainbow-delimiters= to color matching parentheses, and highlighting the
whole expression when point is on a paren.

#+BEGIN_SRC emacs-lisp
 (setq lispy-mode-hooks
    '(clojure-mode-hook
     emacs-lispmode-hook
     lisp-mode-hook
     scheme-mode-hook))

 (dolist (hook lispy-mode-hooks)
  (add-hook hook (lambda ()
           (setq show-paren-style 'expression)
; (paredit-mode)
;; (rainbow-delimiters-mode)
)))
#+END_SRC


** Projectile

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds the
easier-to-type =C-c C-v= and =C-c v= to useful searches.

#+BEGIN_SRC emacs-lisp
 (defun hrs/search-project-for-symbol-at-point ()
  "Use `projectile-ag' to search the current project for `symbol-at-point'."
  (interactive)
  (projectile-ag (projectile-symbol-at-point)))

 (global-set-key (kbd "C-c v") 'projectile-ag)
 (global-set-key (kbd "C-c C-v") 'hrs/search-project-for-symbol-at-point)
#+END_SRC

* web-mode 

If I'm in =web-mode=, I'd like to:

- Color color-related words with =rainbow-mode=.
- Still be able to run RSpec tests from =web-mode= buffers.
- Indent everything with 2 spaces.

#+BEGIN_SRC emacs-lisp
#+END_SRC

Use =web-mode= with embedded Ruby files, regular HTML, and PHP.

#+BEGIN_SRC emacs-lisp
(defun hrs/add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
   (add-to-list 'auto-mode-alist (cons pattern mode))))


 (hrs/add-auto-mode
  'web-mode
  "\\.erb$"
  "\\.html$"
  "\\.php$"
  "\\.rhtml$")
#+END_SRC


When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
 (setq org-src-window-setup 'current-window)
#+END_SRC


* how to do an argument

Insert today's date
Ben Maughan

Here's a simple bit of code from the Emacs wiki to insert the current date. I've set the default to be in the format YYYY-MM-DD, but if you use a prefix C-u then you get DD-MM-YYYY.

;; from http://bit.ly/2aBY92J

#+BEGIN_EXAMPLE emacs-lisp
(defun insert-todays-date (arg)
 (interactive "P")
 (insert (if arg
    (format-time-string "%d-%m-%Y")
   (format-time-string "%Y-%m-%d")))) 
#+END_EXAMPLE


** No worries when elpa is down
Chen Bin

I use one liner shell command to clone Emacs Lisp Package Archive (ELPA):

#+BEGIN_EXAMPLE sh
mkdir -p ~/elpaclone && cd ~/elpaclone && curl -L https://elpa.gnu.org/packages/archive-contents | perl -pe 's/(^\(1|\n)//g' | perl -pe 's/\]\)/])\n/g' | perl -pe 's/^ *\(([a-z0-9A-Z-]*).*\[\(([0-9 ]*).*(single|tar).*/\1-\2.\3/g' | perl -pe 's/ /./g' | perl -pe 's/single/el/g' | perl -pe 's/\)//g' | xargs -I {} curl -L -O https://elpa.gnu.org/packages/{} && curl -L -O https://elpa.gnu.org/packages/archive-contents 
#+END_EXAMPLE 


The http://bit.ly/2brTy2S is contains all the information of packages. I re-organize it content to make sure every line contains one package's information. Then I use curl to download everything.

Usage is simple.

Insert below line at the beginning of ~/.emacs when elpa.gnu.org is down:

#+BEGIN_EXAMPLE emacs-lisp
(setq package-archives '(("elpaclone" . "~/elpaclone"))) 
#+END_EXAMPLE 

This solution also works for MELPA. 

** poly mode
#+BEGIN_SRC emacs-lisp
;; (require 'poly-org) 
#+END_SRC

* ivy counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
 :bind
 (("M-y" . counsel-yank-pop)
  :map ivy-minibuffer-map
  ("M-y" . ivy-next-line))) 
#+END_SRC

(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history) 


* toggle-between-src-and-example-block 
#+BEGIN_SRC emacs-lisp
(defun toggle-between-src-and-example-block ()
(interactive)
(save-excursion
(let* ((elt (org-element-at-point))
(elt-sym (car elt))
(bgn (plist-get (cadr elt) :begin)))
(cond
((eq elt-sym 'src-block)
(goto-char (+ bgn 8))
(delete-char 3)
(insert "EXAMPLE")
(when (re-search-forward "#\\+END_SRC" nil t)
(replace-match "#+END_EXAMPLE")))
((eq elt-sym 'example-block)
(goto-char (+ bgn 8))
(delete-char 7)
(insert "SRC")
(when (re-search-forward "#\\+END_EXAMPLE" nil t)
(replace-match "#+END_SRC")))
(t (message "It isn't src/example block!")))))) 
#+END_SRC

* dired-quick-sort 
#+BEGIN_SRC emacs-lisp
(require 'dired-quick-sort) 
#+END_SRC


* eww 
#+BEGIN_SRC emacs-lisp
(setq eww-search-prefix "https://www.google.com/search?q=") 
#+END_SRC


I love that I can search for whatever region is active by pressing M-s M-w in Emacs 25 --- this is something I never even knew I wanted!
But it just throws an error if region isn't active. So I advised it to prompt for a search string if region isn't active:
#+BEGIN_SRC emacs-lisp
(defun jab/eww-search (orig-fun &rest args)
 (if (region-active-p) (apply orig-fun args)
 (eww (read-string "Query: "))))
(advice-add 'eww-search-words :around #'jab/eww-search) 

#+END_SRC



* podcaster
#+BEGIN_SRC emacs-lisp
(setq podcaster-feeds-urls
  (quote
  ("http://sachachua.com/blog/tag/emacs-chat/podcast")))

(setq podcaster-mp3-player "VLC")

#+END_SRC

* bongo
#+BEGIN_SRC emacs-lisp
'(bongo-default-directory "~/Dropbox/")

#+END_SRC

* ediff
#+BEGIN_SRC emacs-lisp
(setq ediff-diff-options "-w") 
#+END_SRC

* weather
#+BEGIN_SRC emacs-lisp
(use-package wttrin
 :ensure t
 :commands (wttrin)
 :init
 (setq wttrin-default-cities '("Toronto"
                "New York"))) 


;; function to open wttrin with first city on list
(defun bjm/wttrin ()
  "Open `wttrin' without prompting, using first city in `wttrin-default-cities'"
  (interactive)
  ;; save window arrangement to register 
  (window-configuration-to-register :pre-wttrin)
  (delete-other-windows)
  ;; save frame setup
  (save-frame-config)
  (set-frame-width (selected-frame) 130)
  (set-frame-height (selected-frame) 48)
  ;; call wttrin
  (wttrin-query (car wttrin-default-cities))
  ) 
#+END_SRC

* yahoo weather
#+BEGIN_EXAMPLE emacs-lisp
(use-package 
 :commands 
 :bind (

  :map

  )
 :init
(setq yahoo-weather-location "New York " 
yahoo-weather-mode t 
yahoo-weather-temperture-format "%d " 
yahoo-weather-use-F t 
yahoo-weather-format "[New York---%(weather)---%(temperature)F]"
)

 :config


) 
#+END_EXAMPLE


* mouse scrolling
#+BEGIN_SRC emacs-lisp
(setq mac-wheel-button-is-mouse-2 nil) 
;; so that the middle button works 

(setq scroll-conservatively 1000) ; seems nice

#+END_SRC

* screenflick
#+BEGIN_SRC emacs-lisp
(defun screenflick-mode ()
(interactive) 
 (setq evil-emacs-state-cursor '("red" (hbar . 2))) ; for horizontal cursor
(horizontal-cursor)
(spacemacs/toggle-highlight-current-line-globally-off)
(adobe-garamond-pro)
(toggle-fullscreen)
(writeroom-mode)
) 
#+END_SRC


* ws-butler
#+BEGIN_EXAMPLE emacs-lisp
(setq ws-butler-global-mode t)
(ws-butler-global-mode) 
#+END_EXAMPLE

* fix image links
#+BEGIN_SRC emacs-lisp
(defun fix-image-links ()
(interactive)
)
#+END_SRC


* org-reveal
#+BEGIN_SRC emacs-lisp
(setq org-reveal-root "file:///Users/jay/Dropbox/github/reveal.js")
#+END_SRC

* pomidor - a pomodoro timer
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/Users/jay/gnulisp/pomidor")
(use-package pomidor)
#+END_SRC


* org-drill
#+BEGIN_SRC emacs-lisp
(use-package org-drill)
; (add-hook 'org-drill-hook (lambda () (flyspell-lazy-mode -1)))
; (setq org-drill-add-random-noise-to-intervals-p t)

(setq org-drill-use-visible-cloze-face-p t)


#+END_SRC

* ox-clip
#+BEGIN_SRC emacs-lisp
(use-package ox-clip)
#+END_SRC

* org-def
#+BEGIN_SRC emacs-lisp
(defun org-def ()
(interactive)
(save-excursion
(beginning-of-line)
 (insert "- "))
(insert " :: ")
)
#+END_SRC



* delete html blocks
#+BEGIN_SRC emacs-lisp
(defun delete-html-blocks ()
(interactive)
(replace-regexp "#\\+BEGIN_HTML\\(?:.*\\|\n\\)*#\\+END_HTML" "")
)
#+END_SRC

* delete properties blocks
#+BEGIN_SRC emacs-lisp
(defun delete-properties-blocks ()
(interactive)
(replace-regexp "   :PROPERTIES:\\(?:.*\\|\n\\)*   :END:" "")
)
#+END_SRC



* beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon

 :init

 (beacon-mode 1)
(setq beacon-push-mark 35)
(setq beacon-color "#FFF876")
 )
#+END_SRC

* org sticky header
#+BEGIN_SRC emacs-lisp
(use-package org-sticky-header

:config
(setq org-sticky-header-always-show-header nil)

)
(add-hook 'org-mode-hook (lambda () (org-sticky-header-mode 1)))
#+END_SRC

* Tufte
#+BEGIN_SRC emacs-lisp
(use-package ox-tufte)
#+END_SRC

* ignore case in searches
#+BEGIN_SRC emacs-lisp
(defun ignore-case-in-searches ()
 (interactive)
 (setq case-fold-search t)
 )
#+END_SRC

* timestamp export format

Remove the remove <> surrounding timestamps

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-export-filter-timestamp-functions
       #'endless/filter-timestamp)
(defun endless/filter-timestamp (trans back _comm)
 "Remove <> around time-stamps."
 (pcase back
  ((or `jekyll `html)
   (replace-regexp-in-string "&[lg]t;" "" trans))
  (`latex
   (replace-regexp-in-string "[<>]" "" trans))))
#+END_SRC

we can still make it better. The YYYY-MM-DD weekday format isn't commonly used in prose, so let's switch that as well.
#+BEGIN_SRC emacs-lisp
; (setq-default org-display-custom-times t)
;;; Before you ask: No, removing the <> here doesn't work.
; (setq org-time-stamp-custom-formats '("<%b %d, %Y>" . "<%d/%m/%Y %a %H:%M>"))
#+END_SRC

Source: [[http://endlessparentheses.com/better-time-stamps-in-org-export.html][Better time-stamps in org-export with Emacs · Endless Parentheses]]

Hmm maybe look at this too: [[http://stackoverflow.com/questions/23297422/org-mode-timestamp-format-when-exported][datetime - Org mode timestamp format when exported - Stack Overflow]]

* add YouTube link type yt:
#+BEGIN_SRC emacs-lisp
(defvar yt-iframe-format
 ;; You may want to change your width and height.
 (concat "<iframe width=\"440\""
     " height=\"335\""
     " src=\"https://www.youtube.com/embed/%s\""
     " frameborder=\"0\""
     " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
  (browse-url
  (concat "https://www.youtube.com/embed/"
      handle)))
 (lambda (path desc backend)
  (cl-case backend
   (html (format yt-iframe-format
          path (or desc "")))
   (latex (format "\href{%s}{%s}"
          path (or desc "video"))))))
#+END_SRC

#+BEGIN_EXAMPLE

[[yt:A3JAlWM8qRM]]

#+END_EXAMPLE

[[http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html][Embedding Youtube videos with org-mode links · Endless Parentheses]]

To use this, just write your org links in the following way (optionally adding a description).

[[yt:A3JAlWM8qRM]]

* help-mode
#+BEGIN_EXAMPLE emacs-lisp
(use-package help-mode

:bind (:help-map
("C-s-]" . help-go-back)
("s-ESC" . help-go-forward)))
#+END_EXAMPLE

* swiper-mc
#+BEGIN_SRC emacs-lisp
(defun swiper-mc ()
(interactive)
(unless (require 'multiple-cursors nil t)
(error "multiple-cursors isn't installed")) (let ((cands (nreverse ivy--old-cands)))
(unless (string= ivy-text "") (ivy-set-action
(lambda (_) (let (cand)
(while (setq cand (pop cands)) (swiper--action cand)
(when cands
               (mc/create-fake-cursor-at-point))))
         (mc/maybe-multiple-cursors-mode)))
(setq ivy-exit 'done) (exit-minibuffer))))
#+END_SRC

* display and copy spacemacs version info
#+BEGIN_SRC emacs-lisp
(defun spacemacs-version-display-and-copy ()
 "Echo the current version of Spacemacs, Emacs, and org-mode, and copy it."
 (interactive)
(setq system-version
 (substring
 (shell-command-to-string "defaults read loginwindow SystemVersionStampAsString")
 0 -1))
 (kill-new
   (message "Mac OSX Sierra version %s, Spacemacs version %s, Emacs version %s, org-mode version %s"
       system-version spacemacs-version emacs-version org-version))
 (push-kill-ring-pasteboard-to-clipboard)
)
#+END_SRC

See also spacemacs/describe-system-info

* display and copy emacs version info
#+BEGIN_SRC emacs-lisp
(defun emacs-version-display-and-copy ()
 "Echo the current version of Spacemacs, Emacs, and org-mode, and copy it."
 (interactive)
(setq system-version
 (substring
 (shell-command-to-string "defaults read loginwindow SystemVersionStampAsString")
 0 -1))
 (kill-new
   (message "Mac OSX Sierra version %s, Emacs version %s, org-mode version %s"
       system-version emacs-version org-version))
 (push-kill-ring-pasteboard-to-clipboard)
)
#+END_SRC

See also spacemacs/describe-system-info

* shell command on region
#+BEGIN_SRC emacs-lisp
(defun tidy-html ()
 "Tidies the HTML content in the buffer using `tidy'"
 (interactive)
 (shell-command-on-region
  ;; beginning and end of buffer
  (point-min)
  (point-max)
  ;; command and parameters
  "tidy -i -w 120 -q"
  ;; output buffer
  (current-buffer)
  ;; replace?
  t
  ;; name of the error buffer
  "*Tidy Error Buffer*"
  ;; show error buffer?
  t))
#+END_SRC
[[https://www.masteringemacs.org/article/executing-shell-commands-emacs][Executing Shell Commands in Emacs - Mastering Emacs]]


* message-mode
#+BEGIN_SRC emacs-lisp
(defun message-mode-next-field ()
  (interactive)
  (next-line)
  (end-of-line))

(setq message-tab-body-function (quote message-mode-next-field))
#+END_SRC


* tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC


* smart question mark
#+BEGIN_SRC emacs-lisp
(defun qm-maybe ()
(interactive)
(when
(not
(looking-back "$")
)
(smart-question-mark)
)
)

;; (define-key key-minor-mode-map (kbd "?") 'qm-maybe)
#+END_SRC


* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

;; (setq flycheck-global-modes '(not org-mode latex-mode)) ; doesn't work

(add-hook 'org-mode-hook #'flycheck-mode)
#+END_SRC


* convert to chat format

#+BEGIN_SRC emacs-lisp
(defun intern-convert-to-chat-format (begin end)
 (interactive "r")
 (xah-replace-pairs-region begin end
 '(
 ["Mary Dean: " "** Mary Dean\n"]
 ["Ricky DeSantis: " "** Ricky DeSantis\n"]
 ["Jay Dixit: " "** Jay Dixit\n"]
 ["me: " "** Jay Dixit\n"]
 ["Benjamin: " "** Benjamin Carp\n"]
 ["Camille Inge: " "** Camille Inge\n"]
 ["Benjamin: " "** Ben Bechar\n"]
 )))

#+END_SRC


* message-mode tab

#+BEGIN_SRC emacs-lisp
(autoload 'mail-hist-forward-header "mail-hist")
(autoload 'mail-text-start  "sendmail")

(defun my-message-signature-start ()
 "Return value of point at start of message signature."
 (save-mark-and-excursion
 (message-goto-signature)
 (point)))

(defun my-message-field-forward ()
 "Move point to next \"field\" in a `message-mode' buffer.
With each invocation, point is moved to the next field of
interest amongst header values, message body and message
signature, in that order."
 (interactive)
 (cond ((message-point-in-header-p)
  (unless (mail-hist-forward-header 1)
  (message-goto-body) (point)))
 ((>= (point) (my-message-signature-start))
  (message "No further field"))
 ((message-in-body-p)
  (message-goto-signature))
 (t ; Probably on `mail-header-separator' line
  (message-goto-body) (point))))

(defun my-message-field-backward ()
 "Like `my-message-field-forward', but in opposite direction."
 (interactive)
 (cond ((or (message-point-in-header-p)
  (<= (point) (mail-text-start)))
  (unless (mail-hist-forward-header
   (if (message-point-in-header-p) -1 0))
  (message "No further field")))
 ((<= (point) (my-message-signature-start))
  (message-goto-body) (point))
 (t ; Beyond start of signature
  (message-goto-signature))))



#+END_SRC

(with-eval-after-load 'message
 (define-key message-mode-map "\t" #'my-message-field-forward)
 (dolist (key '(message-tab backtab S-tab S-iso-lefttab))
 (define-key message-mode-map (vector key) #'my-message-field-backward)))


* shell-pop

#+BEGIN_SRC emacs-lisp
(use-package shell-pop
 :bind (("C-t" . shell-pop))
 :config
 (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
 (setq shell-pop-term-shell "/bin/zsh")
 ;; need to do this manually or not picked up by `shell-pop'
 (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC



* org-projectile
#+BEGIN_SRC emacs-lisp
(use-package org-projectile
 :bind (

     ("C-c c" . org-capture))
 :config
 (progn
  (setq org-projectile-projects-file
     "~/Dropbox/writing/notationaldata/projects.org")
  (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
  (push (org-projectile-project-todo-entry) org-capture-templates))
 :ensure t) 
#+END_SRC


* fix case
#+BEGIN_SRC emacs-lisp
(defun isearch-forward-ignore-case ()
(interactive) 
(ignore-case-in-searches)
(isearch-forward)
)
#+END_SRC


* counsel-Spotify
#+BEGIN_SRC emacs-lisp 
(use-package spotify
:init
'(spotify-oauth2-client-id 83e2e6567ee2416e8943de8c83c525cb)
'(spotify-oauth2-client-secret c5305ef7fe3f4e2cab9d2abec2070688)

)
#+END_SRC


* org count words
Source: [[https://www.reddit.com/r/emacs/comments/8qm1lb/new_orgcountwords_command/][New org-count-words command : emacs]]


Note that it does not count words in heading lines, planning lines, and drawers, so it gives a more useful count for the "prose" in the subtree. 

ounts lines, words, and characters in the region or the subtree at point. It prints a message like count-words does, like:

: Subtree "Heading" has 7 line, 5 words, and 28 characters. 


#+BEGIN_SRC emacs-lisp

(defun ap/org-count-words ()
  "If region is active, count words in it; otherwise count words in current subtree."
  (interactive)
  (if (use-region-p)
    (funcall-interactively #'count-words-region (region-beginning) (region-end))
   (org-with-wide-buffer
    (cl-loop for (lines words characters)
        in (org-map-entries
          (lambda ()
           (ap/org-forward-to-entry-content 'unsafe)
           (let ((end (org-entry-end-position)))
            (list (count-lines (point) end)
               (count-words (point) end)
               (- end (point)))))
          nil 'tree)
        sum lines into total-lines
        sum words into total-words
        sum characters into total-characters
        finally do (message "Subtree \"%s\" has %s lines, %s words, and %s characters."
                  (org-get-heading t t) total-lines total-words total-characters)))))

(defun ap/org-forward-to-entry-content (&optional unsafe)
  "Skip headline, planning line, and all drawers in current entry.
If UNSAFE is non-nil, assume point is on headline."
  (unless unsafe
   ;; To improve performance in loops (e.g. with `org-map-entries')
   (org-back-to-heading))
  (cl-loop for element = (org-element-at-point)
       for pos = (pcase element
             (`(headline . ,_) (org-element-property :contents-begin element))
             (`(,(or 'planning 'property-drawer 'drawer) . ,_) (org-element-property :end element)))
       while pos
       do (goto-char pos))) 
#+END_SRC


* visible mark 
#+BEGIN_EXAMPLE emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; visible mark - show where mark is                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defface visible-mark-active ;; put this before (require 'visible-mark)
 '((((type tty) (class mono)))
  (t (:background "magenta"))) "")
(require 'visible-mark)
(global-visible-mark-mode 1) ;; or add (visible-mark-mode) to specific hooks
(setq visible-mark-max 2)
(setq visible-mark-faces `(visible-mark-face1 visible-mark-face2))

(setq set-mark-command-repeat-pop t) 
#+END_EXAMPLE


* transcribmode

* time stamps
#+BEGIN_SRC emacs-lisp
(setq 
 time-stamp-active t     ; do enable time-stamps
time-stamp-line-limit 50; check first 50 lines 
time-stamp-format "%04y-%02m-%02d"; date format 
time-stamp-pattern "50//*Invoice date:\\*+\s%:y-%02m-%02d\\\\?$" 
) 

;; (add-hook 'write-file-hooks 'time-stamp) ; update when saving 

(add-hook 'before-save-hook 'time-stamp) 
#+END_SRC


* server reflash
#+BEGIN_SRC emacs-lisp
(defun server-reflash ()
  (interactive)
  (server-force-delete)
  (server-start)
  )
#+END_SRC
