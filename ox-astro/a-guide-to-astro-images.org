** How to Handle Images in Astro + MDX

/A quick-reference for future posts/

--------------

*** 1. The two ways Astro turns an image file into HTML

- *Front-matter field*

#+begin_src yaml
  image: "~/assets/images/posts/hero.png"
  imageAlt: "Hero banner alt text"
#+end_src

  The file path is treated like an import and passed to your layout as
  ~frontmatter.image~ (an *ImageMetadata* object).
  No extra code inside the MDX body is needed.

- *Explicit ~import~ in MDX*

#+begin_src mdx
  import { Image } from 'astro:assets';
  import Poster from '~/assets/images/posts/poster.png';
#+end_src

  You get a variable (~Poster~) that you can drop wherever you want
  with
  ~<Image src~{Poster} alt="Descriptive alt" />=.

--------------

*** 2. When to use which

- *Banner / hero shown by the layout* → front-matter ~image:~ is
  enough.
  /Delete any matching import line; it's redundant./

- *Inline illustration inside the article* → keep an ~import~ and
  ~<Image src~{File} …>~.
  Front-matter is unnecessary unless the layout needs the same file.

- *Need it both ways* → keep both:
  /front-matter/ for the layout, /import/ for inline use.

--------------

*** 3. Boilerplate patterns

**** Hero only

#+begin_src yaml
---
title: …
image: "~/assets/images/posts/hero.png"
imageAlt: "Skyline at dusk"
---
#+end_src

/(No import statement for that file.)/

**** Inline only

#+begin_src mdx
import { Image } from 'astro:assets';
import Chart from '~/assets/images/posts/chart.png';

<Image src~{Chart} alt="Quarterly revenue chart" />
#+end_src

**** Both hero *and* inline

#+begin_src yaml
---
title: …
image: "~/assets/images/posts/hero.png"
imageAlt: "Header banner"
---
#+end_src

#+begin_src mdx
import { Image } from 'astro:assets';
import Hero from '~/assets/images/posts/hero.png';

<Image src={Hero} alt="Header banner" />
#+end_src

--------------

*** 4. Best-practice checklist

- *Alt text*: always supply a real description (~alt~"…"~), not ~"img"=.

- *File names*: keep them short, kebab-case; long hashes are OK but hard
  to read in code.

- *Optimisation*: Astro auto-converts PNG/JPG → efficient ~webp~ in
  production.

- *Image width*: ~<Image>~ adds intrinsic width/height for CLS-free
  loading.

- *Avoid unused imports*: they throw warnings and clutter diffs.

- *Source control*: commit images under ~src/assets/…~ so the asset
  pipeline can see them; large, rarely-changed binaries can stay in a
  separate ~static/~ folder.

--------------

*** 5. Troubleshooting quickies

- *Image shows as broken* → you likely wrote ~<img src~{File}>~ instead
  of ~<img src={File.src}>~ or ~<Image src={File}>~.

- *File not found at build* → path must start with ~~/= (alias to
  project root or ~src/~), not ~./~.

- *Huge banner file slows build* → pass ~width~ or ~height~ props to
  ~<Image>~ to let Astro resize automatically.

--------------

Keep this guide handy; follow the three patterns above and you'll never
wonder "do I need an import here?" again. Happy publishing!
