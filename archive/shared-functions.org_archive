
Archived entries from file /Users/jay/Dropbox/emacs/prelude/personal/shared-functions.org


* Isearch case
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-05-29 Fri 12:57
  :ARCHIVE_FILE: ~/Dropbox/emacs/prelude/personal/shared-functions.org
  :ARCHIVE_CATEGORY: shared-functions
  :END:
** toggle case-sensitivity in isearch

#+BEGIN_SRC emacs-lisp
(add-hook 'isearch-mode-hook
            (function
             (lambda ()
               (define-key isearch-mode-map "\C-h" 'isearch-mode-help)
               (define-key isearch-mode-map "\C-t" 'isearch-toggle-regexp)
               (define-key isearch-mode-map "\C-c" 'isearch-toggle-case-fold)
               (define-key isearch-mode-map "\C-j" 'isearch-edit-string))))
#+END_SRC
Source: [[http://emacswiki.org/emacs/CaseFoldSearch][EmacsWiki: Case Fold Search]]

Actually, it also adds some other ‘C-s’ bindings:

isearch-mode-help – Provides help on incremental searching. Defined in library Lisp:isearch+.el.
isearch-toggle-regexp – Toggles regexp searching on and off.
isearch-edit-string – Edit the search string in the MiniBuffer. This also provides other isearch options, including word searches (C-w).



* removed from init.el
:PROPERTIES:
:ARCHIVE_TIME: 2016-07-11 Mon 23:49
:ARCHIVE_FILE: ~/emacs/prelude/personal/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

;; OSX KEY BINDINGS
(global-set-key (kbd "s-,") 'customize-group)
(global-set-key (kbd "s-h") 'replace-string)

(global-set-key (kbd "s-\\") 'visit-most-recent-file)

(global-set-key (kbd "s-w") 'delete-window)
(global-set-key (kbd "s-k") 'kill-this-buffer)


(global-set-key (kbd "s-F") 'locate)
(global-set-key (kbd "s-(") 'org-velocity)
(global-set-key (kbd "s-[") 'org-backward-heading-same-level)
(global-set-key (kbd "s-]") 'org-forward-heading-same-level)
					; (global-set-key (kbd "C-c s") 'org-copy-subtree)
;; (define-key (kbd "C-v s") 'org-paste-subtree)
					; (global-set-key (kbd "C-v s") 'org-paste-subtree)
(global-set-key (kbd "s-l") 'org-insert-link)
(global-set-key (kbd "s-y") 'redo)
(global-set-key (kbd "s-i") 'org-emphasize)
(global-set-key (kbd "s-`") 'other-window)

(global-set-key (kbd "s-\\") 'visit-most-recent-file)
;; available key mappings
;; (global-set-key (kbd "s-\\") 'org-ctrl-c-ctrl-c)
(global-set-key (kbd "s-d") 'org-todo)
(global-set-key (kbd "s-u") 'ido-dired)
;; (global-set-key (kbd "s-b") 'org-narrow-to-subtree)
(global-set-key (kbd "s-b") 'org-tree-to-indirect-buffer)
(global-set-key (kbd "H-n") 'org-narrow-to-subtree)
(global-set-key (kbd "H-w") 'widen)
;; (global-set-key (kbd "s-g") 'google)
(global-set-key (kbd "s-G") 'helm-do-grep)
(global-set-key (kbd "s-L") 'org-mac-chrome-insert-frontmost-url)
(global-set-key (kbd "s-;") 'google-define-word-or-phrase)
                    ;(global-set-key (kbd "C-c C-x C-i") 'pomodoro-start)
                    ;(global-set-key (kbd "C-c C-x C-o") 'org-pomodoro)
(global-set-key (kbd "s-R") 'web-research)

(global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)

(setq org-return-follows-link t)
(setq org-blank-before-new-entry 'always)

;; most crucial keybindings
(global-set-key (kbd "M-h") 'help-command)
(global-set-key "\C-ce" 'eval-buffer)
(global-set-key "\C-cr" 'eval-region)



* mu4e
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-07 Tue 02:45
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_OLPATH: email
:ARCHIVE_CATEGORY: shared-functions
:END:
** mu4e setup
#+BEGIN_EXAMPLE emacs-lisp

;; (setq user-mail-address "jay@storytelling.nyc")
(setq user-mail-address "dixit@aya.yale.edu")

(setq user-full-name "Jay Dixit")

(setq mu4e-user-mail-address-list '("sunjaydixit@gmail.com" "dixit@aya.yale.edu" "jay@jaydixit.com" "jay@storytelling.nyc"))

;; (let ((default-directory "/usr/local/share/emacs/site-lisp/")) (normal-top-level-add-subdirs-to-load-path))
; what is this?
;(use-package smtpmail)
(use-package mu4e)
(setq mu4e-mu-binary "/usr/local/Cellar/mu/1.2.0/bin/mu")
(setq user-mail-address "jay@storytelling.nyc")
(setq mu4e-user-mail-address-list '("sunjaydixit@gmail.com" "dixit@aya.yale.edu" "jay@storytelling.nyc" "jay@jaydixit.com" "jay@newyorkwritersintensive.com" "jaydixit@neuroleadership.com"))
(setq user-full-name "Jay Dixit" )
(setq mu4e-maildir "/Users/jay/Dropbox/mu2")
(setq mu4e-compose-signature "\n---\nJay Dixit\n[[http://jaydixit.com/][jaydixit.com]]\n")


(setq mu4e-sent-folder "/sent")
(setq mu4e-drafts-folder "/drafts")
(setq mu4e-trash-folder "/trash")
;; (setq mu4e-org-contacts-file "/Users/jay/nd/contacts-org-jay.txt")

(setq mu4e-get-mail-command "mbsync -a")


;; (setq mu4e-mu-home "/Users/jay/Dropbox/mail/mu/gmail")



;; display HTML email nicely
;; (setq mu4e-html2text-command "w3m -T text/html")
;; works but better than the other one, html2text or whatever it's called
;; convert html emails properly
;; Possible options:
;; ---html2text -utf8 -width 72
;; ---textutil -stdin -format html -convert txt -stdout
;; ---html2markdown | grep -v '&nbsp_place_holder;' (Rquires html2text pypi)
;; ---w3m -dump -cols 80 -T text/html
;; ---view in browser (provided below)
; (setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")


  ;; convert org mode to HTML automatically
; (setq org-mu4e-convert-to-html t); I think this is redundant? Maybe?

  ;; need this to convert some e-mails properly
;; (setq mu4e-html2text-command "html2text -utf8 -width 72")

;; collect email addresses
;; only add email addresses of email sent directly to me
(setq mu4e-compose-complete-only-personal t)
(setq mu4e-compose-complete-only-after "2015-01-01")

;;(setq mu4e-contacts-func 'mu4e~fill-contacts)
;;(mu4e~proc-contacts t nil)

;; composing mail
(setq mu4e-compose-dont-reply-to-self t)
(setq mu4e-compose-in-new-frame nil)
(setq mu4e-compose-signature-auto-include nil)

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; don't confirm before applying flags
(setq mu4e-headers-leave-behavior 'apply)

;; allow for updating mail using 'U' in the main view:
;; (setq mu4e-get-mail-command "offlineimap")
(setq mu4e-get-mail-command "mbsync -a")
(setq mu4e-change-filenames-when-moving t)

(setq mu4e-attachment-dir "~/Downloads")



;; show images
(setq mu4e-show-images t)

;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
 (imagemagick-register-types))


;; spell check
(add-hook 'mu4e-compose-mode-hook
 (defun my-do-compose-stuff ()
  "My settings for message composition."
  (set-fill-column 72)
  (flyspell-mode)
(turn-on-auto-capitalize-mode)
))

;; add option to view html message in a browser
;; `aV` in view to activate
(add-to-list 'mu4e-view-actions
 '("ViewInBrowser" . mu4e-action-view-in-browser) t)

;; fetch mail every 10 mins
(setq mu4e-update-interval 600)


;; Use fancy chars
(setq mu4e-use-fancy-chars t)


(setq mu4e-confirm-quit nil
 mu4e-headers-date-format "%d/%b/%Y %H:%M" ; date format
 mu4e-html2text-command "html2text -utf8 -width 72"
 )

;; maildirs
;; (use-package mu4e-maildirs-extension)
;; (mu4e-maildirs-extension)
;; (setq mu4e-maildirs-extension-title "Folders")

#+END_EXAMPLE

** mu4e keybindings
#+BEGIN_EXAMPLE emacs-lisp

;; shortcuts
(setq mu4e-maildir-shortcuts
'(
("/gmail/starred" . ?i)
("/nli/inbox" . ?l)
("/nywi/inbox" . ?n)
("/gmail/sent" . ?s)))


;; (define-key mu4e-mode-map "r" 'mu4e-compose-reply)


;; start screen
(define-key mu4e-main-mode-map "r" 'mu4e-compose-reply)
(define-key mu4e-main-mode-map "c" 'mu4e-compose-new)
(define-key mu4e-main-mode-map "j" 'mu4e-update-mail-and-index)
(define-key mu4e-main-mode-map "g" 'mu4e~headers-jump-to-maildir)

;; inbox
(define-key mu4e-headers-mode-map "r" 'mu4e-compose-reply)
(define-key mu4e-headers-mode-map "c" 'mu4e-compose-new)
(define-key mu4e-headers-mode-map "y" 'mu4e-headers-mark-for-unflag)
(define-key mu4e-headers-mode-map "j" 'mu4e-update-mail-and-index)
;; (local-unset-key mu4e-headers-mode-map "g" 'mu4e-update-mail-and-index)
;; (define-key mu4e-headers-mode-map "k" 'mu4e-headers-prev)
;; (define-key mu4e-headers-mode-map "j" 'mu4e-headers-next)


;; message view ("mu4e-view-mode)")
(define-key mu4e-view-mode-map "r" 'mu4e-compose-reply)
(define-key mu4e-view-mode-map "c" 'mu4e-compose-new)
(define-key mu4e-view-mode-map "y" 'mu4e-view-mark-for-unflag)
(define-key mu4e-view-mode-map "k" 'mu4e-view-headers-prev)
(define-key mu4e-view-mode-map "j" 'mu4e-view-headers-next)

(define-key mu4e-view-mode-map "g" 'mu4e-update-mail-and-index)



;; unset keys (worked!)
(add-hook 'mu4e-headers-mode-hook
  (lambda ()
  (local-unset-key (kbd "<M-right>"))
  (local-unset-key (kbd "<M-left>"))
))

(add-hook 'mu4e-view-mode-hook
  (lambda ()
  (local-unset-key (kbd "<M-right>"))
  (local-unset-key (kbd "<M-left>"))
))
#+END_EXAMPLE

** gmail emulation
#+BEGIN_SRC emacs-lisp
(defun archive-and-previous ()
  (interactive)
  (mu4e-view-mark-for-unflag)
(mu4e-view-headers-prev)
)


(defun archive-and-next ()
  (interactive)
  (mu4e-view-mark-for-unflag)
(mu4e-view-headers-next)
)

(define-key mu4e-view-mode-map "]" 'mu4e-view-headers-prev)
(define-key mu4e-view-mode-map "[" 'mu4e-view-headers-next)

#+END_SRC


** mu4e attachments
 Wouldn't it be awesome to be able to send files from dired using your mail client?

 I'll need a special version of the gnus-dired-mail-buffers function so it understands mu4e buffers as well:

** mu4e don't reply all
So talk about super hacky. I've spent a while and i've come up with something that works, even if it's far from being beautiful.

[[https://www.bountysource.com/issues/7054870-option-for-automatically-reply-to-sender-vs-reply-to-all][Option for automatically reply-to-sender vs. reply-to-all -]]

#+BEGIN_EXAMPLE emacs-lisp

;; The ...-false version is omitted because of verbosity,
;; as is the pd:reply-to-all helper, which simply does the inverse.
(defun pd:reply-to-all-ask-intercept-true (orig-fun &rest args)
 ; true == reply to all. See mu4e~draft-user-wants-reply-all for inspiration,
 ; in mu/mu4e/mu4e-draft.el
 t)

(defun pd:reply-to-sender ()
 (interactive)
 (advice-remove 'mu4e~draft-user-wants-reply-all #'pd:reply-to-all-ask-intercept-true)
 (advice-add 'mu4e~draft-user-wants-reply-all :around #'pd:reply-to-all-ask-intercept-false)
 (mu4e-compose-reply)
 )

(define-key mu4e-headers-mode-map "r" 'pd:reply-to-sender)
#+END_EXAMPLE

** gmail starred
The remaining problem is to propagate to Gmail that I've refiled
(archived) a message. I also noticed that flagging a message in /mu4e/
doesn't immediately mean the message is starred on the Gmail side. With
the recently added ~mu4e-mark-execute-pre-hook~ it becomes possible to
whip Gmail into doing my bidding :)

##+BEGIN_SRC emacs-lisp
(add-hook 'mu4e-mark-execute-pre-hook
  (lambda (mark msg)
  (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
   ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
   ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))
##+END_SRC

I've been using this for about a week now and I'm rather liking this setup so far.

It wasn't until after a couple of days that I realised this makes /mu4e/
more like Gmail than it was with me first setup, i.e. all email is in a
single folder and I use searching exclusively to find stuff :-)
Source: [[https://groups.google.com/forum/#!msg/mu-discuss/BpGtwVHMd2E/Wf1rJdx9DgAJ][Mu4e and Gmail, my current setup---Google Groups]]

** mu4e contexts
#+BEGIN_SRC emacs-lisp

(setq mu4e-context-policy 'ask-if-none)
(setq mu4e-compose-context-policy 'ask-if-none)


(setq mu4e-contexts
 `(

,(make-mu4e-context
	 :name "Sunjay E. Dixit"
	 :enter-func (lambda ()
(mu4e-message "Switch to sunjaydixit@gmail.com context")
;; switch to sendmail to send email through gmail
(setq message-send-mail-function (quote message-send-mail-with-sendmail))
;; open my starred gmail maildir
(mu4e~headers-jump-to-maildir "/gmail/starred")
)
:vars '
(
(user-mail-address . "jay@storytelling.nyc")
(mu4e-get-mail-command . "mbsync gmail")
(mu4e-compose-signature .
		 ("\n---\nJay Dixit\n[[http://jaydixit.com/][jaydixit.com]]\n"))))


,(make-mu4e-context
	 :name "New York Writers Intensive"
	 :enter-func (lambda () (mu4e-message "Switch to New York Writers Intensive context")
;; switch to smtp-mail in order to change send-from address
(setq message-send-mail-function 'smtpmail-send-it
 smtpmail-stream-type 'starttls
 smtpmail-default-smtp-server "smtp.gmail.com"
 smtpmail-smtp-server "smtp.gmail.com"
;; smtpmail-auth-credentials '(("smtp.gmail.com" 587 "jay@storytelling.nyc" Nil))

smtpmail-auth-credentials (expand-file-name "~/.authinfo-nywi")

 smtpmail-smtp-service 587)
;; open my newyorkwritersintensive inbox
(mu4e~headers-jump-to-maildir "/nywi/inbox")
)
	 ;; leave-fun not defined
	 :vars '(
(user-mail-address . "jay@storytelling.nyc")
(mu4e-get-mail-command . "mbsync nywi")
 ( mu4e-compose-signature .
		 ("Jay Dixit\nnewyorkwritersintensive.com\n"))))


,(make-mu4e-context
	 :name "Leadership"
	 :enter-func (lambda () (mu4e-message "Switch to Leadership context")
;; switch to smtp-mail in order to change send-from address
(setq message-send-mail-function 'smtpmail-send-it
 smtpmail-stream-type 'starttls
 smtpmail-default-smtp-server "smtp.gmail.com"
 smtpmail-smtp-server "smtp.gmail.com"
smtpmail-auth-credentials (expand-file-name "~/.authinfo-nli")

smtpmail-smtp-service 587)
;; open my neuroleadership inbox
(mu4e~headers-jump-to-maildir "/nli/inbox")
)
	 ;; leave-fun not defined
	 :vars '(
(user-mail-address . "jaydixit@neuroleadership.com")
(mu4e-get-mail-command . "mbsync nli")
 ( mu4e-compose-signature .
		 ("Jay Dixit\nneuroleadership.com\n"))))


))


;; change send-from address interactively
(defun neuroleadership-compose ()
  (interactive)
  (setq message-send-mail-function 'smtpmail-send-it
 smtpmail-stream-type 'starttls
 smtpmail-default-smtp-server "smtp.gmail.com"
 smtpmail-smtp-server "smtp.gmail.com"
smtpmail-auth-credentials (expand-file-name "~/.authinfo-neuroleadership")
;; smtpmail-auth-credentials '(("smtp.gmail.com" 587 "jaydixit@neuroleadership.com" nil))
 smtpmail-smtp-service 587)
(setq user-mail-address "jaydixit@neuroleadership.com")
(compose-mail)
)

;; change send-from address interactively
(defun nywi-compose ()
 (interactive)
 (setq message-send-mail-function 'smtpmail-send-it
 smtpmail-stream-type 'starttls
 smtpmail-default-smtp-server "smtp.gmail.com"
 smtpmail-smtp-server "smtp.gmail.com"
smtpmail-auth-credentials (expand-file-name "~/.authinfo-nywi")
;; smtpmail-auth-credentials '(("smtp.gmail.com" 587 "jay@storytelling.nyc" Nil))
 smtpmail-smtp-service 587)
(setq user-mail-address "jay@storytelling.nyc")
(compose-mail)
)


;; change send-from address interactively
(defun yale-compose ()
  (interactive)
  (setq message-send-mail-function (quote message-send-mail-with-sendmail))
(setq user-mail-address "jay@storytelling.nyc")
(compose-mail)
  )

(defun yale-or-neuroleadership-compose (arg)
 (interactive "p")
 (if (and arg (= 0 (mod arg 4)))
   (neuroleadership-compose)
  (yale-compose)))
;; (global-set-key (kbd "C-c m") 'yale-or-neuroleadership-compose)


;; go straight to my personal gmail inbox; bound to s-l
(defun mu4e-gmail ()
 (interactive)
(mu4e)
 (mu4e~headers-jump-to-maildir "/gmail/starred")
 )

;; go to Neuroleadership (work) inbox
(defun mu4e-neuroleadership ()
 (interactive)
(mu4e)
 (mu4e~headers-jump-to-maildir "/nli/inbox")
 )

;; go to NYWI (my company) inbox
(defun mu4e-nywi ()
 (interactive)
(mu4e)
 (mu4e~headers-jump-to-maildir "/nywi/inbox")
 )



(defun mu4e-context-label ()
 "Propertized string with the current context name, or \"\" if
 there is none."
 (if (mu4e-context-current)
  (concat "[" (propertize (mu4e~quote-for-modeline
			   (mu4e-context-name (mu4e-context-current)))
		 'face 'mode-line-buffer-id) "]") ""))

#+END_SRC


** mu4e-send-delay
#+BEGIN_SRC emacs-lisp
(use-package mu4e-send-delay)
(mu4e-send-delay-setup)
(add-hook 'mu4e-main-mode-hook 'mu4e-send-delay-initialize-send-queue-timer)
#+END_SRC



* hunspell - patch
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 02:21
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_OLPATH: The Writing Environment/spellcheck
:ARCHIVE_CATEGORY: shared-functions
:END:

This is a patch from here:

https://github.com/emacs-mirror/emacs/commit/2925ce5a7ec1424cfaea9f2f86bd3cab27832584

#+BEGIN_EXAMPLE emacs-lisp
(defun ispell-find-hunspell-dictionaries ()
 "Look for installed Hunspell dictionaries.
Will initialize `ispell-hunspell-dictionary-alist' according
to dictionaries found, and will remove aliases from the list
in `ispell-dicts-name2locale-equivs-alist' if an explicit
dictionary from that list was found."
 (let ((hunspell-found-dicts
	 (split-string
	 (with-temp-buffer
	  (ispell-call-process ispell-program-name
				 null-device
				 t
				 nil
                 ;; Hunspell 1.7.0 (and later?) won't
                 ;; show LOADED DICTIONARY unless
                 ;; there's at least one file argument
                 ;; on the command line. So we feed
                 ;; it with the null device.
				 "-D" null-device)
	  (buffer-string))
	 "[\n\r]+"
	 t))
	hunspell-default-dict
	hunspell-default-dict-entry
	hunspell-multi-dict)
  (dolist (dict hunspell-found-dicts)
   (let* ((full-name (file-name-nondirectory dict))
	   (basename (file-name-sans-extension full-name))
	   (affix-file (concat dict ".aff")))
	(if (string-match "\\.aff$" dict)
	  ;; Found default dictionary
	  (progn
	   (if hunspell-default-dict
		 (setq hunspell-multi-dict
			(concat (or hunspell-multi-dict
				  (car hunspell-default-dict))
				"," basename))
		(setq affix-file dict)
		;; FIXME: The cdr of the list we cons below is never
		;; used. Why do we need a list?
		(setq hunspell-default-dict (list basename affix-file)))
	   (ispell-print-if-debug
	    "++ ispell-fhd: default dict-entry:%s name:%s basename:%s\n"
	    dict full-name basename))
	 (if (and (not (assoc basename ispell-hunspell-dict-paths-alist))
		  (file-exists-p affix-file))
	   ;; Entry has an associated .aff file and no previous value.
	   (let ((affix-file (expand-file-name affix-file)))
		(ispell-print-if-debug
         "++ ispell-fhd: dict-entry:%s name:%s basename:%s affix-file:%s\n"
         dict full-name basename affix-file)
		(cl-pushnew (list basename affix-file)
              ispell-hunspell-dict-paths-alist :test #'equal))
	  (ispell-print-if-debug
       "-- ispell-fhd: Skipping entry: %s\n" dict)))))
  ;; Remove entry from aliases alist if explicit dict was found.
  (let (newlist)
   (dolist (dict ispell-dicts-name2locale-equivs-alist)
	(if (assoc (car dict) ispell-hunspell-dict-paths-alist)
	  (ispell-print-if-debug
       "-- ispell-fhd: Excluding %s alias. Standalone dict found.\n"
       (car dict))
	 (cl-pushnew dict newlist :test #'equal)))
   (setq ispell-dicts-name2locale-equivs-alist newlist))
  ;; Add known hunspell aliases
  (dolist (dict-equiv ispell-dicts-name2locale-equivs-alist)
   (let ((dict-equiv-key (car dict-equiv))
	  (dict-equiv-value (cadr dict-equiv))
	  (exclude-aliases (list  ;; Exclude TeX aliases
			   "esperanto-tex"
			   "francais7"
			   "francais-tex"
			   "norsk7-tex")))
	(if (and (assoc dict-equiv-value ispell-hunspell-dict-paths-alist)
		 (not (assoc dict-equiv-key ispell-hunspell-dict-paths-alist))
		 (not (member dict-equiv-key exclude-aliases)))
	  (let ((affix-file (cadr (assoc dict-equiv-value
                      ispell-hunspell-dict-paths-alist))))
	   (ispell-print-if-debug "++ ispell-fhd: Adding alias %s -> %s.\n"
                   dict-equiv-key affix-file)
	   (cl-pushnew (list dict-equiv-key affix-file)
             ispell-hunspell-dict-paths-alist :test #'equal)))))
  ;; Parse and set values for default dictionary.
  (setq hunspell-default-dict (or hunspell-multi-dict
				  (car hunspell-default-dict)))
  (setq hunspell-default-dict-entry
	 (ispell-parse-hunspell-affix-file hunspell-default-dict))
  ;; Create an alist of found dicts with only names, except for default dict.
  (setq ispell-hunspell-dictionary-alist
	 (list (cons nil (cdr hunspell-default-dict-entry))))
  (dolist (dict (mapcar #'car ispell-hunspell-dict-paths-alist))
   (cl-pushnew (if (string= dict hunspell-default-dict)
           hunspell-default-dict-entry
          (list dict))
         ispell-hunspell-dictionary-alist :test #'equal))))


(setenv "DICTIONARY" "en_US")
;; (setenv "LANG" "en_US.UTF-8")
;; (setq ispell-program-name "hunspell")
(setq ispell-dictionary "en_US")

(when (executable-find "hunspell")
 (setq-default ispell-program-name "/usr/local/bin/hunspell")
 (setq ispell-really-hunspell t))

;; Activate flyspell
(add-hook 'message-mode-hook 'flyspell-mode)
(setq flyspell-issue-message-flag nil)

(setq ispell-program-name "/usr/local/bin/hunspell")

(executable-find "hunspell")
;; (setq ispell-program-name "hunspell")
;; (setq ispell-local-dictionary "en_US")

 (setq ispell-local-dictionary-alist
    ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
    ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
    '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
     ))

(setq ispell-program-name "hunspell")
;; below two lines reset the the hunspell to it STOPS querying locale!
(setq ispell-local-dictionary "en_US") ; "en_US" is key to lookup in `ispell-local-dictionary-alist`
(setq ispell-local-dictionary-alist
   '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))

(flyspell-mode 1)
#+END_EXAMPLE


* Hunspell
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 02:21
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_OLPATH: The Writing Environment/spellcheck
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(setq ispell-program-name "/usr/local/bin/hunspell")

(setq ispell-really-hunspell t)

(setq flyspell-default-dictionary "en_US")

(setq ispell-dictionary "en_US")

(eval-after-load "ispell" '(progn (defun ispell-get-coding-system () 'utf-8)))

(setq ispell-local-dictionary-alist '(("en_US" "[[:alpha:][:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
#+END_EXAMPLE



* Hunspell - old
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 02:21
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_OLPATH: The Writing Environment/spellcheck
:ARCHIVE_CATEGORY: shared-functions
:END:

#+BEGIN_EXAMPLE emacs-lisp
(setq-default ispell-program-name (executable-find "hunspell"))

(setq ispell-really-hunspell t)

(setq flyspell-default-dictionary "en_US")

(setq ispell-dictionary "en_US")
(setenv "DICTIONARY" "en_US")

;; (add-to-list 'ispell-hunspell-dict-paths-alist '("en_US" "/Users/jay/Library/Spelling/en_US.aff"))


(setq ispell-program-name "hunspell")
(eval-after-load "ispell" '(progn (defun ispell-get-coding-system () 'utf-8)))

(setq ispell-local-dictionary-alist '(("en_US" "[[:alpha:][:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))


(flyspell-mode)

#+END_EXAMPLE



* org pdftools
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 03:06
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
Not sure what this does

#+begin_EXAMPLE emacs-lisp
(use-package org-pdftools
 :hook (org-load . org-pdftools-setup-link))

(use-package org-noter-pdftools
 :after org-noter
 :config
 (with-eval-after-load 'pdf-annot
  (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_EXAMPLE


* org-noter
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 03:06
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

#+begin_EXAMPLE emacs-lisp
(use-package org-noter
 :after org
 :ensure t)

(use-package org-noter
  :after org
  :ensure t
  :config (setq org-noter-default-notes-file-names '("org-noter-notes.org")
         org-noter-notes-search-path '("~/nd/org-noter")
         org-noter-separate-notes-from-heading t))
#+END_EXAMPLE


* PDF tools
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 03:06
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

#+begin_EXAMPLE emacs-lisp

(use-package pdf-tools
 :pin manual ;; manually update
 :config
 ;; initialise
 (pdf-tools-install)

 ;; open pdfs scaled to fit page
 (setq-default pdf-view-display-size 'fit-page)

 ;; don't automatically annotate highlights
 (setq pdf-annot-activate-created-annotations nil)

 ;; use normal isearch
 (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)

 ;; turn off cua so copy works
 (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))

 ;; more fine-grained zooming
 (setq pdf-view-resize-factor 1.1)

 ;; keyboard shortcuts
 (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
 (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
 (define-key pdf-view-mode-map (kbd "g") 'pdf-view-goto-page)
 (define-key pdf-view-mode-map (kbd "<") 'pdf-view-first-page)
 (define-key pdf-view-mode-map (kbd ">") 'pdf-view-last-page)
 (define-key pdf-view-mode-map (kbd "C-s") 'pdf-occur)
 (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))
#+END_EXAMPLE


* org-roam
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 03:06
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+begin_EXAMPLE emacs-lisp
(use-package org-roam
   :hook
   (after-init . org-roam-mode)
   :custom
   (org-roam-directory "~/Dropbox/org-roam")
   :bind (:map org-roam-mode-map
       (("C-c n l" . org-roam)
        ("C-c n f" . org-roam-find-file)
        ("C-c n j" . org-roam-jump-to-index)
        ("C-c n b" . org-roam-switch-to-buffer)
        ("C-c n g" . org-roam-graph))
       :map org-mode-map
       (("C-c n i" . org-roam-insert))))
#+END_EXAMPLE


* hyperbole
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 03:07
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+begin_src emacs-lisp
;; (setq hyperbole-web-search-browser-function 'eww-browse-url)
#+end_src



* help-mode
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 14:16
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(use-package help-mode

:bind (:help-map
("C-s-]" . help-go-back)
("s-ESC" . help-go-forward)))
#+END_EXAMPLE


* org-projectile
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 14:18
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(use-package org-projectile
 :bind (

     ("C-c c" . org-capture))
 :config
 (progn
  (setq org-projectile-projects-file
     "~/Dropbox/writing/notationaldata/projects.org")
  (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
  (push (org-projectile-project-todo-entry) org-capture-templates))
 :ensure t)
#+END_EXAMPLE



* counsel-Spotify
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 14:18
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(use-package spotify
:init
'(spotify-oauth2-client-id 83e2e6567ee2416e8943de8c83c525cb)
'(spotify-oauth2-client-secret c5305ef7fe3f4e2cab9d2abec2070688)

)
#+END_EXAMPLE



* visible mark
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 14:18
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; visible mark - show where mark is                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defface visible-mark-active ;; put this before (require 'visible-mark)
 '((((type tty) (class mono)))
  (t (:background "magenta"))) "")
(use-package visible-mark)
(global-visible-mark-mode 1) ;; or add (visible-mark-mode) to specific hooks
(setq visible-mark-max 2)
(setq visible-mark-faces `(visible-mark-face1 visible-mark-face2))

(setq set-mark-command-repeat-pop t)
#+END_EXAMPLE



* Workflowy mode
:PROPERTIES:
:END:

#+BEGIN_SRC emacs-lisp
(defun workflowy-mode ()
  "workflowy"
  (interactive)
  (setq org-bullets-bullet-list (quote ("• ")))
  (zin/org-outline-mode)
(org-bullets-mode)
(define-key key-minor-mode-map (kbd ",") 'insert-comma)
  (incarnadine-cursor)
  (define-key org-mode-map (kbd "DEL")
    'new-org-delete-backward-char)
  (define-key key-minor-mode-map (kbd "DEL")  'new-org-delete-backward-char)
  (insert "\n* "))

#+END_SRC


* Workflowy mode
:PROPERTIES:
:END:

#+BEGIN_SRC emacs-lisp
(defun workflowy-mode ()
  "workflowy"
  (interactive)
  (setq org-bullets-bullet-list (quote ("• ")))
  (zin/org-outline-mode)
(org-bullets-mode)
(define-key key-minor-mode-map (kbd ",") 'insert-comma)
  (incarnadine-cursor)
  (define-key org-mode-map (kbd "DEL")
    'new-org-delete-backward-char)
  (define-key key-minor-mode-map (kbd "DEL")  'new-org-delete-backward-char)
  (insert "\n* "))

#+END_SRC


* Workflowy mode
:PROPERTIES:
:END:

#+BEGIN_SRC emacs-lisp
(defun workflowy-mode ()
 "workflowy"
 (interactive)
 (setq org-bullets-bullet-list (quote ("- ")))
 (zin/org-outline-mode)
(org-bullets-mode)
(define-key key-minor-mode-map (kbd ",") 'insert-comma)
 (incarnadine-cursor)
 (define-key org-mode-map (kbd "DEL")
  'new-org-delete-backward-char)
 (define-key key-minor-mode-map (kbd "DEL") 'new-org-delete-backward-char)
 (insert "\n* "))
#+END_SRC

* Workflowy mode
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:36
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

#+BEGIN_SRC emacs-lisp
(defun workflowy-mode ()
 "workflowy"
 (interactive)
 (setq org-bullets-bullet-list (quote ("- ")))
 (zin/org-outline-mode)
(org-bullets-mode)
(define-key key-minor-mode-map (kbd ",") 'insert-comma)
 (incarnadine-cursor)
 (define-key org-mode-map (kbd "DEL")
  'new-org-delete-backward-char)
 (define-key key-minor-mode-map (kbd "DEL") 'new-org-delete-backward-char)
 (insert "\n* "))
#+END_SRC

* orgalist mode
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:37
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_OLPATH: message mode
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp

;; orgalist++-mode is enabled in Gnus message buffers to aid in creating structured email messages.
(add-hook 'message-mode-hook 'orgalist-mode 'append)
; (add-hook 'message-mode-hook 'bbdb-define-all-aliases 'append)
(add-hook 'message-mode-hook 'turn-on-flyspell 'append)
#+END_EXAMPLE

#+BEGIN_EXAMPLE emacs-lisp
(cl-dolist (map '(message-mode-map orgalist-mode-map))
 (cl-dolist (key '("<M-S-left>" "<M-S-right>" "<M-S-up>" "<M-S-down>" "<M-left>" "<M-right>" "<M-up>" "<M-down>"))
  (define-key (eval map) (kbd key) nil)))


(define-key orgalist-mode-map (kbd "`") 'flyspell-auto-correct-word)

#+END_EXAMPLE


* TODO unbind orgalist navigation keys
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:37
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:ARCHIVE_TODO: TODO
:END:

#+BEGIN_EXAMPLE emacs-lisp
(defun unbind-orgalist-keys ()
 (interactive)
    (cl-dolist (map '(message-mode-map orgalist-mode-map))
 (cl-dolist (key '("S-<right>" "S-<left>" "S-<down>" "S-<up>" "<M-S-left>" "<M-S-right>" "<M-S-up>" "<M-S-down>"
          "<M-left>" "<M-right>" "<M-up>" "<M-down>"))
  (define-key (eval map) (kbd key) nil)))
 )

(defun unbind-orgalist-keys-in-message-mode ()
 (interactive)
 (when (and (eq 'message-mode major-mode)
       (bound-and-true-p orgalist-mode))
  (unbind-orgalist-keys)))

(defun unbind-orgalist-keys-in-mu4e-compose-mode ()
 (interactive)
 (when (and (eq 'mu4e-compose-mode major-mode)
    (bound-and-true-p orgalist-mode))
 (unbind-orgalist-keys)))


(add-hook 'orgalist-mode-hook 'unbind-orgalist-keys-in-message-mode)
(add-hook 'orgalist-mode-hook 'unbind-orgalist-keys-in-mu4e-compose-mode)



;;(add-hook 'message-mode-hook 'unbind-orgalist-keys)
#+END_EXAMPLE



* org or orgalist
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:37
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

#+begin_EXAMPLE emacs-lisp
(use-package orgalist)

 (defun org-or-orgalist-p ()
  (or (eq major-mode 'org-mode)
    (and (bound-and-true-p orgalist-mode)
       (org-context-p 'headline 'item))))

#+END_EXAMPLE



** Remember recent email addresses
#+BEGIN_SRC emacs-lisp
;; (setq recent-addresses-file "~/emacs/prelude/recent-addresses")
;; (add-to-list 'load-path "~/gnulisp/recent-addresses-0.1/")
;; (use-package recent-addresses)
;; (recent-addresses-mode 1)
;; (add-hook 'message-setup-hook 'recent-addresses-add-first-to)

;;(setq mail-default-directory "~/Dropbox/writing/notationaldata/emacs-mail-message-mode-messages")
(setq mail-kill-buffer-on-exit nil)
(setq make-backup-files t)
(setq message-draft-headers (quote (From References Date)))
(setq message-kill-buffer-on-exit nil)
(setq message-required-headers (quote (From (optional . References))))
;; (setq message-send-hook (quote (recent-addresses-add-headers)))
(setq message-send-hook (quote (org-mime-htmlize)))
#+END_SRC

when replying, look kind of like gmail

#+BEGIN_SRC emacs-lisp
(setq message-citation-line-format "On %e %B %Y at %R %Z, %f wrote:\not")
;; (setq message-citation-line-function 'message-insert-formatted-citation-line)
#+END_SRC


* Key chords
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:37
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

Use key chord
#+BEGIN_SRC emacs-lisp
(use-package key-chord)
(key-chord-mode 1)
#+END_SRC


* Autocomplete
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:48
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

#+BEGIN_EXAMPLE emacs-lisp
(use-package auto-complete)
(defun ac-ispell-get-word ()
  (format "\\(%s\\)" (car (ispell-get-word nil "\\*"))))

(defun ac-ispell-get-candidates (prefix)
  (let ((word prefix)
        (interior-frag nil))
    (lookup-words (concat (and interior-frag "*") word
                          (if (or interior-frag (null ispell-look-p))
                              "*"))
                  ispell-complete-word-dict)))

(ac-define-source ispell
  '((prefix . ac-prefix)
    (candidates . ac-ispell-get-candidates)))
#+END_EXAMPLE

It's not a good idea to add `ac-source-ispell' to `ac-sources', I'll recommend
manual invoking.

Newer version of ~ac-define-source~ would provide us an
~ac-complete-ispell-word~.  In case it didn't:
#+BEGIN_EXAMPLE emacs-lisp
(defun ac-expand-ispell-word ()
  (interactive)
  (let ((ac-sources '(ac-source-ispell)))
    (call-interactively 'ac-start)))

(define-key global-map (kbd "s-/ s") 'ac-expand-ispell-word)

(ac-flyspell-workaround)

(load-file "~/Library/Preferences/Aquamacs Emacs/ac-ispell.el")
;; Completion words longer than 4 characters
#+END_EXAMPLE


#+BEGIN_EXAMPLE emacs-lisp
(defun buffer-background-black ()
  (interactive)
  (setq buffer-face-mode-face `(:background "black" :foreground "LightSkyBlue"))
  (buffer-face-mode 1))

;;
(defun my/enable-ac-ispell ()
  (add-to-list 'ac-sources 'ac-source-ispell))
;; (add-hook 'org-mode-hook 'my/enable-ac-ispell)
;; (add-hook 'message-mode-hook 'my/enable-ac-ispell)
;; (add-hook 'message-mode-hook 'buffer-background-black)

(eval-after-load "auto-complete"
  '(progn
     (ac-ispell-setup)))

#+END_EXAMPLE


* Integration with other apps
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:48
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
** Chrome
*** Emacs Server
Don't start the server unless we can verify that it isn't running.
#+BEGIN_EXAMPLE emacs-lisp
(use-package server)
(when (and (functionp 'server-running-p) (not (server-running-p)))
  (server-start))
#+END_EXAMPLE

*** ~osx-browse~

;; (use-package osx-browse)

** PDFs
*** Open PDFs in Skim
#+BEGIN_SRC emacs-lisp
;; (use-package openwith)
;;'(openwith-associations (quote (("\\.skim\\'" "open" (file)) ("\\.pdf\\'" "open" (file)))))
;; (openwith-mode t)
#+END_SRC


* unused packages
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:49
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
** ~ls-lisp~

I think this is correct:
#+BEGIN_EXAMPLE emacs-lisp
(use-package ls-lisp)
(setq ls-lisp-ignore-case 't)
#+END_EXAMPLE


* Tab Completion for Prose
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:49
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_OLPATH: Prose editing settings
:ARCHIVE_CATEGORY: shared-functions
:END:
# haven't tried this yet

Source: ([[http://endlessparentheses.com/tab-completion-for-prose.html][source]])
#+BEGIN_EXAMPLE emacs-lisp
(setq ac-auto-start 3)
(setq company-minimum-prefix-length 3)

(defun endless/config-prose-completion ()
  "Make auto-complete less agressive in this buffer."
  (setq-local company-minimum-prefix-length 6)
  (setq-local ac-auto-start 6))

(add-hook 'org-mode-hook
  #'endless/config-prose-completion)
#+END_EXAMPLE


* Recent files
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:50
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
Enable recent files using Ido mode COMMAND-R (then RIGHT-ARROW to browse) ~xsteve-ido-choose-from-recentf~ allows me to switch to any recently opened file. The nice thing, using that function is, that it does not matter, if I have the buffer already opened, or if the file must be opened now. With that function I have a persistent buffer list available.

*** Ido recent files
#+BEGIN_EXAMPLE emacs-lisp
(defun xsteve-ido-choose-from-recentf ()
  "Use ido to select a recently opened file from the 'recentf-list'"
  (interactive)
  (let ((home (expand-file-name (getenv "HOME"))))
    (find-file
     (ido-completing-read ""
			  (mapc (lambda (path)
				    (replace-regexp-in-string home "~" path))
				  recentf-list)
			  nil t))))
#+END_EXAMPLE

*** Enable recent files without using Ido mode via C-x C-r:
#+BEGIN_EXAMPLE emacs-lisp
(recentf-mode 1) ; recentf

(defun recentf-open-files-compl ()
  (interactive)
  (let* ((all-files recentf-list)
	 (tocpl (mapc (function
			 (lambda (x) (cons (file-name-nondirectory x) x))) all-files))
	 (prompt (append '("File name: ") tocpl))
	 (fname (completing-read (car prompt) (cdr prompt) nil nil)))
    (find-file (cdr (assoc-string fname tocpl)))))

(global-set-key [(control x)(control r)] 'recentf-open-files-compl)
#+END_EXAMPLE


* ChatGPT
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:50
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
Doesn't work.

#+begin_EXAMPLE emacs-lisp
(setq python-interpreter "/usr/local/bin/python3")
(setq chatgpt-python-interpreter "python3")

(use-package quelpa-use-package)
(use-package chatgpt
 :quelpa ((chatgpt :fetcher git :url "https://github.com/joshcho/ChatGPT.el.git") :upgrade t)
 :init
 (setq chatgpt-repo-path (expand-file-name "chatgpt/" quelpa-build-dir)
    chatgpt-python-interpreter python-interpreter)
 :bind ("C-c q" . chatgpt-query))

(setq chatgpt-query-types '(
       ;; ChatGPT.el defaults
       ("doc" . "Please write the documentation for the following function.\n\n%s")
       ("bug" . "There is a bug in the following function, please help me fix it.\n\n%s")
       ("understand" . "What does the following function do?\n\n%s")
       ("improve" . "Please improve the following code.\n\n%s")
       ;; your new prompt
       ("my-custom-type" . "My custom prompt.\n\n%s")))
#+END_EXAMPLE


* Expand contractions
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:51
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
Written by ChatGPT. Pretty pointless.

#+begin_SRC emacs-lisp
(defun expand-contraction-at-point ()
  "If the current word is a contraction, replace it with its long-form phrase."
  (interactive)
  (let ((contraction-pairs '(("do not" "don't") ("will not" "won't") ("could not" "couldn't"))))
    (let ((current-phrase (current-word t t)))
      (dolist (pair contraction-pairs)
        (if (member current-phrase pair)
            (let ((long-form-phrase (car pair)) (contraction (cadr pair)))
              (if (string= current-phrase long-form-phrase)
                  (progn
                    (delete-region (point) (+ (point) (length current-phrase)))
                    (insert contraction))
                (progn
                  (delete-region (point) (+ (point) (length current-phrase)))
                  (insert long-form-phrase)))))
          )
        )
      )
    )

#+END_SRC


* org-drill
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:51
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
;; (use-package org-drill)
; (add-hook 'org-drill-hook (lambda () (flyspell-lazy-mode -1)))
; (setq org-drill-add-random-noise-to-intervals-p t)

;; (setq org-drill-use-visible-cloze-face-p t)
#+END_SRC




* org-sidebar-tree
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:51
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+begin_EXAMPLE emacs-lisp
(use-package org-sidebar)
;; (add-hook 'org-mode-hook 'org-sidebar-tree)
(setq org-sidebar-tree-side (quote left))
#+END_EXAMPLE



* show unique words
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:52
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+begin_src emacs-lisp
(defun show-unique-words (&optional alphabetical)
 "Collect all of the unique words in the current buffer and
display them in a new buffer. With prefix, alphabetize the
list."
 (interactive "P")
 (let ((buf (buffer-name))
    (new (get-buffer-create "*Unique Words*"))
    (txt (delete-dups (mapcar #'downcase
                 (split-string (buffer-string)
                        nil nil
                        "[^[:alnum:]]+")))))
  (with-current-buffer new
   (delete-region (point-min) (point-max))
   (insert (format "%d unique words in the <%s> buffer:\n\n"
           (length txt) buf))
   (cl-dolist (word (if alphabetical (sort txt #'string<) txt))
    (insert (concat word "\n"))))
  (pop-to-buffer new)))
#+end_src



* message-mode tab
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:52
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

#+BEGIN_SRC emacs-lisp
(autoload 'mail-hist-forward-header "mail-hist")
(autoload 'mail-text-start  "sendmail")

(defun my-message-signature-start ()
 "Return value of point at start of message signature."
 (save-mark-and-excursion
 (message-goto-signature)
 (point)))

(defun my-message-field-forward ()
 "Move point to next \"field\" in a `message-mode' buffer.
With each invocation, point is moved to the next field of
interest amongst header values, message body and message
signature, in that order."
 (interactive)
 (cond ((message-point-in-header-p)
  (unless (mail-hist-forward-header 1)
  (message-goto-body) (point)))
 ((>= (point) (my-message-signature-start))
  (message "No further field"))
 ((message-in-body-p)
  (message-goto-signature))
 (t ; Probably on `mail-header-separator' line
  (message-goto-body) (point))))

(defun my-message-field-backward ()
 "Like `my-message-field-forward', but in opposite direction."
 (interactive)
 (cond ((or (message-point-in-header-p)
  (<= (point) (mail-text-start)))
  (unless (mail-hist-forward-header
   (if (message-point-in-header-p) -1 0))
  (message "No further field")))
 ((<= (point) (my-message-signature-start))
  (message-goto-body) (point))
 (t ; Beyond start of signature
  (message-goto-signature))))



#+END_SRC

(with-eval-after-load 'message
 (define-key message-mode-map "\t" #'my-message-field-forward)
 (dolist (key '(message-tab backtab S-tab S-iso-lefttab))
 (define-key message-mode-map (vector key) #'my-message-field-backward)))



* org sticky header
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:53
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(use-package org-sticky-header

:config
(setq org-sticky-header-always-show-header nil)

)

#+END_EXAMPLE


* delete properties blocks
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:53
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
Doesn't work. use the command line tool. or figure out how to run shell script on current file

[[https://stackoverflow.com/questions/4697322/elisp-call-command-on-current-file][emacs - emacs-lisp: call command on current file - Stack Overflow]]

[[https://stackoverflow.com/questions/25929694/executing-shell-command-on-emacs-file-opening][emacs-lisp - Executing shell command on emacs file opening - Stack Overflow]]



I'm deactivating this because it doesn't work. Use delete-properties-blocks from command line instead.
#+BEGIN_EXAMPLE emacs-lisp
(defun delete-properties-blocks ()
(interactive)
(replace-regexp ":PROPERTIES:\\(?:.*\\|\n\\)*:END:" "")
)
#+END_EXAMPLE




* pomidor - a pomodoro timer
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:53
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(add-to-list 'load-path "/Users/jay/gnulisp/pomidor")
(use-package pomidor)
#+END_EXAMPLE



* org-reveal
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:53
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
(setq org-reveal-root "file:///Users/jay/Dropbox/github/reveal.js")
#+END_SRC


* ws-butler
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:53
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(setq ws-butler-global-mode t)
(ws-butler-global-mode)
#+END_EXAMPLE


* weather
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:54
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(use-package wttrin
 :ensure t
 :commands (wttrin)
 :init
 (setq wttrin-default-cities '("Toronto"
                "New York")))


;; function to open wttrin with first city on list
(defun bjm/wttrin ()
  "Open `wttrin' without prompting, using first city in `wttrin-default-cities'"
  (interactive)
  ;; save window arrangement to register
  (window-configuration-to-register :pre-wttrin)
  (delete-other-windows)
  ;; save frame setup
  (save-frame-config)
  (set-frame-width (selected-frame) 130)
  (set-frame-height (selected-frame) 48)
  ;; call wttrin
  (wttrin-query (car wttrin-default-cities))
  )
#+END_EXAMPLE


* yahoo weather
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:54
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(use-package
 :commands
 :bind (

  :map

  )
 :init
(setq yahoo-weather-location "New York "
yahoo-weather-mode t
yahoo-weather-temperture-format "%d "
yahoo-weather-use-F t
yahoo-weather-format "[New York---%(weather)---%(temperature)F]"
)

 :config


)
#+END_EXAMPLE



* bongo
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:54
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
'(bongo-default-directory "~/Dropbox/")

#+END_SRC


* podcaster
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:54
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
(setq podcaster-feeds-urls
  (quote
  ("http://sachachua.com/blog/tag/emacs-chat/podcast")))

(setq podcaster-mp3-player "VLC")

#+END_SRC


* eww
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:54
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
(setq eww-search-prefix "https://www.google.com/search?q=")
#+END_SRC


I love that I can search for whatever region is active by pressing M-s M-w in Emacs 25 --- this is something I never even knew I wanted!
But it just throws an error if region isn't active. So I advised it to prompt for a search string if region isn't active:
#+BEGIN_SRC emacs-lisp
(defun jab/eww-search (orig-fun &rest args)
 (if (region-active-p) (apply orig-fun args)
 (eww (read-string "Query: "))))
(advice-add 'eww-search-words :around #'jab/eww-search)

#+END_SRC




* presentations
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:55
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
** org-html-slideshow
 Set variables as safe
#+BEGIN_SRC emacs-lisp
(put 'org-export-html-style-include-scripts 'safe-local-variable (lambda (xx) t))

(put 'org-export-html-style-include-default 'safe-local-variable (lambda (xx) t))

(put 'buffer-file-coding-system 'safe-local-variable (lambda (xx) t))

(put 'my-org-buffer-local-mode 'safe-local-variable (lambda (xx) t))

(setq safe-local-variable-values


  (quote
  (
(eval define-key key-minor-mode-map
	  (kbd "SPC")
	  (quote insert-space))

(eval define-key org-mode-map
      (kbd ":")
      (quote insert-colon))


(org-html-head-include-scripts)
   (org-export-allow-bind-keywords . t)
   (eval define-key key-minor-mode-map
      (kbd "SPC")
      (quote insert-space)))))

#+END_SRC



* inline CSS on org-export
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:56
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_EXAMPLE emacs-lisp
(defun my-org-inline-css-hook (exporter)
 "Insert custom inline css"
 (when (eq exporter 'html)
  (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
      (path (concat dir "style.css"))
      (homestyle (or (null dir) (null (file-exists-p path))))
      (final (if homestyle "/Users/jay/Dropbox/web-design/custom-css/email.css" path))) ;; <- set your own style file path
   (setq org-html-head-include-default-style nil)
   (setq org-html-head (concat
              "<style type=\"text/css\">\n"
              "<!--/*--><![CDATA[/*><!--*/\n"
              (with-temp-buffer
               (insert-file-contents final)
               (buffer-string))
              "/*]]>*/-->\n"
              "</style>\n")))))

(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)

(setq org-export-htmlize-output-type 'inline-css)
#+END_EXAMPLE



* iCal
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:56
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
(setq org-icalendar-include-todo nil)
(setq org-icalendar-use-scheduled (quote (event-if-todo todo-start)))
(setq org-icalendar-alarm-time 60)
 (setq org-icalendar-combined-description "Jay Dixit---Emacs ")
 (setq org-icalendar-combined-name "Org-Mode")
(setq org-icalendar-store-UID nil)
(setq org-icalendar-timezone "(-18000 \"EST\") ")
(setq org-agenda-default-appointment-duration '15)

(defun org-icalendar-open-ics-file (file) (start-process "org-icalendar-open-ics-file-process" nil "open" "-a" "/Applications/Calendar.app" file)) (add-hook 'org-icalendar-after-save-hook 'org-icalendar-open-ics-file)
#+END_SRC


* proselint
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:56
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
Source: http://unconj.ca/blog/linting-prose-in-emacs.html

#+BEGIN_SRC emacs-lisp
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
        (id (one-or-more (not (any " "))))
        (message) line-end))
  :modes (text-mode markdown-mode gfm-mode org-mode))

(add-to-list 'flycheck-checkers 'proselint)

#+END_SRC



* mouse-copy
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:56
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
;; (use-package mouse-copy)
;; (global-set-key [C-down-mouse-1] 'mouse-drag-secondary-pasting)
;; (global-set-key [C-S-down-mouse-1] 'mouse-drag-secondary-moving)
#+END_SRC



* create directories when necessary
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:57
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

** Can I create directories that don't exist while creating a new file in emacs?

In emacs, I create a file by visiting it with C-x C-f. Let's say I'd like to create /home/myself/new_directory/file.txt.

If new_directory does not exist yet, is there a way to have it get created during the creation of file.txt without any extra steps? (I'm thinking of something like using the -p flag to mkdir in Linux.)

I feel like there's a different keystroke instead of C-x C-f that can do this, but I can't remember what it is.

You can also advise function find-file to transparently create necessary directories.

#+BEGIN_EXAMPLE
(defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
  "Create parent directory if not exists while visiting file."
  (unless (file-exists-p filename)
    (let ((dir (file-name-directory filename)))
      (unless (file-exists-p dir)
        (make-directory dir)))))
Simply put this in your .emacs somewhere and use C-x C-f as usual.
#+END_EXAMPLE

** create intermediate dirs when saving a file

Wow, this works.
#+BEGIN_EXAMPLE emacs-lisp
(add-hook 'before-save-hook
          (lambda ()
            (when buffer-file-name
              (let ((dir (file-name-directory buffer-file-name)))
                (when (and (not (file-exists-p dir))
                           (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                  (make-directory dir t))))))
#+END_EXAMPLE



* key chords
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:57
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

Hydras and key-chords.
q is a good candidate for chords, since in words it has u after, and only a few letters ever come before a q. so I tap my two pinkie-fingers on qp to summon a project(ile)-related hydra.

[[https://github.com/abo-abo/hydra][abo-abo/hydra]]



* email
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:58
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

** org-contacts

  #+BEGIEXAMPLERC emacs-lisp
(use-package org-contacts)
;; (use-package org-vcard)
(setq org-contacts-files (quote ("/Users/jay/nd/contacts-org-jay.txt")))



#+END_EXAMPLE

*** Maintaining an address-book with org-contacts

Note, mu4e supports built-in address autocompletion; Address autocompletion, and that is the recommended way to do this. However, it is also possible to manage your addresses with org-mode, using org-contacts41.

mu4e-actions defines a useful action (Actions) for adding a contact based on the From:-address in the message at point. To enable this, add to your configuration something like:

#+BEGIN_SRC emacs-lisp
(setq mu4e-org-contacts-file "/Users/jay/nd/contacts-org-jay.txt")
(add-to-list 'mu4e-headers-actions
 '("org-contact-add" . mu4e-action-add-org-contact) t)
(add-to-list 'mu4e-view-actions
 '("org-contact-add" . mu4e-action-add-org-contact) t)
#+END_SRC

After this, you should be able to add contacts using a o in the headers view and the message view, using the org-capture mechanism. Note, the shortcut character o is due to the first character of org-contact-add.



** html reply---doesn't work yet
#+BEGIN_SRC emacs-lisp
(defvar *gt-div-style* "border-left: 1px solid #CCC; padding-left: 16px;")

(defun org-mime-replace-multy-gt ()
(interactive)
(beginning-of-buffer)
(while (re-search-forward "\\(\\(^&gt;\\( *.*\\)?\n\\)+\\)" nil t)
(replace-match (concat "<div style='" *gt-div-style* "'>\n"
(replace-regexp-in-string "^&gt; ?" "" (match-string 1))
"</div> \n\n"))
(beginning-of-buffer)))



(add-hook 'org-mime-html-hook
(lambda ()
(org-mime-replace-multy-gt)))
#+END_SRC





*** new-email-from-subtree-with-signature

#+BEGIN_SRC emacs-lisp

(defun new-email-from-subtree-with-signature ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
 ; store location.
(widen)
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO (org-entry-get (point) "TO" t))
     (CC (org-entry-get (point) "CC" t))
     (BCC (org-entry-get (point) "BCC" t))
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
(end-of-buffer)
(insert "\nWarm regards,\nJay Dixit\n\n---\nJay Dixit
(646) 355-8001
[[http://jaydixit.com/][jaydixit.com]]
\n")
(message-goto-to))
))


(defun new-email-from-subtree-no-signature ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
(widen)
 ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO (org-entry-get (point) "TO" t))
     (CC (org-entry-get (point) "CC" t))
     (BCC (org-entry-get (point) "BCC" t))
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
;; (end-of-buffer)
)
))
#+END_SRC

*** request PDF
#+begin_src emacs-lisp
(defun request-pdf ()
  (interactive)
  (message-goto-subject)
  (insert "request for PDF")
(message-goto-body)
(insert
"Dear Professor,

I'm a psychology writer (New York Times, Psychology Today), currently at work on a book. I recently discovered your paper ")
(org-mac-link-chrome-insert-frontmost-url)
(insert " and I'm very interested in reading it.

I see that the paper is behind a paywall. Do you by chance have a PDF you could send me?

Thanks in advance!

Warm regards,
Jay Dixit

"
)
  )
#+end_src

*** erika-send-mail
#+BEGIN_SRC emacs-lisp
(defun erika-send-email ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "\"Erika Casriel\" <erika.casriel@comcast.net>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>")
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
)
))
#+END_SRC

**** erika-send-email-styled

#+BEGIN_SRC emacs-lisp
(defun erika-send-email-styled ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Erika Casriel <erika.casriel@comcast.net>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))



   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")

(goto-char (point-min))
          (org-mime-change-class-style "todo STARTED" "color:red;font-weight:bold")

        (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min))

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)
#+END_SRC

**** adrien-send-email-styled

#+BEGIN_SRC emacs-lisp
(defun adrien-send-email-styled ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Adrien Behn <adrien.behn@gmail.com>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))



   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")

(goto-char (point-min))
          (org-mime-change-class-style "todo STARTED" "color:red;font-weight:bold")

        (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min))

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)
#+END_SRC

**** erika-send-email-test---clone of erika-send-email-styled
This function should be kept exactly the same as the one above, except the emails should go only to myself or Rúdi. Used for testing purposes.

#+BEGIN_SRC emacs-lisp
(defun erika-send-email-test ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Erika Casriel <sunjaydixit@gmail.com>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <sunjaydixit@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min))

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)
#+END_SRC


** Automatic send email to myself

#+BEGIN_SRC emacs-lisp
(defun email-heading-to-me ()
  "Send the current org-mode heading as the body of an email, with headline
as the subject."
  (interactive)
  (save-excursion
    (org-mark-subtree)
    (let ((content (buffer-substring (point) (mark)))
          (SUBJECT (nth 4 (org-heading-components))))

      (compose-mail "your@email.here" SUBJECT)
      (message-goto-body)
      (insert content)
      (message-send)
      (message-kill-buffer))))
#+END_SRC

** fixup-css-region

#+BEGIN_SRC emacs-lisp
(defun fixup-css-region (begin end)
(interactive "r")
  (xah-replace-pairs-region begin end
                          '(["h2" "li"]
["<span class=\"todo DONE\">" "<span class=\"todo DONE\" style=\"color:green;font-weight:bold\">"]

["<span class=\"todo MISSED\">" "<span class=\"todo MISSED\" style=\"color:red;font-weight:bold\">"]

["<span class=\"todo TODO\">" "<span class=\"todo TODO\" style=\"color:red;font-weight:bold\">"]

))
)
#+END_SRC



* stripe buffer
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:59
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
;;(add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)

;; note that this slows everything down
;; (add-hook 'org-mode-hook 'turn-on-stripe-table-mode)

#+END_SRC


* which-key mode
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:59
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
;; (use-package which-key)
;; (setq which-key-popup-type 'side-window)
;; (setq which-key-side-window-location 'bottom)
;; (which-key-mode)
#+END_SRC


* a keybinding to open my accountability file
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:59
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

#+BEGIN_SRC emacs-lisp
;; (defun accountability-open ()
;;   (interactive)
;;   (find-file "/Users/jay/Dropbox/writing/notationaldata/accountability.org")
;;   )

;; (define-key key-minor-mode-map (kbd "<s-S-right>") 'accountability-open)

(defun warm-open ()
  (interactive)
  (find-file "/Users/jay/Dropbox/writing/notationaldata/fearless.org")
  )
(define-key key-minor-mode-map (kbd "<s-S-left>") 'playful-open)

#+END_SRC


* dictionary look up
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 00:59
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "/Users/jay/Downloads/dictionary-el-master")
#+END_SRC



* Chords
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 01:00
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
Emacs key-strokes are pretty gnarly. Especially for a VIM guy like me (Emacs evil-mode is the best VIM). Chords are so much more comfortable! For example I press j and x together instead of M-x. Just be careful when choosing chords that they are combinations you will never type normally. I mainly use chords for switching buffers, navigating windows, opening files, and transposing expressions.


* contract contractions
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 01:00
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
#+BEGIN_SRC emacs-lisp
(defun contract-contractions (begin end)
 (interactive "r")
 (xah-replace-pairs-region begin end
 '(
 ["do not" "don't"]
 ["I would" "I'd"]
 ["I had" "I'd"]
 ["did not" "didn't"]
 ["you would" "you'd"]
 ["I have" "I've"]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]

 )))
#+END_SRC


* key-seq
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 01:00
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:
key-seq.el provides a way to map pairs of sequentially but quickly pressed keys to commands. It includes two interactive functions: key-seq-define-global and key-seq-define which are complementary to key-chord-* functions found in key-chord.el. The difference is that key-seq-* functions produce bindings only in a defined key order while bindings defined with key-chord-* are symmetrical.

#+BEGIN_SRC emacs-lisp
(use-package key-seq)
(key-seq-define-global "qd" 'dired)
(key-seq-define text-mode-map "qf" 'flyspell-buffer)

;; (key-seq-define-global "mn" 'new-email-from-subtree-no-signature)
;; (key-seq-define-global "nm" 'new-email-from-subtree-with-signature)

;; these got hit accidentally via typos

#+END_SRC


* message mode
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-27 Mon 01:01
:ARCHIVE_FILE: ~/emacs/emacs-settings/shared-functions.org
:ARCHIVE_CATEGORY: shared-functions
:END:

** Report problems with the SMTP server

#+BEGIN_SRC emacs-lisp
(setq smtpmail-debug-info t)
#+END_SRC

** Add Cc and Bcc headers to the message buffer

#+BEGIN_SRC emacs-lisp
;; (setq message-default-mail-headers "Cc: \nBcc: \n")
(setq mail-user-agent 'message-user-agent)
(setq auto-mode-alist (cons '("\\.email" . message-mode) auto-mode-alist))
#+END_SRC

** Wrapper for ~message-mail~ that prompts for the 'to' and 'subject' lines

#+BEGIN_SRC emacs-lisp
(defun mail-region (b e to subject)
  "Send the current region in an email"
  (interactive "r\nsRecipient: \nsSubject: ")
  (let ((orig-buffer (current-buffer)))
    (message-mail to subject)
    (message-goto-body)
    (insert (save-excursion (set-buffer orig-buffer)
			    (buffer-substring-no-properties b e)))
    (message-send-and-exit)))
#+END_SRC

** Forgot what this is

#+BEGIN_SRC emacs-lisp
(add-to-list 'completion-styles 'initials t)
#+END_SRC

** require orgalist
#+begin_src emacs-lisp
;; (use-package orgalist)
#+end_src

