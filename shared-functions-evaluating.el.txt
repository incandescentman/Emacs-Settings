
(defvar oleh-ido-shortcuts
  '(("~/" "~")
    ("~/Dropbox/source/site-lisp/" "!")
    ("~/git/lispy/" "@")))

(mapc (lambda (x)
        (setcar x (ido-find-file-jump (car x))))
      oleh-ido-shortcuts)

(defun oleh-ido-setup-hook ()
  (mapc
   (lambda (x)
     (define-key ido-file-dir-completion-map (cadr x) (car x)))
   oleh-ido-shortcuts))

(add-hook 'ido-setup-hook 'oleh-ido-setup-hook)

;; (use-package engine-mode)
;; (engine-mode t)

;; (defengine google  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"  "g")

;; [[file:shared-functions.org::*Google search through Gnugol][Google search through Gnugol:1]]
;; (use-package gnugol)

(defun region-or-word-at-point ()
  (if (use-region-p)
      (buffer-substring-no-properties
       (region-beginning)
       (region-end))
    (substring-no-properties
     (thing-at-point 'word))))

 ;; (defun gnugol-word-at-point ()
 ;;   (interactive)
 ;;  (gnugol-search-google (region-or-word-at-point)))
;; Google search through Gnugol:1 ends here

(defun cleanup-buffer-safe ()
 "Perform a bunch of safe operations on the whitespace content of a buffer.
Does not indent buffer, because it is used for a before-save-hook, and that
might be bad."
 (interactive)
 (untabify-buffer)
 (delete-trailing-whitespace)
 (set-buffer-file-coding-system 'utf-8))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer.
Including indent-buffer, which should not be called automatically on save."
  (interactive)
  (cleanup-buffer-safe)
  (indent-region (point-min) (point-max)))

(global-set-key (kbd "C-c n") 'cleanup-buffer)

(global-set-key (kbd "M-C-N") 'outline-next-visible-heading)
(global-set-key (kbd "M-C-P") 'outline-previous-visible-heading)
(define-key key-minor-mode-map (kbd "M-C-N") 'outline-next-visible-heading)
(define-key key-minor-mode-map (kbd "M-C-P") 'outline-previous-visible-heading)

(global-set-key (kbd "M-N") 'org-forward-heading-same-level)
(global-set-key (kbd "M-n") 'org-next-visible-heading)
(global-set-key (kbd "M-P") 'org-backward-heading-same-level)
(global-set-key (kbd "M-p") 'org-previous-visible-heading)
(define-key key-minor-mode-map (kbd "M-N") 'org-forward-heading-same-level)
(define-key key-minor-mode-map (kbd "M-P") 'org-backward-heading-same-level)


(define-key key-minor-mode-map (kbd "M-{") 'org-backward-heading-same-level)
(define-key key-minor-mode-map (kbd "M-}") 'org-forward-heading-same-level)
(define-key key-minor-mode-map (kbd "M-[") 'org-backward-heading-same-level)
(define-key key-minor-mode-map (kbd "M-]") 'org-forward-heading-same-level)

(global-set-key (kbd "s-p") 'org-export-dispatch)
(define-key key-minor-mode-map (kbd "s-p") 'org-export-dispatch)

(global-set-key (kbd "M-1") 'auto-capitalize-mode)
;; (global-set-key (kbd "s-u") 'dired-single)


(define-key global-map (kbd "<C-wheel-up>") (lambda ()
                                              (interactive)
                                              (scroll-up-command)))
(define-key global-map (kbd "<C-wheel-down>") (lambda ()
                                               (interactive)
                                               (scroll-down-command)))

(global-set-key "\C-f" 'forward-word)
(global-set-key "\C-b" 'backward-word)

(global-set-key '[(f5)] 'point-stack-push)
(global-set-key '[(f6)] 'point-stack-pop)
(global-set-key '[(f7)] 'point-stack-forward-stack-pop)
(global-set-key '[(f8)] 'search-open-buffers)

(define-key key-minor-mode-map (kbd "<M-S-backspace>") 'backward-kill-sexp)
(define-key key-minor-mode-map (kbd "<M-S-backspace>") 'backward-kill-sexp)
(define-key key-minor-mode-map (kbd "<M-S-backspace>") 'backward-kill-sexp)
(define-key key-minor-mode-map (kbd "<M-S-backspace>") 'backward-kill-sexp)

;; (global-set-key (kbd "C-h") 'delete-backward-char)

(global-set-key (kbd "M-h") 'help-command)

;; (define-key key-minor-mode-map (kbd "C-x C-f") 'helm-find-files)
;; (define-key key-minor-mode-map (kbd "C-x C-f") 'ido-find-file-in-dir)
(global-set-key (kbd "C-c h") 'helm-mini)

(global-set-key "\C-ce" 'eval-buffer)
(global-set-key "\C-cr" 'eval-region)
(define-key org-mode-map (kbd "`") 'flyspell-auto-correct-word)
;; (define-key key-minor-mode-map (kbd "`") 'flyspell-auto-correct-word)
(global-set-key (kbd "s-z") 'undo)
(global-set-key (kbd "s-y") 'redo)

(defvar gnuemacs-flag (string-match "GNU" (emacs-version)))
(defvar aquamacs-flag (string-match "Aquamacs" (emacs-version)))

(defun define-super-key (key fun)
  (cond
   (aquamacs-flag
    (define-key osx-key-mode-map (kbd (concat "A-" key)) fun))
   (gnuemacs-flag
    (define-key key-minor-mode-map (kbd (concat "s-" key)) fun))))

(define-super-key "h" 'replace-string)


(define-super-key "m" 'mc/mark-all-like-this-dwim)


(define-super-key "\\" 'visit-most-recent-file)

;; (define-super-key "f" 'isearch-forward)
(define-super-key "F" 'pasteboard-search-for-clipboard-contents)
;; (define-super-key "R" 'helm-projectile-recentf)
;; (define-super-key "r" 'helm-mini)

(define-super-key "R" 'projectile-find-file)
(define-super-key "t" 'new-buffer)
(define-super-key "T" 'org-new-scratch-buffer)
(define-super-key "g" 'isearch-repeat-forward)
(define-super-key "k" 'kill-buffer)
(define-super-key "K" 'org-cut-subtree)
(define-super-key "d" 'org-todo)
(define-super-key "L" 'org-mac-link-chrome-insert-frontmost-url)
(define-super-key "S" 'org-mac-link-skim-insert-page)
(define-super-key "a" 'mark-whole-buffer) ; select all
(define-super-key "w" 'delete-window) ; close
;; (define-super-key "`" 'other-window-or-frame)
(define-super-key "s" 'jay/save-some-buffers ) ; save all

(define-super-key "4" 'clone-indirect-buffer-other-window)
(define-super-key "5" 'point-stack-push)
(define-super-key "6" 'point-stack-pop)
(define-super-key "7" 'point-stack-forward-stack-pop)
(define-super-key "8" 'search-open-buffers)
;; (define-super-key "o" 'eval-buffer)
(define-super-key "F" 'pasteboard-search-for-clipboard-contents)
(define-super-key "(" 'org-velocity)
(define-super-key "{" 'path-copy-path-to-clipboard)
(define-super-key "}" 'path-copy-path-to-clipboard)
;; why not use N and P here? TODO



;; (define-super-key "j a" 'org-agenda)
(define-super-key "j j" 'helm-imenu-anywhere)
;; (define-super-key ";" 'ido-goto-symbol)
;; (define-super-key ";" 'helm-resume)
;; (define-super-key "D" 'diredp-dired-recent-dirs)

(define-super-key "j cy" 'cyberpunk-jay)
(define-super-key "j cl" 'cyberpunk-large)
(define-super-key "j zb" 'zenburn)
(define-super-key "j le" 'leuven)
(define-super-key "j ts" 'transparent-serenity)
(define-super-key "j tg" 'top-gun-mode)
(define-super-key "j tn" 'tomorrow-night)

(define-super-key "j ma" 'inverse-add-global-abbrev)

(define-super-key "j rr" 'replace-regexp)


(define-super-key "j cf" 'customize-face)

;; (define-super-key "j h" 'org-export-dispatch)




;(define-super-key "j nm" 'notmuch-hello)
(define-super-key "j mu" 'mu4e)

;; (define-super-key "j cl" 'cyberpunk-large)

(define-super-key "j dd" 'delete-duplicate-lines-keep-blanks)

(define-super-key "j cw" 'count-words)
(define-super-key "j wb" 'whiteboard)
(define-super-key "j sl" 'spacemacs-light)

(define-super-key "j sd" 'solarized-dark)
(define-super-key "j ri" 'ritchie)
(define-super-key "j sp" 'spolsky)
(define-super-key "j wr" 'writeroom-mode)
(define-super-key "j wf" 'workflowy-mode)
(define-super-key "j st" 'small-type)
(define-super-key "j mp" 'morning-pages)
(define-super-key "j lt" 'load-theme)
(define-super-key "j mt" 'medium-type)

(define-super-key "j bl" 'blue-light)

(define-super-key "j eu" 'endless/upgrade)


;; accountability

(define-super-key "j ek" 'erika-send-email-styled)
(define-super-key "j ad" 'adrien-send-email-styled)

(defun keybinding-read-and-insert (key)
  (interactive "kKey: ")
(insert "(define-key key-minor-mode-map ")
        (insert (format "(kbd \"%s\")" (key-description key)))
        (insert " '")
(save-excursion (insert ")")
                ))

(define-super-key "j kb" 'keybinding-read-and-insert)
(define-super-key "j mk" 'keybinding-read-and-insert)

(define-key key-minor-mode-map (kbd "M-s-k") 'org-cut-subtree)
(define-key key-minor-mode-map (kbd "C-s-k") 'org-cut-subtree)

(defun my-isearch-word-at-point ()
  (interactive)
  (call-interactively 'isearch-forward-regexp))

(defun my-isearch-yank-word-hook ()
  (when (equal this-command 'my-isearch-word-at-point)
    (let ((string (concat "\\<"
			  (buffer-substring-no-properties
			   (progn (skip-syntax-backward "w_") (point))
			   (progn (skip-syntax-forward "w_") (point)))
			  "\\>")))
      (if (and isearch-case-fold-search
	       (eq 'not-yanks search-upper-case))
	  (setq string (downcase string)))
      (setq isearch-string string
	    isearch-message
	    (concat isearch-message
		    (mapconcat 'isearch-text-char-description
			       string ""))
	    isearch-yank-flag t)
      (isearch-search-and-update))))

(add-hook 'isearch-mode-hook 'my-isearch-yank-word-hook)

;; (global-set-key "\C-cw" 'my-isearch-word-at-point)

(use-package cl)


(defcustom search-open-buffers-ignored-files (list (rx-to-string '(and bos (or ".bash_history" "TAGS" "Preferences" "Backtrace" "Messages" "Custom" "scratch") eos)))
  "Files to ignore when searching buffers via \\[search-open-buffers]."
  :type 'editable-list)

(use-package grep)

(defun search-open-buffers (regexp prefix)
  "Searches file-visiting buffers for occurence of REGEXP. With
prefix > 1 (i.e., if you type C-u \\[search-open-buffers]),
searches all buffers."
  (interactive (list (grep-read-regexp)
                     current-prefix-arg))
  (message "Regexp is %s; prefix is %s" regexp prefix)
  (multi-occur
   (if (member prefix '(4 (4)))
       (buffer-list)
     (remove-if
      (lambda (b) (some (lambda (rx) (string-match rx  (file-name-nondirectory (buffer-file-name b)))) search-open-buffers-ignored-files))
      (remove-if-not 'buffer-file-name (buffer-list))))

   regexp))

(add-hook 'isearch-mode-end-hook 'my-goto-match-beginning)

(defun my-goto-match-beginning ()
  (when (and isearch-forward isearch-other-end)
    (goto-char isearch-other-end)))

(defadvice isearch-exit (after my-goto-match-beginning activate)
  "Go to beginning of match."
  (when (and isearch-forward isearch-other-end)
    (goto-char isearch-other-end))
(recenter-top-bottom)
)

(defun isearch-from-buffer-start ()
  (interactive)
  (push-mark)
  (goto-char (point-min))
  (isearch-forward))

(use-package helm-swoop)
; (global-set-key (kbd "M-i") (lambda() (interactive) (helm-swoop :$query nil)))

(setq helm-swoop-pre-input-function
      (lambda () nil))

(define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)

;; (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)

(setq helm-multi-swoop-edit-save t)

(setq helm-swoop-split-with-multiple-windows nil)

;; (setq helm-swoop-split-direction 'split-window-vertically)

(setq helm-swoop-speed-or-color nil)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(global-set-key (kbd "C-x r l") #'helm-filtered-bookmarks)
(global-set-key (kbd "M-y")     #'helm-show-kill-ring)
(global-set-key (kbd "M-s /")   #'helm-multi-swoop)

(setq helm-ff-transformer-show-only-basename nil
      helm-adaptive-history-file             "~/emacs/.savefile/helm-history"
      helm-yank-symbol-first                 t
      helm-move-to-line-cycle-in-source      t
      helm-buffers-fuzzy-matching            t
      helm-ff-auto-update-initial-value      t)

(autoload 'helm-descbinds      "helm-descbinds" t)
(autoload 'helm-eshell-history "helm-eshell"    t)
(autoload 'helm-esh-pcomplete  "helm-eshell"    t)

(global-set-key (kbd "M-h a")    #'helm-apropos)
(global-set-key (kbd "M-h i")    #'helm-info-emacs)
(global-set-key (kbd "M-h b")    #'helm-descbinds)

(add-hook 'eshell-mode-hook
          #'(lambda ()
              (define-key eshell-mode-map (kbd "TAB")     #'helm-esh-pcomplete)
              (define-key eshell-mode-map (kbd "C-c C-l") #'helm-eshell-history)))


(global-set-key (kbd "C-x c!")   #'helm-calcul-expression)
(global-set-key (kbd "C-x c:")   #'helm-eval-expression-with-eldoc)
(define-key helm-map (kbd "M-o") #'helm-previous-source)

(global-set-key (kbd "M-s s")   #'helm-again)

(use-package projectile

:config
(setq projectile-completion-system (quote helm))
(setq projectile-enable-caching nil)
;; (setq projectile-globally-ignored-buffers (quote ("docx ")))
(setq projectile-globally-ignored-file-suffixes (quote ("docx " "jpg" "png" "tmp" "tex" "html" "pdf" "pptx" "tmp")))
(setq projectile-globally-ignored-directories
   (quote
    (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn"".tmp" "archived-work" "images" "excel-mindnode-omni" "archive")))


(setq projectile-globally-ignored-files
  (quote
  ("TAGS" ".DS_Store" ".projectile" ".dropbox")))


:bind (:map projectile-mode-map
( "s-o" . nil)
))

(setq ad-redefinition-action 'accept)
(use-package helm-projectile

:config
(setq helm-projectile-sources-list (cons 'helm-source-projectile-files-list
(remove 'helm-source-projectile-files-list helm-projectile-sources-list)))
)

(helm-projectile-on)

(define-key projectile-mode-map (kbd "C-c p /")
  #'(lambda ()
      (interactive)
      (helm-ag (projectile-project-root))))

(progn
  ;; set arrow keys in isearch. left/right is backward/forward, up/down is history. press Return to exit
;;  (define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat )
;; (define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance )
  (define-key isearch-mode-map (kbd "<tab>") 'isearch-ring-advance )
  (define-key isearch-mode-map (kbd "<S-tab>") 'isearch-repeat-backward) ; single key, useful

;  (define-key isearch-mode-map (kbd "<right>") 'isearch-repeat-forward) ; single key, useful
 )

(use-package ivy


 :config

(define-key ivy-minibuffer-map (kbd "SPC") 'insert-space)
(define-key ivy-minibuffer-map (kbd "s-v") 'pasteboard-paste-no-spaces)
(setq ivy-height 25)
(setq ivy-display-style 'fancy)

)

(global-set-key (kbd "C-s") 'swiper)
(setq ivy-re-builders-alist
 '((t . ivy--regex-plus)))



(define-key key-minor-mode-map (kbd "C-7") 'swiper-mc)

(ivy-add-actions t
 '(("W" kill-new "save to kill ring")
  ("I" insert "insert in buffer")))

(defun ivy-dired-mark (arg)
 (interactive "p")
 (dotimes (_i arg)
  (with-selected-window swiper--window
   (dired-mark 1))
  (ivy-next-line 1)
  (ivy--exhibit)))

(defun ivy-dired-unmark (arg)
 (interactive "p")
 (dotimes (_i arg)
  (with-selected-window swiper--window
   (dired-unmark 1))
  (ivy-next-line 1)
  (ivy--exhibit)))

(defun ivy-replace ()
 (interactive)
 (let ((from (with-selected-window swiper--window
        (move-beginning-of-line nil)
        (when (re-search-forward
            (ivy--regex ivy-text) (line-end-position) t)
         (match-string 0)))))
  (if (null from)
    (user-error "No match")
   (let ((rep (read-string (format "Replace [%s] with: " from))))
    (with-selected-window swiper--window
     (undo-boundary)
     (replace-match rep t t))))))

(defun ivy-undo ()
 (interactive)
 (with-selected-window swiper--window
  (undo)))


(defhydra hydra-ivy (:hint nil
           :color pink)
 "
^^^^^^     ^Actions^  ^Dired^   ^Quit^
^^^^^^--------------------------------------------
^ ^ _l_ ^ ^   _._ repeat  _m_ark   _i_: cancel
_j_ ^✜^ _;_   _r_eplace  _,_ unmark _o_: quit
^ ^ _k_ ^ ^   _u_ndo
"
 ;; arrows
 ("j" ivy-beginning-of-buffer)
 ("k" ivy-next-line)
 ("l" ivy-previous-line)
 (";" ivy-end-of-buffer)
 ;; actions
 ("." hydra-repeat)
 ("r" ivy-replace)
 ("u" ivy-undo)
 ;; dired
 ("m" ivy-dired-mark)
 ("," ivy-dired-unmark)
 ;; exit
 ("o" keyboard-escape-quit :exit t)
 ("i" nil))

(define-key ivy-minibuffer-map (kbd "C-o") 'hydra-ivy/body)

;;; Tell ispell.el that ’ can be part of a word.
(setq ispell-local-dictionary-alist
      `((nil "[[:alpha:]]" "[^[:alpha:]]"
             "['\x2019]" nil ("-B") nil utf-8)))

;;; Don't send ’ to the subprocess.
(defun endless/replace-apostrophe (args)
  (cons (replace-regexp-in-string
         "’" "'" (car args))
        (cdr args)))
(advice-add #'ispell-send-string :filter-args
            #'endless/replace-apostrophe)

;;; Convert ' back to ’ from the subprocess.
(defun endless/replace-quote (args)
  (if (not (derived-mode-p 'org-mode))
      args
    (cons (replace-regexp-in-string
           "'" "’" (car args))
          (cdr args))))
(advice-add #'ispell-parse-output :filter-args
            #'endless/replace-quote)

;; (use-package palimpsest)
(palimpsest-mode 1)
(define-key org-mode-map (kbd "C-c C-r") 'palimpsest-move-region-to-bottom)

(font-lock-add-keywords
 'org-mode '(("^\\(:+\\) " 1 (compose-region (match-beginning 1) (match-end 1) ?❱) nil)))

(defun replace-word (tosearch toreplace)
  (interactive "sSearch for word: \nsReplace with: ")
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search nil)
          (count 0))
      (while (re-search-forward (concat "\\b" tosearch "\\b") nil t)
        (setq count (1+ count))
        (replace-match toreplace 'fixedcase 'literal))
      (message "Replaced %s match(es)" count))))

(setq never-downcase-words '("Internet" "Jay" "Dixit" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday" "York" "Canada" "I" "U" "I'm" "I'll" "I've" "I'd" "OK"))

(setq auto-capitalize-predicate
      (lambda ()
        (and
         (not (org-checkbox-p))
         (save-match-data
           (not (and
;; (org-or-orgalist-p)
                 (looking-back
                 "\\[\\[.*\\]\\][^.\n]*\\.?"))))
         (save-match-data
           (not (looking-back
                 "\\([Ee]\\.g\\|[Uu]\\.S\\|[Uu]\\.K\\|Ph\\.D\\|\\bal\\|Mr\\|Mrs\\|[M]s\\|cf\\|[N]\\.B\\|[U]\\.N\\|[E]\\.R\\|[M]\\.C\\|[Vv]S\\|[Ii]\.e\\|\\.\\.\\)\\.[^.\n]*\\|E.R\\|\!\"[ ]*\\|\?\"[ ]*"
                 (- (point) 20)))))))

(setq auto-capitalize-words '("fn" "\bI\b" "setq" "iPhone" "IPad" "nil" "use" "ediff" "btw" "nyc" "file" "http" "provide" "load" "require" "alias" "looking-at" "blockquote" "http" "https" "eBay" "omg" "zk" "http" "https" "looking" "or" "youarehere"))

(advice-add #'org-remove-angle-brackets :before-until
            (lambda (s) (if (string-prefix-p "mailto:" s) s)))

;(setq set-mark-command-repeat-pop t)

(setq custom-safe-themes t)

(use-package key-seq)
(key-seq-define-global "qd" 'dired)
(key-seq-define text-mode-map "qf" 'flyspell-buffer)

;; (key-seq-define-global "mn" 'new-email-from-subtree-no-signature)
;; (key-seq-define-global "nm" 'new-email-from-subtree-with-signature)

;; these got hit accidentally via typos

(defun org-toggle-heading-same-level ()
  "Toggles the current line between a non-heading and TODO heading."
  (interactive)
  (let ((is-heading))
    (save-excursion
      (forward-line 0)
      (when (looking-at "^\\*")
        (setq is-heading t)))
    (if is-heading
        (progn
          (org-todo 'none) ; remove TODO
          (org-toggle-heading)) ; remove heading
      (progn
        (org-toggle-heading) ; convert to heading
(org-do-promote)
;        (org-todo 'nextset)
)))) ; add TODO#+END_SRC

(defun org-toggle-todo-heading ()
  "Toggles the current line between a non-heading and TODO heading."
  (interactive)
  (let ((is-heading))
    (save-excursion
      (forward-line 0)
      (when (looking-at "^\\*")
        (setq is-heading t)))
    (if is-heading
        (progn
          (org-todo 'none) ; remove TODO
          (org-toggle-heading)) ; remove heading
      (progn
        (org-toggle-heading) ; convert to heading
(org-do-promote)
        (org-todo 'nextset))))) ; add TODO#+END_SRC

(defun delete-extra-whitespace-region (beg end)
  "replace all whitespace in the region with single spaces"
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (while (re-search-forward "^\\s-+" nil t)
        (replace-match "")))))

(defun double-line-breaks-in-region (begin end)
  (interactive "r")
  (xah-replace-pairs-region begin end
 '(
 ["\r" "\n\n"]
["\n" "\n\n"]
)))

(use-package xah-replace-pairs)
(defun xah-convert-entities-to-html-chars-region (begin end)
  (interactive "r")
  (xah-replace-pairs-region begin end
 '(
 ["&" "&amp;"]
 ["<" "&lt;"]
 [">" "&gt;"]
 )))


(defun xah-convert-html-chars-to-entities-region (begin end)
 (interactive "r")
 (xah-replace-pairs-region begin end
 '(
 ["&amp;" "&"]
 ["&lt;" "<"]
 ["&gt;" ">"]
 )))

(defun contract-contractions (begin end)
 (interactive "r")
 (xah-replace-pairs-region begin end
 '(
 ["do not" "don't"]
 ["I would" "I'd"]
 ["I had" "I'd"]
 ["did not" "didn't"]
 ["you would" "you'd"]
 ["I have" "I've"]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]
 ;; ["" ""]

 )))

(defun helm-do-grep-current-directory-tree ()
  "Recursively search current directory.
If a parent directory has a `dir-locals-file', use that as the
root instead."
  (interactive)
  (let ((variables-file (dir-locals-find-file
                         (or (buffer-file-name) default-directory))))
    (helm-do-grep-1
     (list
      (cond
       ((stringp variables-file)
        (file-name-directory variables-file))
       ((consp variables-file)
        (nth 0 variables-file))
       (t default-directory)))
     t nil '("*"))))

(defun contract-contractions (begin end)
(interactive "r")
  (xah-replace-pairs-region begin end
 '(
 ["I have" "I've"]
["I am" "I'm"]
)))

(defun dcaps-to-scaps ()
  "Convert word in DOuble CApitals to Single Capitals."
  (interactive)
  (and (= ?w (char-syntax (char-before)))
       (save-excursion
         (and (if (called-interactively-p)
                  (skip-syntax-backward "w")
                (= -3 (skip-syntax-backward "w")))
              (let (case-fold-search)
                (looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
              (capitalize-word 1)))))

(add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)

(define-minor-mode dubcaps-mode
  "Toggle `dubcaps-mode'.  Converts words in DOuble CApitals to
Single Capitals as you type."
  :init-value nil
  :lighter (" DC")
  (if dubcaps-mode
      (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
    (remove-hook 'post-self-insert-hook #'dcaps-to-scaps 'local)))

(use-package yasnippet
:ensure t
:bind
("C-c e" . yas-load-snippet-buffer)
("." . insert-period)
:init
(yas-global-mode 1)

:config
;; load yasnippet directories
(setq yas-snippet-dirs '("~/emacs/interesting-snippets" "~/emacs/snippets"))

(add-hook 'yas-before-expand-snippet-hook (key-minor-mode nil))
(add-hook 'yas-after-exit-snippet-hook (key-minor-mode 1))



;; don't insert random spaces in my prose
(setq yas-indent-line (quote none))

;; take input word including hyphen.
(setq yas/key-syntaxes '("w_" "w_." "^ ")) ; default is '("w" "w_" "w_." "^ ")

;; suppress backquote warnings, whatever those are
;; (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
)

(defun suppress-backquote-warnings ()
(interactive)
(add-to-list 'warning-suppress-types '(yasnippet backquote-change))
  )

(defun yas-org-very-safe-expand ()
   (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))

(add-hook 'org-mode-hook
     (lambda ()
      (make-variable-buffer-local 'yas--trigger-key)
      (setq yas-trigger-key [tab])
      (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
      (define-key yas-keymap [tab] 'yas-next-field)))

(use-package flyspell

:config
'(flyspell-abbrev-p t)
'(flyspell-use-global-abbrev-table-p t)
'(global-flyspell-mode t)

:bind
(:map flyspell-mode-map
("C-." . nil)
)
)

(setq flyspell-mark-duplications-exceptions
 (quote
 ((nil "that" "had" "really" "very" "much")
  ("\\`francais" "nous" "vous"))))

;; NO spell check for embedded snippets
(defadvice org-mode-flyspell-verify (after org-mode-flyspell-verify-hack activate)
  (let ((rlt ad-return-value)
        (begin-regexp "^[ \t]*#\\+begin_\\(src\\|html\\|latex\\)")
        (end-regexp "^[ \t]*#\\+end_\\(src\\|html\\|latex\\)")
        old-flag
        b e)
    (when ad-return-value
      (save-excursion
        (setq old-flag case-fold-search)
        (setq case-fold-search t)
        (setq b (re-search-backward begin-regexp nil t))
        (if b (setq e (re-search-forward end-regexp nil t)))
        (setq case-fold-search old-flag))
      (if (and b e (< (point) e)) (setq rlt nil)))
    (setq ad-return-value rlt)))

(use-package tiny)
(tiny-setup-default)

(defun new-week ()
  (interactive)
(tiny-expand "m0\n7|*** committed actions:  <%(date "mon" x)>\n**** TODO \n")
  )

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (make-local-variable 'outline-regexp)
            (setq outline-regexp "^;;; ")
            (make-local-variable 'outline-heading-end-regexp)
            (setq outline-heading-end-regexp ":\n")
            (outline-minor-mode 1)
))

;; (use-package which-key)
;; (setq which-key-popup-type 'side-window)
;; (setq which-key-side-window-location 'bottom)
;; (which-key-mode)

;; (defun accountability-open ()
;;   (interactive)
;;   (find-file "/Users/jay/Dropbox/writing/notationaldata/accountability.org")
;;   )

;; (define-key key-minor-mode-map (kbd "<s-S-right>") 'accountability-open)

(defun warm-open ()
  (interactive)
  (find-file "/Users/jay/Dropbox/writing/notationaldata/fearless.org")
  )
(define-key key-minor-mode-map (kbd "<s-S-left>") 'playful-open)

;; (add-to-list 'load-path "/Users/jay/Downloads/dictionary-el-master")

(use-package re-builder)
(setq reb-re-syntax 'string)

(defun reb-query-replace-this-regxp (replace)
 "Uses the regexp built with re-builder to query the target buffer.
This function must be run from within the re-builder buffer, not the target
buffer.

Argument REPLACE String used to replace the matched strings in the buffer.
 Subexpression references can be used (\1, \2, etc)."
 (interactive "sReplace with: ")
 (if (eq major-mode 'reb-mode)
   (let ((reg (reb-read-regexp)))
    (select-window reb-target-window)
    (save-excursion
     (beginning-of-buffer)
     (query-replace-regexp reg replace)))
  (message "Not in a re-builder buffer!")))

(define-key reb-mode-map "\C-c\M-%" 'reb-query-replace-this-regxp)

;;(add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)

;; note that this slows everything down
;; (add-hook 'org-mode-hook 'turn-on-stripe-table-mode)

(setq mu4e-org-contacts-file "/Users/jay/nd/contacts-org-jay.txt")
(add-to-list 'mu4e-headers-actions
 '("org-contact-add" . mu4e-action-add-org-contact) t)
(add-to-list 'mu4e-view-actions
 '("org-contact-add" . mu4e-action-add-org-contact) t)

(defvar *gt-div-style* "border-left: 1px solid #CCC; padding-left: 16px;")

(defun org-mime-replace-multy-gt ()
(interactive)
(beginning-of-buffer)
(while (re-search-forward "\\(\\(^&gt;\\( *.*\\)?\n\\)+\\)" nil t)
(replace-match (concat "<div style='" *gt-div-style* "'>\n"
(replace-regexp-in-string "^&gt; ?" "" (match-string 1))
"</div> \n\n"))
(beginning-of-buffer)))



(add-hook 'org-mime-html-hook
(lambda ()
(org-mime-replace-multy-gt)))

(defun new-email-from-subtree-with-signature ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
 ; store location.
(widen)
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO (org-entry-get (point) "TO" t))
     (CC (org-entry-get (point) "CC" t))
     (BCC (org-entry-get (point) "BCC" t))
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
(end-of-buffer)
(insert "\nWarm regards,\nJay Dixit\n\n---\nJay Dixit
(646) 355-8001
[[http://jaydixit.com/][jaydixit.com]]
\n")
(message-goto-to))
))


(defun new-email-from-subtree-no-signature ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
(widen)
 ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO (org-entry-get (point) "TO" t))
     (CC (org-entry-get (point) "CC" t))
     (BCC (org-entry-get (point) "BCC" t))
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
;; (end-of-buffer)
)
))

(defun request-pdf ()
  (interactive)
  (message-goto-subject)
  (insert "request for PDF")
(message-goto-body)
(insert
"Dear Professor,

I'm a psychology writer (New York Times, Psychology Today), currently at work on a book. I recently discovered your paper ")
(org-mac-link-chrome-insert-frontmost-url)
(insert " and I'm very interested in reading it.

I see that the paper is behind a paywall. Do you by chance have a PDF you could send me?

Thanks in advance!

Warm regards,
Jay Dixit

"
)
  )

(defun erika-send-email ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "\"Erika Casriel\" <erika.casriel@comcast.net>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>")
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
)
))

(defun erika-send-email-styled ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Erika Casriel <erika.casriel@comcast.net>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))



   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")

(goto-char (point-min))
          (org-mime-change-class-style "todo STARTED" "color:red;font-weight:bold")

        (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min))

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)

(defun adrien-send-email-styled ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Adrien Behn <adrien.behn@gmail.com>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))



   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")

(goto-char (point-min))
          (org-mime-change-class-style "todo STARTED" "color:red;font-weight:bold")

        (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min))

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)

(defun erika-send-email-test ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Erika Casriel <sunjaydixit@gmail.com>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <sunjaydixit@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min))

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)

(defun email-heading-to-me ()
  "Send the current org-mode heading as the body of an email, with headline
as the subject."
  (interactive)
  (save-excursion
    (org-mark-subtree)
    (let ((content (buffer-substring (point) (mark)))
          (SUBJECT (nth 4 (org-heading-components))))

      (compose-mail "your@email.here" SUBJECT)
      (message-goto-body)
      (insert content)
      (message-send)
      (message-kill-buffer))))

(defun fixup-css-region (begin end)
(interactive "r")
  (xah-replace-pairs-region begin end
                          '(["h2" "li"]
["<span class=\"todo DONE\">" "<span class=\"todo DONE\" style=\"color:green;font-weight:bold\">"]

["<span class=\"todo MISSED\">" "<span class=\"todo MISSED\" style=\"color:red;font-weight:bold\">"]

["<span class=\"todo TODO\">" "<span class=\"todo TODO\" style=\"color:red;font-weight:bold\">"]

))
)

(add-hook 'find-file-hooks 'assume-new-is-modified)
(defun assume-new-is-modified ()
  (when (not (file-exists-p (buffer-file-name)))
    (set-buffer-modified-p t)))

(defun my-dired-create-file (file)
       "Create a file called FILE.
If FILE already exists, signal an error."
       (interactive
        (list (read-file-name "Create file: " (dired-current-directory))))
       (let* ((expanded (expand-file-name file))
              (try expanded)
              (dir (directory-file-name (file-name-directory expanded)))
              new)
         (if (file-exists-p expanded)
             (error "Cannot create file %s: file exists" expanded))
         ;; Find the topmost nonexistent parent dir (variable `new')
         (while (and try (not (file-exists-p try)) (not (equal new try)))
           (setq new try
                 try (directory-file-name (file-name-directory try))))
         (when (not (file-exists-p dir))
           (make-directory dir t))
         (write-region "" nil expanded t)
         (when new
           (dired-add-file new)
           (dired-move-to-filename))))

(use-package olivetti

:config
(setq olivetti-body-width 120)
(unbind-key (kbd "C-c [") olivetti-mode-map)
(unbind-key (kbd "C-c ]") olivetti-mode-map)
(setq org-tags-column 40)
)

(add-hook 'olivetti-mode-hook 'turn-on-visual-line-mode)

(add-hook 'olivetti-mode-hook 'turn-on-visual-line-mode)
(add-hook 'text-mode-hook 'olivetti-mode 1)
(add-hook 'org-mode-hook 'olivetti-mode 1)
(add-hook 'message-mode-hook 'olivetti-mode 1 'append)
(add-hook 'emacs-lisp-mode-hook 'olivetti-mode 1)
(add-hook 'css-mode-hook 'olivetti-mode 1)
(add-hook 'sh-mode-hook 'olivetti-mode 1)
(add-hook 'web-mode-hook 'olivetti-mode 1)
(add-hook 'fundamental-mode-hook 'olivetti-mode 1)
(add-hook 'web-mode-hook 'olivetti-mode 1)
(add-hook 'help-mode-hook 'olivetti-mode 1)
(add-hook 'srecode-template-mode-hook 'olivetti-mode 1)

;; (add-hook 'help-mode-hook 'olivetti-mode 1)


(add-hook 'prog-mode-hook #'olivetti-mode 1)
(add-hook 'magit-status-mode-hook #'olivetti-mode 1)
(add-hook 'dired-mode-hook #'olivetti-mode 1)

(defun load-shared-functions ()
  (interactive)
(find-file "/Users/jay/emacs/emacs-settings/shared-functions.org"))

(defun load-gnu-startup ()
  (interactive)
(find-file "/Users/jay/emacs/emacs-settings/gnu-emacs-startup.org"))

(defun open-abbrevs ()
  (interactive)
(find-file "/Users/jay/emacs/aquamacs-jay/.abbrev_defs")
;; (olivetti-mode 1)
)

;; (setq org-agenda-custom-commands '(org-agenda-skip-function 'org-agenda-skip-regexp-if 'todo '("MISSED" "COMMITTED" "RESULTS")))

;; (setq org-ellipsis " ◦◦◦ ")
;; (set-face-attribute org-ellipsis '(((:background "white" :underline nil))))

;; (setq org-ellipsis "⤵")
;; other interesting characters are ▼, ↴, ⬎, ⤷, and ⋱

(setq org-ellipsis "…")

(defun embolden-region-or-point ()
  (interactive)
  (if (region-active-p)
      (progn
        (goto-char (region-end))
        (insert "*")
        (goto-char (region-beginning))
        (insert "*"))
    (insert "**")
    (backward-char)))

(define-key key-minor-mode-map (kbd "M-s-b") 'embolden-region-or-point)

(defun italicize-region-or-point ()
  (interactive)
  (if (region-active-p)
      (progn
        (goto-char (region-end))
        (insert "/")
        (goto-char (region-beginning))
        (insert "/"))
(insert "//")
    (backward-char)))

(define-key key-minor-mode-map (kbd "<C-i>") 'italicize-region-or-point)

(defun bb/next-heading (&rest args)
(when

(or
(org-entry-is-done-p)
(string= (org-get-todo-state) "MISSED")
)
(outline-next-visible-heading 1)))



(advice-add 'org-todo :after 'bb/next-heading)

(defun zin/org-checkbox-next ()
 (interactive)
 (when (org-at-item-checkbox-p)
 (org-toggle-checkbox))
 (org-next-item))

;; (use-package wrap-region)
;; (wrap-region-add-wrapper "*" "*" "*")
;; (wrap-region-add-wrapper "\/" "\/" "\/")


;; wrap-region
(use-package wrap-region
  :ensure t
  :config
(wrap-region-add-wrapper "\n#+BEGIN_QUOTE\n" "\n#+END_QUOTE\n" ";")

(defun wrap-region-define-wrappers ()
  "Defines defaults wrappers."
  (mapc
   (lambda (pair)
     (apply 'wrap-region-add-wrapper pair))
   '(
;; ("\"" "\"")
     ;; ("'"  "'")
     ;; ("("  ")")
     ("{"  "}")
     ;; ("["  "]")
     ("<"  ">"))))
)

  (wrap-region-add-wrappers
   '(
;;     ("*" "*" nil org-mode)
;;     ("/" "/" nil org-mode)
;; ("\"" "\"" nil org-mode)
     ("~" "~" nil org-mode)
     ("_" "_" nil org-mode)
     ("*" "*" nil (org-mode message-mode))
     ("/" "/" nil (org-mode message-mode))
      ("$" "$" nil (org-mode latex-mode))
      ))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(bold ((t (:inherit font-lock-warning-face :weight bold))))
)

(eval-after-load 'org-src
  '(define-key org-src-mode-map
     "\C-c\C-c" #'org-edit-src-exit))

(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or defun,
whichever applies first. Narrowing to org-src-block actually
calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is
already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if you
         ;; don't want it.
         (cond ((ignore-errors (org-edit-src-code))
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

(use-package org-tempo)

;; (add-to-list 'org-structure-template-alist '("sr" . "src"))

(add-to-list 'org-structure-template-alist '("sh" . "src sh"))

;; (add-to-list 'org-structure-template-alist '("p" . "src python"))

(add-to-list 'org-structure-template-alist '("le" . "example"))

(add-to-list 'org-structure-template-alist '("l" . "src emacs-lisp"))

;; (add-to-list 'org-structure-template-alist '("la" . "Export latex"))

(add-to-list 'org-structure-template-alist '("v" . "export verse"))

;; This setup is tested on Emacs 24.3 & Emacs 24.4 on Linux/OSX
;; org v7 bundled with Emacs 24.3
(setq org-export-odt-preferred-output-format "doc")
;; org v8 bundled with Emacs 24.4
(setq org-odt-preferred-output-format "doc")
;; BTW, you can assign "pdf" in above variables if you prefer PDF format

;; Only OSX need below setup
(defun my-setup-odt-org-convert-process ()
  (interactive)
  (let ((cmd "/Applications/LibreOffice.app/Contents/MacOS/soffice"))
    (when (and (eq system-type 'darwin) (file-exists-p cmd))
      ;; org v7
      (setq org-export-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i")))
      ;; org v8
      (setq org-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i"))))
    ))
(my-setup-odt-org-convert-process)

(defun insert-file-link-from-clipboard ()
  "Make sure the full path of file exist in clipboard. This command will convert
The full path into relative path and insert it as a local file link in org-mode"
  (interactive)
  (let (str)
    (with-temp-buffer
      (shell-command
       (cond
        ((eq system-type 'cygwin) "getclip")
        ((eq system-type 'darwin) "pbpaste")
        (t "xsel -ob"))
       1)
      (setq str (buffer-string)))

    ;; convert to relative path (relative to current buffer) if possible
    (let ((m (string-match (file-name-directory (buffer-file-name)) str) ))
      (when m
        (if (= 0 m )
            (setq str (substring str (length (file-name-directory (buffer-file-name)))))
          ))
        (insert (format "[[file:%s]]" str)))
    ))

(dotimes (n 10)
  (global-unset-key (kbd (format "M-%d" n))))

(global-set-key
 (kbd "C-p")
(defhydra hydra-move-previous
   (:body-pre (previous-line))
   "move"
("p" previous-line)
("n" next-line)
("k" my/kill-line-dwim)
   ("f" forward-char)
   ("b" backward-char)
   ("a" beginning-of-line)
   ("e" move-end-of-line)
   ("v" scroll-up-command)
   ;; Converting M-v to V here by analogy.
   ("V" scroll-down-command)
   ("l" recenter-top-bottom)))



(global-set-key
 (kbd "C-n")
(defhydra hydra-move-next
   (:body-pre (next-line))
   "move"
   ("n" next-line)
   ("p" previous-line)
   ("k" my/kill-line-dwim)
   ("f" forward-char)
   ("b" backward-char)
   ("a" beginning-of-line)
   ("e" move-end-of-line)
   ("v" scroll-up-command)
   ;; Converting M-v to V here by analogy.
   ("V" scroll-down-command)
   ("l" recenter-top-bottom)))




(global-set-key
 (kbd "s-n")
(defhydra accountability-move
   (:body-pre (next-line))
   "move"
   ("n" org-next-visible-heading)
   ("p" org-previous-visible-heading)
   ("k" org-cut-subtree)
   ("f" forward-char)
   ("b" backward-char)
   ("d" org-todo)
   ("m" (lambda nil (interactive) (org-todo "MISSED")))
   ("e" move-end-of-line)
   ("v" scroll-up-command)
   ;; Converting M-v to V here by analogy.
   ("V" scroll-down-command)
   ("l" recenter-top-bottom)
))

(defhydra hydra-helm (:hint nil :color pink)
	"
									  ╭──────┐
   Navigation   Other  Sources     Mark             Do             Help   │ Helm │
  ╭───────────────────────────────────────────────────────────────────────┴──────╯
	^_k_^         _K_       _p_   [_m_] mark         [_v_] view         [_H_] helm help
	^^↑^^         ^↑^       ^↑^   [_t_] toggle all   [_d_] delete       [_s_] source help
    _h_ ←   → _l_     _c_       ^ ^   [_u_] unmark all   [_f_] follow: %(helm-attr 'follow)
	^^↓^^         ^↓^       ^↓^    ^ ^               [_y_] yank selection
	^_j_^         _J_       _n_    ^ ^               [_w_] toggle windows
  --------------------------------------------------------------------------------
	"
	("<tab>" helm-keyboard-quit "back" :exit t)
	("<escape>" nil "quit")
	("\\" (insert "\\") "\\" :color blue)
	("h" helm-beginning-of-buffer)
	("j" helm-next-line)
	("k" helm-previous-line)
	("l" helm-end-of-buffer)
	("g" helm-beginning-of-buffer)
	("G" helm-end-of-buffer)
	("n" helm-next-source)
	("p" helm-previous-source)
	("K" helm-scroll-other-window-down)
	("J" helm-scroll-other-window)
	("c" helm-recenter-top-bottom-other-window)
	("m" helm-toggle-visible-mark)
	("t" helm-toggle-all-marks)
	("u" helm-unmark-all)
	("H" helm-help)
	("s" helm-buffer-help)
	("v" helm-execute-persistent-action)
	("d" helm-persistent-delete-marked)
	("y" helm-yank-selection)
	("w" helm-toggle-resplit-and-swap-windows)
	("f" helm-follow-mode))

;; define list-title face
(defface list-title-face
  '((t (:foreground "red" :weight bold)))
  "fontify list titles")

;; define heading-title face
(defface heading-title-face
  '((t (:foreground "red" :weight bold)))
  "fontify heading titles")


;; define anki-clozure face
(defface anki-clozure-face
  '((t (:foreground "red" :weight bold)))
  "fontify anki clozures")


(font-lock-add-keywords 'org-mode
                        '(
			  ;; ("^.*:[ ]*$" . 'list-title-face) ; fontify any line that ends with a colon
                          ("^Q\\(UESTION\\|uestion\\):" . 'list-title-face) ; fontify "Question:" and "QUESTION:"

			  ("^[A-Za-z]+:" . 'list-title-face); fontify any word followed by a colon if it begins the line

			  ;; ("^\\*+[ ]*[a-Za-z]+:" . 'heading-title-face); fontify any heading that starts with a word followed by a colon. But how to make this face supersede the other one?
                          )
                        )

;; old code (works for HTML export, breaks http links)
;; (add-hook 'org-export-before-parsing-hook (lambda (backend) (replace-regexp "^[A-Za-z]+:" "*\\&*")))

(add-hook 'org-export-before-parsing-hook (lambda (backend) (replace-regexp "^\\([A-Za-z]+:\\)\\([^/]\\|/[^/]\\|$\\)" "*\\1*\\2")))

;; (add-hook 'org-export-before-parsing-hook (lambda (backend) (replace-regexp "^\\(.*:\\)[ ]*$" "*\\1*")))
 ;; any line that ends with a colon

(defun downcase-or-endless-downcase ()
(interactive)
(if

; If
(or
(looking-back "\\.\\.\\.[ ]*[\n\t ]*")
(looking-back "i.e.[ ]*")
(looking-back "[0-9]\.[ ]*")
(looking-back "e.g.[ ]*")
(looking-back "vs.[ ]*")
(looking-back "U.K.[ ]*")
(looking-back "U.S.[ ]*")
(looking-back "vs.[ ]*")
(looking-back "^")
)
    (call-interactively 'downcase-word); then
    (call-interactively 'endless/downcase); else

)
)

(add-to-list 'org-file-apps '(directory . emacs))

(defun sort-lines-case-insensitive ()
  (interactive)
  (let ((sort-fold-case t))
    (call-interactively 'sort-lines)))

(defun re-builder-large ()
  "Just like `re-builder', only make the font and window larger."
  (interactive)
  (re-builder)
  (text-scale-increase 5)
  (set-window-text-height (selected-window) 7))

(defun typewriter-mode ()
  (interactive)
  (setq centered-cursor-mode t)
  (setq global-centered-cursor-mode t)
  )

(defun save-file-as-new ()
  "Force modification of current file, unless already modified."
  (interactive)
  (if (and (verify-visited-file-modtime (current-buffer))
           (not (buffer-modified-p)))
      (progn
        (set-buffer-modified-p t)
        (save-buffer 0))))

(defun touch-file (file)
  "Create a file called FILE.
If FILE already exists, signal an error."
  (interactive
  (list (read-file-name "Create file: " (dired-current-directory))))
  (let* ((expanded (expand-file-name file))
    (try expanded)
    (dir (directory-file-name (file-name-directory expanded)))
    new)
   (if (file-exists-p expanded)
    (error "Cannot create file %s: file exists" expanded))
   ;; Find the topmost nonexistent parent dir (variable `new')
   (while (and try (not (file-exists-p try)) (not (equal new try)))
   (setq new try
     try (directory-file-name (file-name-directory try))))
   (when (not (file-exists-p dir))
   (make-directory dir t))
   (write-region "" nil expanded t)
   (when new
   (dired-add-file new)
   (dired-move-to-filename))))

(add-hook 'find-file-hooks 'assume-new-is-modified)
(defun assume-new-is-modified ()
  (when (not (file-exists-p (buffer-file-name)))
    (set-buffer-modified-p t)))

'(org-twbs-head-include-default-style t)
 '(org-twbs-htmlize-output-type (quote inline-css))
 '(org-twbs-indent t)

(if (eq window-system 'mac)
    (add-to-list 'exec-path "/usr/local/texlive/2022/bin/universal-darwin")
  )

(setq  ; org-export-dispatch-use-expert-ui t non-intrusive export dispatch
 org-latex-pdf-process               ; for regular export

 '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

;; don't add extra lines to numbered lists and bulleted lists (set to nil)
(setq org-export-preserve-breaks nil)

;; add padding to numbered lists and bulleted lists (set to t)
;; (setq org-export-preserve-breaks t)

;; (load "/Users/jay/emacs/emacs-settings/mu4e-context.el")

(defun jay-load-latex ()
(interactive)

;; (load "/Users/jay/emacs/emacs-settings/latex-templates/blue-ruin.el")
;; (load "/Users/jay/emacs/emacs-settings/latex-templates/modest-ruin.el")
(load "/Users/jay/emacs/emacs-settings/latex-templates/elegant.el")
(load "/Users/jay/emacs/emacs-settings/latex-templates/elegant-wider.el")
(load "/Users/jay/emacs/emacs-settings/latex-templates/beautiful-racket.el")
(load "/Users/jay/emacs/emacs-settings/latex-templates/elegant-garamond.el")
;; (load "/Users/jay/emacs/emacs-settings/latex-templates/resonate.el")
(load "/Users/jay/emacs/emacs-settings/latex-templates/blue-invoice.el")
;; (load "/Users/jay/emacs/emacs-settings/latex-templates/blue-ruin_no_cover.el")
(load "/Users/jay/emacs/emacs-settings/latex-templates/jay-latex-yosemite-setup.el")

;; (use-package blue-ruin)
(use-package blue-invoice)
;; (use-package blue-ruin-no-cover)
  )

(defun org-latex-filter-fancyvrb (text backend info)
 "Convert begin/end{verbatim} to begin/end{Verbatim}.
Allows use of the fancyvrb latex package."
 (when
   (org-export-derived-backend-p backend 'latex)
 (replace-regexp-in-string
  "\\\\\\(begin\\|end\\){verbatim}"
  "\\\\\\1{quote}"
  text)))

(add-to-list 'org-export-filter-final-output-functions
    'org-latex-filter-fancyvrb)

(setq org-startup-with-inline-images nil)

(load "/Users/jay/emacs/emacs-settings/dired+.el")
(use-package dired+
 :init
 (progn
  (spacemacs/set-leader-keys
  "ab" 'diredp-do-bookmark)))

(toggle-diredp-find-file-reuse-dir 1)
(add-hook 'dired-mode-hook
 (lambda ()
  (define-key dired-mode-map (kbd "C-<up>")
    (lambda () (interactive) (find-alternate-file "..")))
  ; was dired-up-directory
 ))

;; open recent directory, rquires ivy (part of swiper)
;; borrows from http://stackoverflow.com/questions/23328037/in-emacs-how-to-maintain-a-list-of-recent-directories
(defun bjm/ivy-dired-recent-dirs ()
 "Present a list of recently used directories and open the selected one in dired"
 (interactive)
 (let ((recent-dirs
     (delete-dups
     (mapcar (lambda (file)
          (if (file-directory-p file) file (file-name-directory file)))
         recentf-list))))

  (let ((dir (ivy-read "Directory: "
             recent-dirs
             :re-builder #'ivy--regex
             :sort nil
             :initial-input nil)))
   (dired dir))))


(define-key key-minor-mode-map (kbd "C-x d") 'bjm/ivy-dired-recent-dirs)
;; c-x C-d runs the command ido-list-directory

(defun calc-eval-region (arg)
  "Evaluate an expression in calc and communicate the result.

If the region is active evaluate that, otherwise search backwards
to the first whitespace character to find the beginning of the
expression. By default, replace the expression with its value. If
called with the universal prefix argument, keep the expression
and insert the result into the buffer after it. If called with a
negative prefix argument, just echo the result in the
minibuffer."
  (interactive "p")
  (let (start end)
(if (use-region-p)
    (setq start (region-beginning) end (region-end))
  (progn
    (setq end (point))
    (setq start (search-backward-regexp "\\s-\\|\n" 0 1))
    (setq start (1+ (if start start 0)))
    (goto-char end)))
(let ((value (calc-eval (buffer-substring-no-properties start end))))
  (pcase arg
    (1 (delete-region start end))
    (4 (insert " = ")))
  (pcase arg
    ((or 1 4) (insert value))
    (-1 (message value))))))

(cheatsheet-add :group 'Common
                :key "M-s-="
                :description "calc-eval-region")

(cheatsheet-add :group 'Dired
                :key "C-x C-j"
                :description "dired of current file")

(cheatsheet-add :group 'Dired
                :key "C-x d"
                :description "recent directories")

(cheatsheet-add :group 'Dired
                :key "DD"
                :description "recent directories")


(cheatsheet-add :group 'Dired
                :key "C-x C-d"
                :description "ido-list-directory")


(cheatsheet-add :group 'Mu4e
		:key "a e"
		:description "org-contact-add")


(cheatsheet-add :group 'Common
                :key "C-x u"
                :description "undo-tree-visualize")

(cheatsheet-add :group 'Mooovement
                :key "C-c C-j"
                :description "org-goto")


(cheatsheet-add :group 'Mooovement
                :key "C--"
                :description "goto-last-edit")


(cheatsheet-add :group 'Search
                :key "s-G"
                :description "helm-projectile-grep")

(cheatsheet-add :group 'Mooovement
                :key "C-drag"
                :description "mouse-copy")


(cheatsheet-add :group 'Mooovement
                :key "jj"
                :description "helm-imenu")

(cheatsheet-add :group 'Mooovement
                :key "kk"
                :description "helm-imenu")

(cheatsheet-add :group 'Mooovement
                :key "jk"
                :description "avy-goto-line")

(cheatsheet-add :group 'Common
                :key "XX"
                :description "M-x")

(cheatsheet-add :group 'Search
                :key "ww"
                :description "helm-swoop")


(cheatsheet-add :group 'Search
                :key "FF"
                :description "isearch")

(cheatsheet-add :group 'Search
                :key "SS"
                :description "swiper")


(cheatsheet-add :group 'Buffers
                :key "WW"
                :description "widen")

(cheatsheet-add :group 'Editing
                :key "ZZ"
                :description "undo")

(cheatsheet-add :group 'Editing
		:key "C-x C-o"
		:description "delete-blank-lines")


(cheatsheet-add :group 'Replacing
                :key "RR"
                :description "replace-regexp")

(cheatsheet-add :group 'Action!
                :key "XX"
                :description "helm-mx")

(cheatsheet-add :group 'Action!
		:key "HH"
		:description "cheatsheet")


(cheatsheet-add :group 'MultipleCursors
                :key "MM"
                :description "mc/mark-all-dwim")


(cheatsheet-add :group 'MultipleCursors
		:key "s-m"
		:description "mc/mark-all-like-this-dwim")


(cheatsheet-add :group 'MultipleCursors
                :key "M-2"
                :description "mc/mark-all-dwim")


(cheatsheet-add :group 'MultipleCursors
                :key "C-4"
                :description "mc/mark-next-like-this")


(cheatsheet-add :group 'MultipleCursors
                :key "C-3"
                :description "mc/mark-previous-like-this")


(cheatsheet-add :group 'MultipleCursors
                :key "C-8"
                :description "endless/mc-map")

(cheatsheet-add :group 'MultipleCursors
                :key "i"
                :description "mc/insert-numbers")

(cheatsheet-add :group 'MultipleCursors
                :key "h"
                :description "mc/hide-unmatched-lines")

(cheatsheet-add :group 'MultipleCursors
                :key "h"
                :description "mc/mark-all-like-this")

;; (use-package mouse-copy)
;; (global-set-key [C-down-mouse-1] 'mouse-drag-secondary-pasting)
;; (global-set-key [C-S-down-mouse-1] 'mouse-drag-secondary-moving)

(use-package flycheck)

(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
        (id (one-or-more (not (any " "))))
        (message) line-end))
  :modes (text-mode markdown-mode gfm-mode org-mode))

(add-to-list 'flycheck-checkers 'proselint)

(defun delete-duplicate-lines-keep-blanks ()
 (interactive)
 (delete-duplicate-lines (region-beginning) (region-end) nil nil t))

(setq scroll-margin 25)
;; (setq recenter-positions (quote (top middle bottom)))

(setq org-clock-auto-clock-resolution t)
 (setq org-clock-idle-time 30)
 (setq org-clock-in-resume t)
 (setq org-clock-persist-query-resume nil)
 (setq org-clock-report-include-clocking-task t)
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(setq org-clock-persist t)
(setq org-clock-into-drawer nil)
(setq org-clocktable-defaults
 (quote
 (:maxlevel 3 :lang "en" :scope file :block nil :wstart 1 :mstart 1 :tstart nil :tend nil :step nil :stepskip0 nil :fileskip0 nil :tags nil :emphasize nil :link nil :narrow 40! :indent t :formula nil :timestamp nil :level nil :tcolumns nil :formatter nil)))

(setq org-time-clocksum-format
 (quote
 (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))

(setq org-icalendar-include-todo nil)
(setq org-icalendar-use-scheduled (quote (event-if-todo todo-start)))
(setq org-icalendar-alarm-time 60)
 (setq org-icalendar-combined-description "Jay Dixit---Emacs ")
 (setq org-icalendar-combined-name "Org-Mode")
(setq org-icalendar-store-UID nil)
(setq org-icalendar-timezone "(-18000 \"EST\") ")
(setq org-agenda-default-appointment-duration '15)

(defun org-icalendar-open-ics-file (file) (start-process "org-icalendar-open-ics-file-process" nil "open" "-a" "/Applications/Calendar.app" file)) (add-hook 'org-icalendar-after-save-hook 'org-icalendar-open-ics-file)

;; Utility functions:

(defun sensible-defaults/comment-or-uncomment-region-or-line ()
 "Comments or uncomments the region or the current line if there's no active region."
 (interactive)
 (let (beg end)
  (if (region-active-p)
    (setq beg (region-beginning) end (region-end))
   (setq beg (line-beginning-position) end (line-end-position)))
  (comment-or-uncomment-region beg end)))

(global-set-key (kbd "M-;")
         'sensible-defaults/comment-or-uncomment-region-or-line)


(setq gc-cons-threshold 20000000)
(setq vc-follow-symlinks t)

"When saving a file that starts with `#!', make it executable."
 (add-hook 'after-save-hook
      'executable-make-buffer-file-executable-if-script-p)

(defun repeat-last-command ()
"repeats the last command called via M-x"
(interactive)
(let ((history extended-command-history)
cmd)
;; remove any occurence of this-command at the head of `history'.
(while (string= this-command (setq cmd (pop history))))
(message "Running cmd: %s" cmd)
(call-interactively (intern cmd))))

(defun org-select-line ()
 "Select the current line"
 (interactive)
 (org-beginning-of-line) ; move to end of line
 (set-mark (line-end-position)))

(defun org-copy-line ()
 (interactive)
(org-select-line)
(pasteboard-copy)
(set-mark nil))

(defun kill-paragraph-from-beginning (b e)
  (interactive)
  (mark-paragraph)
  (kill-region)
  )

(defun eval-subtree ()
 (interactive)
 (org-edit-src-code)
 (eval-buffer)
 (org-edit-src-exit)
 )

(defun kill-to-buffer-end-or-beginning (arg)
  (interactive "p")
  (if (and arg (= 0 (mod arg 4)))
      (beginning-of-buffer)
    (end-of-buffer))
  (kill-region (mark) (point))
  (recenter-top-bottom))

(define-key key-minor-mode-map (kbd "M-w") 'kill-to-buffer-end-or-beginning)

(defun up-by-degrees ()
 (interactive)
       (previous-line 6)
 )


(defun down-by-degrees ()
 (interactive)
       (next-line 6)
 )

(defun org-next-subtree-same-level-and-narrow ()
 (interactive)
 (widen)
 (org-forward-heading-same-level 1)
 (org-narrow-to-subtree)
 )

(defun org-previous-subtree-same-level-and-narrow ()
 (interactive)
(org-previous-visible-heading 1)
 (widen)
(org-backward-heading-same-level 1)
 (org-narrow-to-subtree)
 )

(defun org-next-subtree-and-narrow ()
 (interactive)
 (widen)
 (org-next-visible-heading 1)
 (org-narrow-to-subtree)
 )

(defun org-previous-subtree-and-narrow ()
 (interactive)
(org-previous-visible-heading 1)
 (widen)
 (org-previous-visible-heading 1)
 (org-narrow-to-subtree)
 )

(defun refile-region-or-subtree ()
  (interactive)
  (if (region-active-p)
      (call-interactively 'jay-refile-region)
    (org-refile)))

(when (boundp 'messages-buffer-mode-hook)
 (defun messages-buffer-mode-hook-setup ()
 (read-only-mode -1))
 (add-hook 'messages-buffer-mode-hook 'messages-buffer-mode-hook-setup))

(defun yas/pasteboard-without-spaces ()
 "Return content of OS X system pasteboard via `pbpaste'."
 (shell-command-to-string "pbpaste | perl -p -e 's/\r$//' | tr '\r' '\n'"))

(defun yas/org-get-time-stamp (&rest args)
 "Return the string that `org-insert-time-stamp' would insert."
 (with-temp-buffer
  (apply #'org-insert-time-stamp args)
  (buffer-string)))

(defun yas/tiny-expand (str)
  (with-temp-buffer
    (insert str)
    (goto-char (point-max)) ; tiny-expand works on text preceding point
    (tiny-expand)
    (buffer-string)))

(defun yas/suppress-errors ()
(interactive)
  (ignore-errors (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
)

(put 'org-export-html-style-include-scripts 'safe-local-variable (lambda (xx) t))

(put 'org-export-html-style-include-default 'safe-local-variable (lambda (xx) t))

(put 'buffer-file-coding-system 'safe-local-variable (lambda (xx) t))

(put 'my-org-buffer-local-mode 'safe-local-variable (lambda (xx) t))

(setq safe-local-variable-values


  (quote
  (
(eval define-key key-minor-mode-map
	  (kbd "SPC")
	  (quote insert-space))

(eval define-key org-mode-map
      (kbd ":")
      (quote insert-colon))


(org-html-head-include-scripts)
   (org-export-allow-bind-keywords . t)
   (eval define-key key-minor-mode-map
      (kbd "SPC")
      (quote insert-space)))))

(defun loadup-gen ()
 "Generate the lines to include in the lisp/loadup.el file
to place all of the libraries that are loaded by your InitFile
into the main dumped emacs"
 (interactive)
 (defun get-loads-from-*Messages* ()
  (save-excursion
   (let ((retval ()))
	(set-buffer "*Messages*")
	(beginning-of-buffer)
	(while (search-forward-regexp "^Loading " nil t)
	 (let ((start (point)))
	  (search-forward "...")
	  (backward-char 3)
	  (setq retval (cons (buffer-substring-no-properties start (point)) retval))))
	retval)))
 (map 'list
    (lambda (file) (princ (format "(load \"%s\")\n" file)))
    (get-loads-from-*Messages*)))

(use-package crux
:bind
( "M-`" . crux-swap-windows)

( "s-j rf" .  crux-rename-file-and-buffer)

( "s-j df" . crux-delete-file-and-buffer)

( "C-c d" . crux-duplicate-current-line-or-region)

( "C-c i" . crux-find-user-init-file)

;; ( "C-j") crux-top-join-line)
)

(defun em-dash ()
(interactive)
(cond (mark-active
   (progn (delete-region (mark) (point)))))
(expand-abbrev)
(insert "---")
  )

(defun true-em-dash ()
(interactive)
(cond (mark-active
   (progn (delete-region (mark) (point)))))
(expand-abbrev)
(insert "—")
  )

(defun insert-one-double-quote ()
(interactive)
(cond (mark-active
   (progn (delete-region (mark) (point)))))
(insert "\""))

(defun insert-right-bracket ()
  (interactive)
(cond (mark-active
   (progn (delete-region (mark) (point)))))
  (insert "\]")
  )

(defun insert-equals-sign ()
  (interactive)
(cond (mark-active
   (progn (delete-region (mark) (point)))))
  (insert "=")
  )

(use-package undo-tree
:bind (:map undo-tree-map
("M-_" . nil)
)
)

(setq display-buffer-alist (quote (("" ignore (nil . reusable-frames)))))

(defun edit-this-file-as-sudo ()
  (interactive)
  (let ((file-name (buffer-file-name)))
   (when file-name
    (find-alternate-file (concat "/sudo::" file-name)))))

(defun sudo-find-file ()
 (interactive)
 (let ((file-name (buffer-file-name)))
  (when file-name
  (find-file (concat "/sudo::" file-name)))))

(defun sudo-edit-paths ()
 (interactive)
(find-file "/etc/paths")
(sudo-edit)
)

(defun sudo-edit-hosts ()
 (interactive)
(find-file "/private/etc/hosts")
(sudo-edit)
)

(global-prettify-symbols-mode t)

(defun hrs/search-project-for-symbol-at-point ()
 "Use `projectile-ag' to search the current project for `symbol-at-point'."
 (interactive)
 (projectile-ag (projectile-symbol-at-point)))

(global-set-key (kbd "C-c v") 'projectile-ag)
(global-set-key (kbd "C-c C-v") 'hrs/search-project-for-symbol-at-point)



(defun hrs/add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
   (add-to-list 'auto-mode-alist (cons pattern mode))))


 (hrs/add-auto-mode
  'web-mode
  "\\.erb$"
  "\\.html$"
  "\\.php$"
  "\\.rhtml$")

(setq org-src-window-setup 'current-window)

;; (use-package poly-org)

(use-package counsel
 :bind
 (("M-y" . counsel-yank-pop)
  :map ivy-minibuffer-map
  ("M-y" . ivy-next-line)))

(defun toggle-between-src-and-example-block ()
(interactive)
(save-excursion
(let* ((elt (org-element-at-point))
(elt-sym (car elt))
(bgn (plist-get (cadr elt) :begin)))
(cond
((eq elt-sym 'src-block)
(goto-char (+ bgn 8))
(delete-char 3)
(insert "EXAMPLE")
(when (re-search-forward "#\\+END_SRC" nil t)
(replace-match "#+END_EXAMPLE")))
((eq elt-sym 'example-block)
(goto-char (+ bgn 8))
(delete-char 7)
(insert "SRC")
(when (re-search-forward "#\\+END_EXAMPLE" nil t)
(replace-match "#+END_SRC")))
(t (message "It isn't src/example block!"))))))

(use-package dired-quick-sort)

(setq eww-search-prefix "https://www.google.com/search?q=")

(defun jab/eww-search (orig-fun &rest args)
 (if (region-active-p) (apply orig-fun args)
 (eww (read-string "Query: "))))
(advice-add 'eww-search-words :around #'jab/eww-search)

(setq podcaster-feeds-urls
  (quote
  ("http://sachachua.com/blog/tag/emacs-chat/podcast")))

(setq podcaster-mp3-player "VLC")

'(bongo-default-directory "~/Dropbox/")

(setq ediff-diff-options "-w")

(setq mac-wheel-button-is-mouse-2 nil)
;; so that the middle button works

(setq scroll-conservatively 1000) ; seems nice

(defun screenflick-mode ()
(interactive)
 (setq evil-emacs-state-cursor '("red" (hbar . 2))) ; for horizontal cursor
(horizontal-cursor)
(spacemacs/toggle-highlight-current-line-globally-off)
(adobe-garamond-pro)
(toggle-fullscreen)
(writeroom-mode)
)

(defun fix-image-links ()
(interactive)
)

(setq org-reveal-root "file:///Users/jay/Dropbox/github/reveal.js")

(use-package ox-clip)

(defun org-def ()
(interactive)
(save-excursion
(beginning-of-line)
 (insert "- "))
(insert " :: ")
)

(defun delete-html-blocks ()
(interactive)
(replace-regexp "#\\+BEGIN_HTML\\(?:.*\\|\n\\)*#\\+END_HTML" "")
)

(use-package beacon

 :init

 (beacon-mode 1)
(setq beacon-push-mark 35)
(setq beacon-color "#FFF876")
 )

(use-package ox-tufte)

(defun ignore-case-in-searches ()
 (interactive)
 (setq case-fold-search t)
 )

(add-to-list 'org-export-filter-timestamp-functions
       #'endless/filter-timestamp)
(defun endless/filter-timestamp (trans back _comm)
 "Remove <> around time-stamps."
 (pcase back
  ((or `jekyll `html)
   (replace-regexp-in-string "&[lg]t;" "" trans))
  (`latex
   (replace-regexp-in-string "[<>]" "" trans))))

; (setq-default org-display-custom-times t)
;;; Before you ask: No, removing the <> here doesn't work.
; (setq org-time-stamp-custom-formats '("<%b %d, %Y>" . "<%d/%m/%Y %a %H:%M>"))

(defvar yt-iframe-format
 ;; You may want to change your width and height.
 (concat "<iframe width=\"440\""
     " height=\"335\""
     " src=\"https://www.youtube.com/embed/%s\""
     " frameborder=\"0\""
     " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
  (browse-url
  (concat "https://www.youtube.com/embed/"
      handle)))
 (lambda (path desc backend)
  (cl-case backend
   (html (format yt-iframe-format
          path (or desc "")))
   (latex (format "\href{%s}{%s}"
          path (or desc "video"))))))

(defun swiper-mc ()
(interactive)
(unless (require 'multiple-cursors nil t)
(error "multiple-cursors isn't installed")) (let ((cands (nreverse ivy--old-cands)))
(unless (string= ivy-text "") (ivy-set-action
(lambda (_) (let (cand)
(while (setq cand (pop cands)) (swiper--action cand)
(when cands
               (mc/create-fake-cursor-at-point))))
         (mc/maybe-multiple-cursors-mode)))
(setq ivy-exit 'done) (exit-minibuffer))))

(defun spacemacs-version-display-and-copy ()
 "Echo the current version of Spacemacs, Emacs, and org-mode, and copy it."
 (interactive)
(setq system-version
 (substring
 (shell-command-to-string "defaults read loginwindow SystemVersionStampAsString")
 0 -1))
 (kill-new
   (message "Mac OSX Sierra version %s, Spacemacs version %s, Emacs version %s, org-mode version %s"
       system-version spacemacs-version emacs-version org-version))
 (push-kill-ring-pasteboard-to-clipboard)
)

(defun emacs-version-display-and-copy ()
 "Echo the current version of Spacemacs, Emacs, and org-mode, and copy it."
 (interactive)
(setq system-version
 (substring
 (shell-command-to-string "defaults read loginwindow SystemVersionStampAsString")
 0 -1))
 (kill-new
   (message "Mac OSX Sierra version %s, Emacs version %s, org-mode version %s"
       system-version emacs-version org-version))
 (push-kill-ring-pasteboard-to-clipboard)
)

(defun tidy-html ()
 "Tidies the HTML content in the buffer using `tidy'"
 (interactive)
 (shell-command-on-region
  ;; beginning and end of buffer
  (point-min)
  (point-max)
  ;; command and parameters
  "tidy -i -w 120 -q"
  ;; output buffer
  (current-buffer)
  ;; replace?
  t
  ;; name of the error buffer
  "*Tidy Error Buffer*"
  ;; show error buffer?
  t))

(defun message-mode-next-field ()
  (interactive)
  (next-line)
  (end-of-line))

(setq message-tab-body-function (quote message-mode-next-field))

(setq tramp-default-method "ssh")

(defun qm-maybe ()
(interactive)
(when
(not
(looking-back "$")
)
(smart-question-mark)
)
)

;; (define-key key-minor-mode-map (kbd "?") 'qm-maybe)

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

;; (setq flycheck-global-modes '(not org-mode latex-mode)) ; doesn't work

(defun intern-convert-to-chat-format (begin end)
 (interactive "r")
 (xah-replace-pairs-region begin end
 '(
 ["Mary Dean: " "** Mary Dean\n"]
 ["Ricky DeSantis: " "** Ricky DeSantis\n"]
 ["Jay Dixit: " "** Jay Dixit\n"]
 ["me: " "** Jay Dixit\n"]
 ["Benjamin: " "** Benjamin Carp\n"]
 ["Camille Inge: " "** Camille Inge\n"]
 ["Benjamin: " "** Ben Bechar\n"]
 )))

(autoload 'mail-hist-forward-header "mail-hist")
(autoload 'mail-text-start  "sendmail")

(defun my-message-signature-start ()
 "Return value of point at start of message signature."
 (save-mark-and-excursion
 (message-goto-signature)
 (point)))

(defun my-message-field-forward ()
 "Move point to next \"field\" in a `message-mode' buffer.
With each invocation, point is moved to the next field of
interest amongst header values, message body and message
signature, in that order."
 (interactive)
 (cond ((message-point-in-header-p)
  (unless (mail-hist-forward-header 1)
  (message-goto-body) (point)))
 ((>= (point) (my-message-signature-start))
  (message "No further field"))
 ((message-in-body-p)
  (message-goto-signature))
 (t ; Probably on `mail-header-separator' line
  (message-goto-body) (point))))

(defun my-message-field-backward ()
 "Like `my-message-field-forward', but in opposite direction."
 (interactive)
 (cond ((or (message-point-in-header-p)
  (<= (point) (mail-text-start)))
  (unless (mail-hist-forward-header
   (if (message-point-in-header-p) -1 0))
  (message "No further field")))
 ((<= (point) (my-message-signature-start))
  (message-goto-body) (point))
 (t ; Beyond start of signature
  (message-goto-signature))))

(use-package shell-pop
 :bind (("C-t" . shell-pop))
 :config
 (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
 (setq shell-pop-term-shell "/bin/zsh")
 ;; need to do this manually or not picked up by `shell-pop'
 (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))

(defun isearch-forward-ignore-case ()
(interactive)
(ignore-case-in-searches)
(isearch-forward)
)

(defun ap/org-count-words ()
  "If region is active, count words in it; otherwise count words in current subtree."
  (interactive)
  (if (use-region-p)
    (funcall-interactively #'count-words-region (region-beginning) (region-end))
   (org-with-wide-buffer
    (cl-loop for (lines words characters)
        in (org-map-entries
          (lambda ()
           (ap/org-forward-to-entry-content 'unsafe)
           (let ((end (org-entry-end-position)))
            (list (count-lines (point) end)
               (count-words (point) end)
               (- end (point)))))
          nil 'tree)
        sum lines into total-lines
        sum words into total-words
        sum characters into total-characters
        finally do (message "Subtree \"%s\" has %s lines, %s words, and %s characters."
                  (org-get-heading t t) total-lines total-words total-characters)))))

(defun ap/org-forward-to-entry-content (&optional unsafe)
  "Skip headline, planning line, and all drawers in current entry.
If UNSAFE is non-nil, assume point is on headline."
  (unless unsafe
   ;; To improve performance in loops (e.g. with `org-map-entries')
   (org-back-to-heading))
  (cl-loop for element = (org-element-at-point)
       for pos = (pcase element
             (`(headline . ,_) (org-element-property :contents-begin element))
             (`(,(or 'planning 'property-drawer 'drawer) . ,_) (org-element-property :end element)))
       while pos
       do (goto-char pos)))

(setq
 time-stamp-active t     ; do enable time-stamps
time-stamp-line-limit 50; check first 50 lines
time-stamp-format "%04y-%02m-%02d"; date format
time-stamp-pattern "50//*Invoice date:\\*+\s%:y-%02m-%02d\\\\?$"
)

;; (add-hook 'write-file-hooks 'time-stamp) ; update when saving

(add-hook 'before-save-hook 'time-stamp)

(defun server-reflash ()
  (interactive)
  (server-force-delete)
  (server-start)
  )

;; (add-hook 'org-mode-hook
;;         (lambda ()
;;         (variable-pitch-mode 1)))

;; (set-face-attribute 'variable-pitch nil :family "Baskerville")
(set-face-attribute 'variable-pitch nil :family "Triplicate T3")

(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light))


;;  (typo-mode 1)      ;; Good for symbols like em-dash
(add-hook 'poetry-mode-hook 'olivetti-mode 1)
;; (add-hook 'poetry-mode-hook 'olivetti-mode 1)

(defun poet-mode ()
(interactive)
(set-face-attribute 'default nil :family "Iosevka" :height 130)
(set-face-attribute 'fixed-pitch nil :family "Iosevka")
        (variable-pitch-mode 1)
(poetry-mode)
(olivetti-mode 1)
(turn-off-auto-capitalize-mode)

)

(defun my-org-inline-css-hook (exporter)
 "Insert custom inline css"
 (when (eq exporter 'html)
  (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
      (path (concat dir "style.css"))
      (homestyle (or (null dir) (null (file-exists-p path))))
      (final (if homestyle "/Users/jay/Dropbox/web-design/custom-css/google-docs.css" path))) ;; <- set your own style file path
   (setq org-html-head-include-default-style nil)
   (setq org-html-head (concat
              "<style type=\"text/css\">\n"
              "<!--/*--><![CDATA[/*><!--*/\n"
              (with-temp-buffer
               (insert-file-contents final)
               (buffer-string))
              "/*]]>*/-->\n"
              "</style>\n")))))

(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)

(defun show-duplicate-words (&optional alphabetical)
 "Collect all of the unique words in the current buffer and
display them in a new buffer. With prefix, alphabetize the
list."
 (interactive "P")
 (let ((buf (buffer-name))
    (new (get-buffer-create "*Unique Words*"))
    (txt (delete-dups (mapcar #'downcase
                 (split-string (buffer-string)
                        nil nil
                        "[^[:alnum:]]+")))))
  (with-current-buffer new
   (delete-region (point-min) (point-max))
   (insert (format "%d unique words in the <%s> buffer:\n\n"
           (length txt) buf))
   (cl-dolist (word (if alphabetical (sort txt #'string<) txt))
    (insert (concat word "\n"))))
  (pop-to-buffer new)))

(defun org-tempo-add-templates ()
 "Update all Org Tempo templates.

Go through `org-structure-template-alist' and
`org-tempo-keywords-alist' and update tempo templates."
 (mapc 'org--check-org-structure-template-alist '(org-structure-template-alist
						  org-tempo-keywords-alist))
 (let ((keys (org-tempo--keys)))
  ;; Check for duplicated snippet keys and warn if any are found.
  (when (> (length keys) (length (delete-dups keys)))
)
  ;; Remove any keys already defined in case they have been updated.
  (setq org-tempo-tags
	 (cl-remove-if (lambda (tag) (member (car tag) keys)) org-tempo-tags))
  (mapc #'org-tempo-add-block org-structure-template-alist)
  (mapc #'org-tempo-add-keyword org-tempo-keywords-alist)))

(use-package multiple-cursors)
(use-package multiple-cursors-core)
;; This is globally useful, so it goes under `C-x', and `m'
;; for "multiple-cursors" is easy to remember.
(define-key ctl-x-map "\C-m" #'mc/mark-all-dwim)
;; Usually, both `C-x C-m' and `C-x RET' invoke the
;; `mule-keymap', but that's a waste of keys. Here we put it
;; _just_ under `C-x RET'.
(define-key ctl-x-map (kbd "<return>") mule-keymap)

;; Remember `er/expand-region' is bound to M-2!
;; (define-key key-minor-mode-map (kbd "M-#") 'mc/mark-all-dwim)
;; (global-set-key (kbd "M-2") #'mc/mark-all-dwim)
(define-key key-minor-mode-map (kbd "M-2") 'mc/mark-all-dwim)

;; (global-set-key (kbd "M-3") #'mc/mark-next-like-this)
;; (global-set-key (kbd "M-4") #'mc/mark-previous-like-this)
(define-key key-minor-mode-map (kbd "C-3") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-M-3") #'mc/unmark-previous-like-this)

(define-key key-minor-mode-map (kbd "C-4") 'mc/mark-next-like-this)
(global-set-key (kbd "C-M-4") #'mc/unmark-next-like-this)

(define-prefix-command 'endless/mc-map)
(define-key ctl-x-map "m" 'endless/mc-map)
(define-key key-minor-mode-map (kbd "C-8") 'endless/mc-map)

;;; Really really nice!
(define-key endless/mc-map "i" #'mc/insert-numbers)
(define-key endless/mc-map "h" #'mc-hide-unmatched-lines-mode)
(define-key endless/mc-map "a" #'mc/mark-all-like-this)

(global-set-key (kbd "s-<mouse-1>") 'mc/add-cursor-on-click)


;;; Occasionally useful
(define-key endless/mc-map (kbd "<backspace>") 'delete-backward-char)
(define-key endless/mc-map "d" #'mc/mark-all-symbols-like-this-in-defun)
(define-key endless/mc-map "r" #'mc/reverse-regions)
(define-key endless/mc-map "s" #'mc/sort-regions)
(define-key endless/mc-map "l" #'mc/edit-lines)
(define-key endless/mc-map "\C-a"
 #'mc/edit-beginnings-of-lines)
(define-key endless/mc-map "\C-e"
 #'mc/edit-ends-of-lines)

(setq mc/always-run-for-all t)
;; always run for all cursors

(setq mc/insert-numbers-default 1)
;; start counting from 0

(global-set-key
 (kbd "C-2")

(defhydra multiple-cursors-hydra (:hint nil)
 "
  ^Up^   ^Down^  ^Other^
----------------------------------------------
[_p_] previous [_n_] next [_l_] Edit lines
[_P_] Skip [_N_] Skip [_a_] Mark all
[_M-p_] Unmark [_M-n_] Unmark [_r_] Mark by regexp
[_h_] Hide unmatched lines
^ ^    ^ ^    [_q_] Quit
"
 ("l" mc/edit-lines :exit t)
 ("a" mc/mark-all-like-this :exit t)
 ("n" mc/mark-next-like-this)
 ("N" mc/skip-to-next-like-this)
 ("M-n" mc/unmark-next-like-this)
 ("p" mc/mark-previous-like-this)
 ("P" mc/skip-to-previous-like-this)
 ("M-p" mc/unmark-previous-like-this)
 ("h" mc/hide-unmatched-lines-mode)
;; don't know why this doesn't work
 ("r" mc/mark-all-in-region-regexp :exit t)
 ("q" nil)) )

(define-key mc/keymap (kbd ".") 'insert-period)
 (define-key mc/keymap (kbd ",") 'insert-comma)
 (define-key mc/keymap (kbd "SPC") 'insert-space)
(define-key mc/keymap (kbd "<return>") 'smart-return)
(define-key mc/keymap (kbd "<backspace>") 'my/delete-backward)

(defun multiple-cursors-reflash ()
(interactive)
  (delete 'my/delete-backward-and-capitalize mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'my/delete-backward-and-capitalize)


(delete 'pasteboard-paste-spaces-maybe mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'pasteboard-paste-spaces-maybe)


(delete 'my/delete-backward mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'my/delete-backward)


(delete 'delete-backward-char mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'delete-backward-char)
)


(delete 'delete-backward-char mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'crux-kill-line-backwards)

(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'text-mode-hook #'dubcaps-mode)
(add-hook 'org-mode-hook #'dubcaps-mode)

(add-hook 'text-mode-hook #'olivetti-mode 1)
;; (add-hook 'org-mode-hook 'turn-off-autocomplete-mode )

(add-hook 'org-mode-hook 'turn-on-flyspell)
(add-hook 'org-mode-hook (lambda () (flyspell-lazy-mode 1)))

(add-hook 'org-mode-hook #'flycheck-mode)
;; (add-hook 'org-mode-hook (lambda () (org-sticky-header-mode 1)))

(add-hook 'org-mode-hook 'turn-on-visual-line-mode)
(add-hook 'org-mode-hook '(lambda () (auto-fill-mode -1)))

(add-hook 'org-mode-hook 'turn-on-auto-capitalize-mode)


(add-hook 'org-mode-hook 'wrap-region-mode)
 (add-hook 'latex-mode-hook 'wrap-region-mode)

(add-hook
 'org-mode-hook
 (lambda ()
 (define-key org-mode-map (kbd "DEL")
  'new-org-delete-backward-char)))

(defun wide-screen ()
(interactive)
(setq olivetti-body-width 72)
)

(setq org-cycle-separator-lines 0)

(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+")))

(defun embiggen-text ()
 (interactive)
 (text-scale-increase 1)
 )

(defun ensmallen-text ()
 (interactive)
 (text-scale-decrease 1)
 )

(defun yesterday ()
  (interactive)
    (insert (shell-command-to-string "echo -n $(date -v -1d +%F)"))
  )

(defun today ()
  (interactive)
    (insert (shell-command-to-string "echo -n $(date +%F)"))
  )

(defun show-unique-words (&optional alphabetical)
 "Collect all of the unique words in the current buffer and
display them in a new buffer. With prefix, alphabetize the
list."
 (interactive "P")
 (let ((buf (buffer-name))
    (new (get-buffer-create "*Unique Words*"))
    (txt (delete-dups (mapcar #'downcase
                 (split-string (buffer-string)
                        nil nil
                        "[^[:alnum:]]+")))))
  (with-current-buffer new
   (delete-region (point-min) (point-max))
   (insert (format "%d unique words in the <%s> buffer:\n\n"
           (length txt) buf))
   (cl-dolist (word (if alphabetical (sort txt #'string<) txt))
    (insert (concat word "\n"))))
  (pop-to-buffer new)))

(custom-set-faces
 '(org-ellipsis ((t (:family "Iosevka Nerd Font" :foreground "LightGray" :underline nil)))))
(setq org-ellipsis " ")
;; (setq org-ellipsis " ▶")

(defun org-render-table-at-point ()
 (interactive)
 (save-excursion
  (beginning-of-line)
  (if (overlays-at (point))
    ;; this is a rough solution, because there can
    ;; be other overlays at point
    (delete-overlay (car (overlays-at (point))))

   (let* ((element-type (org-element-type (org-element-at-point))))
    (if (and (not (eq element-type 'table))
         (not (eq element-type 'table-row)))
      (error "not at an org table")

     (while (not (eq 'table (org-element-type (org-element-at-point))))
      (forward-line -1))

     (org-render-table (org-element-at-point)))))))


(defun org-render-table (table)
 (interactive)
 (let* ((begin (org-element-property :begin table))
     (end (let ((pos (org-element-property :end table)))
        (goto-char pos)
        (beginning-of-line)
        ;; skip possible space after table
        (while (not (looking-at " *[|#]"))
         (setq pos (point))
         (forward-line -1))
        pos))
     (tabletxt (buffer-substring-no-properties begin end))
     (img (with-temp-buffer
        (insert tabletxt)
        (mark-whole-buffer)
        (org-latex-convert-region-to-latex)
        (org-preview-latex-fragment)
        (goto-char (point-min))
        (overlay-get (car (overlays-at (point))) 'display)))
     (overlay (make-overlay begin end)))
  (overlay-put overlay 'display img)
  (forward-line -1)))


(defun org-render-tables-in-buffer ()
 (save-excursion
  (org-element-map (org-element-parse-buffer) 'table 'org-render-table)))

(defun org-show-inline-images ()
 (interactive)
(org-toggle-inline-images))

(use-package ido-vertical-mode)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)

(setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)

;; optionally
(setq ido-use-faces nil)

;; (setq ido-use-faces t)
;; (set-face-attribute 'ido-vertical-first-match-face nil :foreground "orange")

(defvar mode-line-cleaner-alist
 `((auto-complete-mode . " α")
  (yas/minor-mode . " υ")
  (paredit-mode . " π")
  (eldoc-mode . "")
  (abbrev-mode . "")
  (rmail-mode . "")
  (counsel-mode . ".")
  (palimpsest-mode . "")
  ;; Major modes
  (lisp-interaction-mode . "λ")
  (hi-lock-mode . "")
  (python-mode . "Py")
  (emacs-lisp-mode . "EL")
  (nxhtml-mode . "nx"))
 "Alist for `clean-mode-line'.

When you add a new element to the alist, keep in mind that you
must pass the correct minor/major mode symbol and a string you
want to use in the modeline *in lieu of* the original.")


(defun clean-mode-line ()
 (interactive)
 (loop for cleaner in mode-line-cleaner-alist
    do (let* ((mode (car cleaner))
         (mode-str (cdr cleaner))
         (old-mode-str (cdr (assq mode minor-mode-alist))))
       (when old-mode-str
         (setcar old-mode-str mode-str))
        ;; major mode
       (when (eq mode major-mode)
        (setq mode-name mode-str)))))


(add-hook 'after-change-major-mode-hook 'clean-mode-line)

;;; alias the new `flymake-report-status-slim' to
;;; `flymake-report-status'
(defalias 'flymake-report-status 'flymake-report-status-slim)
(defun flymake-report-status-slim (e-w &optional status)
 "Show \"slim\" flymake status in mode line."
 (when e-w
  (setq flymake-mode-line-e-w e-w))
 (when status
  (setq flymake-mode-line-status status))
 (let* ((mode-line " Φ"))
  (when (> (length flymake-mode-line-e-w) 0)
   (setq mode-line (concat mode-line ":" flymake-mode-line-e-w)))
  (setq mode-line (concat mode-line flymake-mode-line-status))
  (setq flymake-mode-line mode-line)
  (force-mode-line-update)))

(defun timesheet_insert-custom-clock-entry ()
 (interactive)
 (insert "CLOCK: ")
 (org-time-stamp-inactive)
 (insert "--")
 ;; Inserts the current time by default.
 (let ((current-prefix-arg '(4))) (call-interactively 'org-time-stamp-inactive))
 (org-ctrl-c-ctrl-c))

; Shortcut
(define-key evil-normal-state-map (kbd "C-'") 'jx/insert-custom-clock-entry)
(define-key evil-insert-state-map (kbd "C-'") 'jx/insert-custom-clock-entry)

;; (use-package org-drill)
; (add-hook 'org-drill-hook (lambda () (flyspell-lazy-mode -1)))
; (setq org-drill-add-random-noise-to-intervals-p t)

;; (setq org-drill-use-visible-cloze-face-p t)

;; (setq-default org-display-custom-times nil)
(setq org-time-stamp-custom-formats '("<%A %B %e, %Y>" . "<%01m/%01e %01I:%M %p>"))

(setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex" "odt" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl")))

(add-to-list 'org-latex-classes
    '("my-letter"
     "\\documentclass\[%
 DIV=14,
 fontsize=12pt,
 parskip=half,
 subject=titled,
 backaddress=false,
 fromalign=left,
 fromemail=true,
 fromphone=true\]\{scrlttr2\}
 \[DEFAULT-PACKAGES]
 \[PACKAGES]
 \[EXTRA]"))

(defun load-koma-letter ()
 (interactive)
 (load "/Users/jay/emacs/emacs-settings/ox-koma-letter.el")
 (load "/Users/jay/emacs/emacs-settings/fiverr-koma.el")
 )

(setq enable-local-eval t)

(use-package saveplace)
(setq-default save-place t)

(setq org-export-preserve-breaks t)

(define-key key-minor-mode-map (kbd "M-=") 'calc-grab-region)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq delete-trailing-lines nil)

(setq create-lockfiles nil)
(run-with-idle-timer 300 t 'org-save-all-org-buffers)

(defun iloveyou (args)
 (interactive "P")
(message "%s" (propertize "I love you! ❤️" 'Face '(:foreground "red")))
 )

(defun get-openai-api-key ()
 "Retrieve the OpenAI API key from an external file."
 (let ((api-key-file "~/.openai-api-key"))
 (when (file-exists-p api-key-file)
  (with-temp-buffer
  (insert-file-contents api-key-file)
  (buffer-string)))))

(setq openai-api-key (get-openai-api-key))

(use-package aide)

(defun aide-openai-complete-buffer-insert ()
 "Send the ENTIRE buffer to OpenAI and insert the result to the end of buffer."
 (interactive)
 (let (region
    result
    original-point)
  (setq region (buffer-substring-no-properties (point-min) (point-max)))
  (setq result (aide--openai-complete-string region))
  (goto-char (point-max))
  (setq original-point (point))
  (if result
    (progn
     (insert "\n" result)
     (fill-paragraph)
     (let ((x (make-overlay original-point (point-max))))
      (overlay-put x 'face '(:foreground "orange red")))
     result)
   (message "Empty result"))))

(defun expand-contraction-at-point ()
  "If the current word is a contraction, replace it with its long-form phrase."
  (interactive)
  (let ((contraction-pairs '(("do not" "don't") ("will not" "won't") ("could not" "couldn't"))))
    (let ((current-phrase (current-word t t)))
      (dolist (pair contraction-pairs)
        (if (member current-phrase pair)
            (let ((long-form-phrase (car pair)) (contraction (cadr pair)))
              (if (string= current-phrase long-form-phrase)
                  (progn
                    (delete-region (point) (+ (point) (length current-phrase)))
                    (insert contraction))
                (progn
                  (delete-region (point) (+ (point) (length current-phrase)))
                  (insert long-form-phrase)))))
          )
        )
      )
    )

(defun start-pomodoro ()
 "Starts a 25-minute pomodoro timer and logs the completed pomodoro in a file called `~/pomodori.txt`."
 (interactive)
 (run-at-time "25 min" nil
        (lambda ()
         (with-current-buffer (find-file-noselect "~/pomodori.txt")
          (goto-char (point-max))
          (insert (concat (format-time-string "%Y-%m-%d %H:%M:%S")
                  ": Completed pomodoro\n"))
          (save-buffer))))
 (message "Pomodoro timer started. Will log completed pomodoro in `~/pomodori.txt` at %s"
      (format-time-string "%Y-%m-%d %H:%M:%S" (+ (float-time) (* 60 25)))))

(use-package warnings)
(add-to-list 'warning-suppress-types '(yasnippet backquote-change))

(setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))

(setq org-odt-preferred-output-format "docx")

(defun org-titlecase-level-1 ()
 "Convert all Level 1 org-mode headings to title case."
 (interactive)
 (save-excursion
 (goto-char (point-min))
 (while (re-search-forward "^\\* " nil t)
  (titlecase-line))))
