* multiple cursors

** endless multiple cursors keybindings
Wow: This was amazing:
[[https://stackoverflow.com/questions/58058182/multiple-cursors-in-emacs-does-not-modify-all-the-cursors][Multiple-cursors in Emacs does not modify all the cursors - Stack Overflow]]

... but didn't help? Also I can't find .mc-lists.el

#+BEGIN_EXAMPLE emacs-lisp
(use-package multiple-cursors)

;; This is globally useful, so it goes under `C-x', and `m'
;; for "multiple-cursors" is easy to remember.
(define-key ctl-x-map "\C-m" #'mc/mark-all-dwim)
;; Usually, both `C-x C-m' and `C-x RET' invoke the
;; `mule-keymap', but that's a waste of keys. Here we put it
;; _just_ under `C-x RET'.
(define-key ctl-x-map (kbd "<return>") mule-keymap)

;; Remember `er/expand-region' is bound to M-2!
;; (define-key key-minor-mode-map (kbd "M-#") 'mc/mark-all-dwim)
;; (global-set-key (kbd "M-2") #'mc/mark-all-dwim)
(define-key key-minor-mode-map (kbd "M-2") 'mc/mark-all-dwim)

;; (global-set-key (kbd "M-3") #'mc/mark-next-like-this)
;; (global-set-key (kbd "M-4") #'mc/mark-previous-like-this)
(define-key key-minor-mode-map (kbd "C-3") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-M-3") #'mc/unmark-previous-like-this)

(define-key key-minor-mode-map (kbd "C-4") 'mc/mark-next-like-this)
(global-set-key (kbd "C-M-4") #'mc/unmark-next-like-this)

(define-prefix-command 'endless/mc-map)
(define-key ctl-x-map "m" 'endless/mc-map)
(define-key key-minor-mode-map (kbd "C-8") 'endless/mc-map)

;;; Really really nice!
(define-key endless/mc-map "i" #'mc/insert-numbers)
(define-key endless/mc-map "h" #'mc-hide-unmatched-lines-mode)
(define-key endless/mc-map "a" #'mc/mark-all-like-this)

(global-set-key (kbd "s-<mouse-1>") 'mc/add-cursor-on-click)


;;; Occasionally useful
(define-key endless/mc-map (kbd "<backspace>") 'delete-backward-char)
(define-key endless/mc-map "d" #'mc/mark-all-symbols-like-this-in-defun)
(define-key endless/mc-map "r" #'mc/reverse-regions)
(define-key endless/mc-map "s" #'mc/sort-regions)
(define-key endless/mc-map "l" #'mc/edit-lines)
(define-key endless/mc-map "\C-a"
 #'mc/edit-beginnings-of-lines)
(define-key endless/mc-map "\C-e"
 #'mc/edit-ends-of-lines)

(setq mc/always-run-for-all t)
;; always run for all cursors

(setq mc/insert-numbers-default 1)
;; start counting from 0

(global-set-key
 (kbd "C-2")

(defhydra multiple-cursors-hydra (:hint nil)
 "
 ^Up^  ^Down^ ^Other^
----------------------------------------------
[_p_] previous [_n_] next [_l_] Edit lines
[_P_] Skip [_N_] Skip [_a_] Mark all
[_M-p_] Unmark [_M-n_] Unmark [_r_] Mark by regexp
[_h_] Hide unmatched lines
^ ^  ^ ^  [_q_] Quit
"
 ("l" mc/edit-lines :exit t)
 ("a" mc/mark-all-like-this :exit t)
 ("n" mc/mark-next-like-this)
 ("N" mc/skip-to-next-like-this)
 ("M-n" mc/unmark-next-like-this)
 ("p" mc/mark-previous-like-this)
 ("P" mc/skip-to-previous-like-this)
 ("M-p" mc/unmark-previous-like-this)
 ("h" mc/hide-unmatched-lines-mode)
;; don't know why this doesn't work
 ("r" mc/mark-all-in-region-regexp :exit t)
 ("q" nil)) )

#+END_EXAMPLE


** multiple-cursors-mode-map
#+BEGIN_SRC emacs-lisp
 (define-key mc/keymap (kbd ".") 'insert-period)
 (define-key mc/keymap (kbd ",") 'insert-comma)
 (define-key mc/keymap (kbd "SPC") 'insert-space)
(define-key mc/keymap (kbd "<return>") 'smart-return)
(define-key mc/keymap (kbd "<backspace>") 'my/delete-backward)
#+END_SRC

** make this work with multiple cursors

#+begin_EXAMPLE emacs-lisp

(defun multiple-cursors-reflash ()
(interactive)
 (delete 'my/delete-backward-and-capitalize mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'my/delete-backward-and-capitalize)


(delete 'pasteboard-paste-spaces-maybe mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'pasteboard-paste-spaces-maybe)


(delete 'my/delete-backward mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'my/delete-backward)

(delete 'my/kill-line-dwim mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'my/kill-line-dwim)

(add-to-list 'mc/cmds-to-run-for-all 'kill-line)


(delete 'delete-backward-char mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'delete-backward-char)
)


(delete 'delete-backward-char mc/cmds-to-run-once)
(add-to-list 'mc/cmds-to-run-for-all 'crux-kill-line-backwards)

#+end_EXAMPLE


