org-in-item-p 


* change the behavior of org-smart-meta-return/dwim

For plain-text lists 
* after a list
Can we change the behavior of smart-return, smart-org-meta-return-dwim, and smart-org-insert-todo-heading-dwim for when point is on the line AFTER a list (plain-text, checkbox, or numbered)?

Right now it creates another item. I want just a newline, or in the case of smart-org-insert-todo-heading-dwim, a todo heading.



* old


Delete and get this ".," 

* delete spaces between one-letter words

[fn:: Manson, J. E., Willet, W. C., Stampfer, M. J., Colditz, G. A., Hunter, D. J., Hankinson, S. E., Hennekens, C. H., & Speizer, F. E. (1995). Body weight and mortality among women. The New England Journal of Medicine, 333, 677–685.]


→ 

[fn:: Manson, J.E., Willet, W.C., Stampfer, M.J., Colditz, G.A., Hunter, D. J., Hankinson, S. E., Hennekens, C. H., & Speizer, F. E. (1995). Body weight and mortality among women. The New England Journal of Medicine, 333, 677–685.]




* replace smart quotes

I have this defun: http://pastebin.com/bPtAM940

I would like to add a line to it so that if ALSO finds strings like this: =spac- es= and changes them to this: =spaces= 

In other words, I want it to find and remove the string =- = but ONLY when it occurs inside a word, i.e. only if there is an alphabetic character preceding the =-=

In other words, a string like this, where the hyphen is at the beginning of the line, would remain intact:

=- this is the first point of a plain-text list=

But in a string like this...

=This is a sente- nce.=
 
...the hyphen and space would be removed and the result would be this:

=This is a sentence.=

Can he do this? 


* make my/beginning-of-sentence-p return t if there is a quotation marks at beginning of 
(defun my/beginning-of-sentence-p ()
 "Return t if point is at the beginning of a sentence."
 (let ((start (point))
    (beg (save-excursion (forward-sentence) (forward-sentence -1))))
  (eq start beg)))


* mu4e unstar in gmail web interface
- and reflected in mu4e 


* convert to numbered list 
(define-key key-minor-mode-map (kbd "M-#") 'convert-to-numbered-list)

Or M-- cycles to numbered list before it cycles back 

* create a do not downcase list 

* don't capitalize words that already begin with a capital


* when cursor is on blank line and insert-heading, add heading to current line don't add line break 


* make emacs work more like Workflowy 

* relig

Complete word, then add completion to abbrev list.

* cycle case
realiz realized realizing 

mend mended mending 


* region or thing

** highlighted region or thing at point
 I use several functions that do dictionary lookups of the "thing at point." 
1. gnugol-word-at-point, which is a function that does (defun gnugol-word-at-point ()
  (interactive)
(gnugol-search-google (thing-at-point 'word))
) 
gnugol-search-google is defined in gnugol.el
2. define-word-at-point, which is an interactive autoloaded
Lisp closure in define-word.el' 

These both work fine. However, I'd like to be able to highlight a 2-word or 3-word PHRASE (i.e. select the region) and THEN invoke gnugol-word-at-point or define-word-at-point and have gnugol or define-word look up the entire phrase.

Can you implement a functionality for these two functions that allows me to do "lookup active region or if no active region then lookup word at point"?

Thanks!

So that I have two words highlighted and I run gnugol-word-at-point, it first takes the highlighted region as the entire query. 



** define word 



* forward-clause
(define-key key-minor-mode-map (kbd "M-E") 'forward-clause)

* file settings                                                     :ARCHIVE:
#+OPTIONS: f:t 
#+TODO: TODO PLEASE-CLARIFY PLEASE-TEST TESTING PLEASE-DEBUG | DONE
#+TODO: | NOTE-TO-JAY NOTE-TO-RUDI NOTE-TO-RÚDI
#+TODO: PLEASE-CHECK-MY-INEPT-CODE PLEASE-HELP-ME-DEBUG-MY-INEPT-CODE | TRY-THIS
#+TITLE: 
#+TITLE: #+TITLE: Jay Dixit's GNU Emacs setup 
* smart punctuation behavior 

Example: Don't use an adverb word. ^
scenario: I hit comma
current output: Don't use an adverb word,^
desired output: Don't use an adverb word, ^


* org-mac-chrome-insert-frontmost-url-with-prompt
- new link from clipboard (prompt for title, with default)



* TODO try to resolve org-element crashes?
I'm finding my Emacs crashing a lot; other times I get errors like these which I assume are related to the crashes:
http://pastebin.com/Tncs79r0
http://pastebin.com/jfdEYwVk

I mean total Emacs crashes, where I have to force quit Emacs itself. It's happened in various org-mode situations including:
- pasting text from OSX clipboard
- promoting/demoting org-headings
- moving subtree up or down (i.e. using org-metadown org org-metaup)

I've tried reinstalling org-plus-contrib... I have also enabled org-element-debug. 

* TODO another capitalization error
Open another-capitalization-error.org to see another capitalization error I introduced when I was messing around with the code. I'd like to make it so that my/kill-line-dwim capitalizes the first character of the next line IF it's lowercase; but if it's in uppercase (as with org-todo-keywords) then leave it alone. Thanks!

* todo smart-punctuation in an org-heading
Smart-punctuation is working as desired in plain text.

Example #1 (works as desired):

Input: Thinking is harder than it sounds ^
Scenario: add semicolon 
Output: Thinking is harder than it sounds; ^

However, this doesn't work in an org-heading. 

Example #2 (doesn't work as desired): 

Input: * Thinking is harder than it sounds ^
Scenario: add semicolon 
Output: Thinking is harder than it sounds;^ 


* TODO how include plain-text URLs and image links in org-mime? 
This: [[http://emacs.stackexchange.com/questions/14874/how-include-plain-text-urls-and-image-links-in-org-mime][org export - how include plain-text URLs and image links in org-mime? - Emacs Stack Exchange]]

   #+BEGIN_SRC emacs-lisp
Debugger entered--Lisp error: (args-out-of-range 0 0)
  get-text-property(0 face)
  org-activate-plain-links(67)
  font-lock-fontify-keywords-region(1 67 nil)
  font-lock-default-fontify-region(1 67 nil)
  font-lock-fontify-region(1 67 nil)
  byte-code("\212\303 \304\216\305ed	#\210\306 \210\307\211+\207" [save-match-data-internal verbose font-lock-fontified match-data ((byte-code "\301\302\"\207" [save-match-data-internal set-match-data evaporate] 3)) font-lock-fontify-region font-lock-after-fontify-buffer t] 4)
  font-lock-default-fontify-buffer()
  font-lock-fontify-buffer()
  org-bullets-mode(1)
  (lambda nil (org-bullets-mode 1))()
  run-hooks(change-major-mode-after-body-hook text-mode-hook outline-mode-hook org-mode-hook)
  apply(run-hooks (change-major-mode-after-body-hook text-mode-hook outline-mode-hook org-mode-hook))
  run-mode-hooks(org-mode-hook)
  org-mode()
  org-export-string-as(#("http://www.bakadesuyo.com/2014/10/how-to-get-people-to-like-you/\n\n" 0 64 (fontified nil) 64 65 (fontified nil) 65 66 (fontified nil)) org t)
  (let* ((region-p (org-region-active-p)) (html-start (or (and region-p (region-beginning)) (save-excursion (goto-char (point-min)) (search-forward mail-header-separator) (+ (point) 1)))) (html-end (or (and region-p (region-end)) (point-max))) (raw-body (concat org-mime-default-header (buffer-substring html-start html-end))) (tmp-file (make-temp-name (expand-file-name "mail" temporary-file-directory))) (body (org-export-string-as raw-body (quote org) t)) (org-export-htmlize-output-type (quote inline-css)) (org-export-preserve-breaks org-mime-preserve-breaks) (org-html-with-latex (quote dvipng)) (html-and-images (org-mime-replace-images (org-export-string-as raw-body (quote html) t) tmp-file)) (html-images (if arg nil (cdr html-and-images))) (html (org-mime-apply-html-hook (if arg (format org-mime-fixedwith-wrap body) (car html-and-images))))) (delete-region html-start html-end) (save-excursion (goto-char html-start) (insert (org-mime-multipart body html (mapconcat (quote identity) html-images "\n")))))
  org-mime-htmlize()
  run-hooks(message-send-hook)
  message-send(nil)
  message-send-and-exit(nil)
  #<subr call-interactively>(message-send-and-exit nil nil)
  ad-Advice-call-interactively(#<subr call-interactively> message-send-and-exit nil nil)
  apply(ad-Advice-call-interactively #<subr call-interactively> (message-send-and-exit nil nil))
  call-interactively(message-send-and-exit nil nil)
  command-execute(message-send-and-exit) 
   #+END_SRC


* PLEASE-TEST [#C] strange behavior with smart-comma (see [[file:smart-punctuation-error.org::*in%20the%20example%20below:][smart-punctuation-error.org]])
I can't seem to reproduce the reported bugs/undesired behaviours. Perhaps they went away when I refactored the ~smart-punctuation~ function? Are you still getting them?

** NOTE-TO-RÚDI still getting the error
I still get an error when I follow the directions [[file:smart-punctuation-error.org::*how%20to%20induce%20the%20error:][here]]. It's when I try to place a comma in the heading at the bottom of the file. Can you try doing this and tell me if you can reproduce the error? Thanks! 

* TODO make erika-send-mail-styled respect the "COMMITTED" org-todo-keyword
See the test file here: [[file:~/gnulisp/erika-send-mail-test-file.org::*<2015-09-18%20Fri>][erika-send-mail-test-file.org]]

I want to send only the subtree, heading ** COMMITTED <2015-09-18 Fri> 

If I place the point at the beginning of ** COMMITTED <2015-09-18 Fri>, it successfully sends the styled + formatted email. But the org-todo-keyword "COMMITTED" is omitted from the subject header. Can we make it so it's included? Thanks! 

* TODO don't autocapitalize checklist items
- [ ] This
- [ ] That
- [ ] And this 

These get autocapitalized... can we disable that?


* TODO kill-clause
** NOTE-TO-JAY Questions 
     Regarding ~pasteboard-cut~, I think it's rather straightforward. Please give it a go.

     As for ~kill-line~, there's something I should clarify: this is a builtin command (comes with Emacs), so it's not something I can easily change. Except that Emacs Lisp has a nice little functionality called "advicing", which allows dynamically adding behaviour to functions without having access to their code. I could do this to ~kill-line~. However, this is usually not recommended, since it could mess up other functionalities that might depend on the default ~kill-line~ implementation. Anyway, since you have the ~my/kill-line-dwim~ function, isn't that the one you use?

     Finally, regarding ~kill-clause~, I added the requested functionality, but I realised the implementation has several probably undesired behaviours. For example:

: This is a test sentence^, nothing to see here. And then another.

     Caret marks the point. In this case, calling ~kill-clause~ results in:

: This is a test sentence, ^nothing to see here. And then another.

     I.e. it only moves point. Please confirm that it should yield:

: This is a test sentence^. And then another.

     Now, going back to the current result of ~kill-clause~:

: This is a test sentence, ^nothing to see here. And then another.

     If you now invoke ~kill-clause~, you'll have:

: This is a test sentence, . ^And then another.

     This also seems silly. Again, it would seem reasonable to produce:

: This is a test sentence^. And then another.

     Finally, I found an edge case:

: This is a test sentence, nothing to see here. ^And then another.<EOB>

     Where <EOB> marks the end of the buffer. In this case, nothing happens when you invoke ~kill-clause~. I suppose it should kill the entire sentence:

: This is a test sentence, nothing to see here.^<EOB>

     Correct?

** NOTE-TO-RÚDI Answers for kill-clause below.

This is a test sentence^, nothing to see here. And then another.

     Caret marks the point. In this case, calling ~kill-clause~ results in:

This is a test sentence, ^nothing to see here. And then another.

     I.e. it only moves point. Please confirm that it should yield:

This is a test sentence^. And then another.

: Yes! Confirmed, that is what it should yield. 

     Now, going back to the current result of ~kill-clause~:

This is a test sentence, ^nothing to see here. And then another.

     If you now invoke ~kill-clause~, you'll have:

This is a test sentence, . ^And then another.

     This also seems silly. Again, it would seem reasonable to produce:

This is a test sentence^. And then another.

: Yes, exactly! That would be the desired behavior. However, the optimal point placement for that case would be this:
This is a test sentence. ^And then another.


     Finally, I found an edge case:

This is a test sentence, nothing to see here. ^And then another.<EOB>

     Where <EOB> marks the end of the buffer. In this case, nothing happens when you invoke ~kill-clause~. I suppose it should kill the entire sentence:

This is a test sentence, nothing to see here.^<EOB>

     Correct?

: Correct! Thanks for thoroughly thinking through these cases, much appreciated! 

** NOTE-TO-RÚDI Comments about my edits to kill-clause-test-file.el 
What a brilliant approach, to create the test file! Here are some notes about my edits to the file.

Kill-clause should only kill one clause, which I think means it should only ever kill one comma, not two. So for the example below, it should leave the second comma in. I edited the desired output in kill-clause-test-file.el.

Input: We should consider^, for completeness, comma separated clauses. 
Your suggested output: We should consider^ comma separated clauses.
My desired output: We should consider^, comma separated clauses. 

Same for this one:

Input: We should consider,^ for completeness, comma separated clauses.
Your suggested output: We should consider^ comma separated clauses.
My desired output: We should consider,^ comma separated clauses. 

And this one:

Input: We should consider, ^for completeness, comma separated clauses.
Your suggested output: We should consider^ comma separated clauses.
My desired output: We should consider, ^comma separated clauses. 

With the example below, it should kill the question mark and leave the period. And the point should be before the period.

Input: And what about two consecutive sentences^? That's important too.
Your suggested output: And what about two consecutive sentences?^
My desired output: And what about two consecutive sentences^.

With the example below, I probably would never have the input you mentioned. I changed the syntax of the input to match the case I'm more likely to encounter. 

Your suggested input: ^Let's not forget parenthesis (those are extremely important!)
My more likely input: ^Let's not forget parenthesis (those are extremely important)! 
Output: (^Those are extremely important)! 

Same for this one:

Your suggested input: Let's not forget parenthesis ^(those are extremely important!) 
My more likely input: Let's not forget parenthesis ^(those are extremely important)! 
Output: Let's not forget parenthesis^! 

Thanks! 

* TODO [#C] a tweak to my/kill-sentence-dwim 
I created a test file my-kill-sentence-dwim-test-file.elt to illustrate input and desired output for an edge case I discovered. Thanks!
*
* TESTING [#B] a smart-space exception for org-mode tags

Example:
#+BEGIN_EXAMPLE
* Is this a viable^                                                   :slide: 
#+END_EXAMPLE

Let's say the point is on the carat and I type "business?"

Current output: 
#+BEGIN_EXAMPLE
* Is this a viable business ?slide: 
#+END_EXAMPLE

Desired output:
#+BEGIN_EXAMPLE
* Is this a viable business?^                                          :slide: 
#+END_EXAMPLE

*** NOTE-TO-RÚDI Question about spaces?
It works! Now, next question. Currently, when I type spaces between words in the heading, the space between the words and the tag gets collapsed. (Obviously it does, since I have <SPC> bound to jay/insert-space.) Is it easy to make it so that I can type spaces in the heading with collapsing the spaces between the heading and the tag? If it's too complicated, I can solve this problem on the "user side" by trying to remember to use M-SPC (insert-space) whenever I'm in an org-mode heading with a tag. 

* TODO capitalize after ellipsis and line breaks

e.g. 

This is the end...

but this is a new beginning. 

But should be autocapitalized. 

* TODO an edge case for kill-word-correctly-and-capitalize 

Input: The 16/8 doesn't appeal to me as much.^ And also based on what Varady hypothesized about reduced caloric intake being mediated by stomach shrinkage on fast days 

Scenario: kill-word-correctly-and-capitalize

Current output: The 16/8 doesn't appeal to me as much. also based on what Varady hypothesized about reduced caloric intake being mediated by stomach shrinkage on fast days 

Desired output: The 16/8 doesn't appeal to me as much. Also based on what Varady hypothesized about reduced caloric intake being mediated by stomach shrinkage on fast days 


* TODO a change to endless downcase 
In [[file:shared-functions.org::*Intelligently%20change%20punctuation%20of%20sentences%20when%20I%20change%20the%20capitalization][endless/downcase]], don't convert "..." to "..,"

Input: The only thing we have to fear... ^Is fear itself.
Scenario: invoke ~endless/downcase~
Current output: The only thing we have to fear.., is^ fear itself. 
Desired output: The only thing we have to fear... is^ fear itself.

* TODO pasteboard-paste-without-smart-quotes 
I'm finding that pasteboard-paste-without-smart-quotes inserts rogue spaces in the pasted contents. Doesn't happen every time... but it happens often. Can you reproduce / debug? Thank you!!

* TODO smart comma
When point is on a period, exclamation point, or question mark and it hit "," then next word should also be downcased. Basically, if I'm changing a period to a comma, next word should be downcased.

Input: I'd like to stay^. But I'm late.
Scenario: Point is on the period and I type a comma (",") 
Current output: I'd like to stay,^ But I'm late. 
Desired output: I'd like to stay,^ but I'm late. 


* TODO message-goto-to
In new-email-from-subtree and new-email-from-subtree-no-signature, can we add ~(message-goto-to)~ so that the first field I land on is the To: field?

Also, after I insert the name and tab to complete the email address from org-contacts, is there an easy way to then get to the message body without using movement keys to get there (e.g. by tabbing again or something else)?

* TODO downcase next word on invocation of third period (but not past line break)
Example: Something that's just weird more than funny..^ And having to explain how it got that way. 
Scenario: Having already hit "." twice, I hit it a third time so that you'll have three dots.
Current output: Something that's just weird more than funny...^ And having to explain how it got that way. 
Desired output: Something that's just weird more than funny...^ and having to explain how it got that way. 

* TODO make org-agenda not display tasks scheduled for future days?
This:
http://emacs.stackexchange.com/questions/16571/in-org-mode-how-to-delay-the-display-of-some-scheduled-tasks-until-the-day-of 

*** TODO [#C] make smart-org-meta-return work with SCHEDULED and DEADLINE

#+BEGIN_EXAMPLE
TODO work out with Luke 
   SCHEDULED: <2015-07-13 Mon 17:00> ^
#+END_EXAMPLE

Say the point is at the carat and I hit smart-org-meta-return 

Current output: 
#+BEGIN_EXAMPLE
TODO work out with Luke 
   SCHEDULED: <2015-07-13 Mon 17:00> ^

* TODO
#+END_EXAMPLE

Desired output:
#+BEGIN_EXAMPLE
TODO work out with Luke 
   SCHEDULED: <2015-07-13 Mon 17:00> ^ 
* TODO
#+END_EXAMPLE

Same thing for scheduled:
#+BEGIN_EXAMPLE 
*** DONE send July priorities to Erika
    DEADLINE: <2015-07-10 Fri> ^

#+END_EXAMPLE

Thanks!

* cycle contraction
I want an Emacs lisp function I can call that will automatically convert a two-word phrase (e.g. "do not") into its English contraction (e.g. "don't"). Maybe we would call it cycle-contraction.

For example, let's say I have this sentence:

: I do not want to see the movie.

And let's say the point is on the space between "do" and "not."

If I invoke cycle-contraction, Emacs should convert "do not" to "don't" so the sentence would look like this:

: I don't want to see the movie.

Conversely, if the point is somewhere on the word "couldn't" and I call cycle-contraction, it should convert it to the long-form-phrase "could not".

We would define each long-form-phrase and its contraction as a list of pairs, maybe something like this:

(setq contraction-pairs
(
(("do not") ("don't"))
(("will not") ("won't"))
(("could not") ("couldn't"))
))

What do you think? 

* how to find function within my init files?
I often want to do this:
1. C-it the to find what a keystroke does
2. Find that function within my init files

How to do this?

Is there a?

helm-multi-swoop-all thing at point

swiper multi thing at point?

How to do

* describe-key and find function in my init files

* describe-key to pasteboard

* kill sentence shouldn't kill the line break after a sentence
(But it should if there's no sentence)



* kill-sentence bug

But in most of the big cities in the United States, it's straight women who are in the majority---meaning that single straight guys are a scarce commodity. To potential heterosexual men. So what happens when there aren't enough men to go around? Psychologist Sarah Hill has spent the last few years studying this very question. 

Test: kill "To potential heterosexual men."


* TESTING [#C] Parentheses, quotations, and auto-capitalize mode
OK, I think when we modified kill-clause to recognize parentheses as punctuation, it had an unintended consequence: auto-capitalize-mode now counts parentheses as periods. This behavior just started.

Let's say I enter the text:

: Alice (who was very curious indeed) was beginning to get very tired.

Now let's say I enter it with auto-capitalize-mode on.

Current output:
Alice (who was very curious indeed) Was beginning to get very tired.

Desired output:
Alice (who was very curious indeed) was beginning to get very tired.

Can we fix? Thanks!

** NOTE-TO-JAY Try it now

  ~kill-clause~ doesn't seem to have been responsible for the behaviour you describe; I did however, upon changing ~kill-clause~, notice that the value of ~sentence-end-base~ was strange -- i.e. malformed regexp that by "chance" worked as apparently intended -- and took the liberty of changing it, without warning you. Sorry for that. In any case, a sentence should never end after a ')' character, right? (Or should it...?) Anyway, for now I removed the ')' character (and several other characters that should either be end-of-sentence markers, such as " ' "), but if this example makes sense to you, we can also handle it.

** NOTE-TO-SERJ Answer
OK great. To answer your question, here are a few ways a sentence might look:

#+BEGIN_QUOTE
1. Alice (who was very curious) was tired.
2. Alice was tired. (Because she'd been running all day.)
3. Alice said: "This is the last time." But the next day it happened again.
#+END_QUOTE

#1 is now working as desired. Is it possible/feasible/practical to make auto-capitalize mode work correctly in cases #2 and #3 above, auto-capitalizing the B in each one?

** NOTE-TO-JAY Question

  My Emacs is reacting well with #2... are you sure it's not working as intended for you? I do suspect our Emacs are behaving somewhat differently. I get this feeling from the fact that I cannot get auto-capitalize to work correctly *unless* the spacebar is bound to ~self-insert-command~ (which, I suppose, is not your case, since you seem to be binding it to ~smart-space~). Do you confirm auto-capitalize is working correctly for most cases, except #2 and #3 above?

** NOTE-TO-SERJ Yes, #2 is working.
You're right, #2 works. Not sure why it wasn't working for me before... I must have done something when I was playing with autopair-mode. But yes, #2 works.

#3 definitely still doesn't work. And yes, auto-capitalize seems to work correctly in most other cases. Thanks!

** NOTE-TO-JAY I think it works now

  Please also check if sentence commands (killing sentences, etc.) are working as you intend, since I changed the ~sentence-end-base~ variable.

** NOTE-TO-SERJ Great!
Looks great! I will keep testing.
