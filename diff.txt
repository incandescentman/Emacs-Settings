diff --git a/.gitignore b/.gitignore
index 9608a4f..2e996e1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -41,4 +41,16 @@ spacemacs.d/.spacemacs.env
 spacecraft-mode.el
 spacecraft-mode.el
 .DS_Store
+
+
+*Emacs build artifacts
 *.elc
+*.eln            # native-comp output (Emacs 28+)
+auto-save-list/
+tramp/
+url/cache/
+
+*Spacemacs/straight/package.el checkouts
+elpa/
+straight/ 
+diff.txt
diff --git a/elpa-supplement/buffer-stack.el b/elpa-supplement/buffer-stack.el
index 92a9db2..a579bd8 100644
--- a/elpa-supplement/buffer-stack.el
+++ b/elpa-supplement/buffer-stack.el
@@ -261,21 +261,21 @@ switching buffers and then continue switching buffers."
         (message "Tried to bury bottom-most buffer!")
         (unless (= (length buffer-stack) 1)
           (buffer-stack-move -1)))
-      (let ((buffer (current-buffer)))
-        (when (buffer-stack-switching-p)
-          (buffer-stack-assert-not-empty)
-          ;; send to bottom of stack
-          (setq buffer-stack (delq buffer buffer-stack))
-          (when (buffer-stack-tracked-p buffer)
-            (setq buffer-stack (nconc buffer-stack (list buffer)))))
-        ;; bury in the real list
-        (buffer-stack-bury-buffer buffer)
-        ;; pull the "next" buffer to the top
-        (buffer-stack-move 0)
-        (if (= (length buffer-stack) 1)
-            ;; buffer-stack-move already beeped
-            (message "Tried to bury bottom-most buffer!")
-            (buffer-stack-show-position)))))
+    (let ((buffer (current-buffer)))
+      (when (buffer-stack-switching-p)
+        (buffer-stack-assert-not-empty)
+        ;; send to bottom of stack
+        (setq buffer-stack (delq buffer buffer-stack))
+        (when (buffer-stack-tracked-p buffer)
+          (setq buffer-stack (nconc buffer-stack (list buffer)))))
+      ;; bury in the real list
+      (buffer-stack-bury-buffer buffer)
+      ;; pull the "next" buffer to the top
+      (buffer-stack-move 0)
+      (if (= (length buffer-stack) 1)
+          ;; buffer-stack-move already beeped
+          (message "Tried to bury bottom-most buffer!")
+        (buffer-stack-show-position)))))
 
 ;;; private functions
 
@@ -305,33 +305,33 @@ This is THE switching command; all other motions are based on this."
         ;; only one buffer, so we don't have to move
         (or buffer-stack-quiet
             (beep))
-        ;; find the new index
-        (if (> direction 0)
-            (cl-incf buffer-stack-index)
-            (if (< direction 0)
-                (cl-decf buffer-stack-index)))
-        (if (< buffer-stack-index 0)
-            ;; go backwards to the last buffer
-            (progn (setq buffer-stack-index max-index)
-                   ;; this works correctly in GNU Emacs
-                   (setq buffer (nth buffer-stack-index buffer-stack))
+      ;; find the new index
+      (if (> direction 0)
+          (cl-incf buffer-stack-index)
+        (if (< direction 0)
+            (cl-decf buffer-stack-index)))
+      (if (< buffer-stack-index 0)
+          ;; go backwards to the last buffer
+          (progn (setq buffer-stack-index max-index)
+                 ;; this works correctly in GNU Emacs
+                 (setq buffer (nth buffer-stack-index buffer-stack))
+                 (or buffer-stack-quiet
+                     (beep)))
+        (if (> buffer-stack-index max-index)
+            ;; wrap to the first buffer
+            (progn (setq buffer-stack-index 0)
+                   (buffer-stack-bury-buffer (current-buffer))
+                   (setq buffer (first buffer-stack))
                    (or buffer-stack-quiet
                        (beep)))
-            (if (> buffer-stack-index max-index)
-                ;; wrap to the first buffer
-                (progn (setq buffer-stack-index 0)
-                       (buffer-stack-bury-buffer (current-buffer))
-                       (setq buffer (first buffer-stack))
-                       (or buffer-stack-quiet
-                           (beep)))
-                ;; the usual case, we put the top buffer before the indexed
-                ;; buffer and the indexed buffer on top
-                (setq buffer (nth buffer-stack-index buffer-stack))
-                (unless (eq (current-buffer) buffer)
-                  ;; If we were already at the top of the stack and moved 0,
-                  ;; this would try and bury the buffer before itself -- so
-                  ;; don't do it in that case.
-                  (buffer-stack-bury-buffer (current-buffer) buffer)))))
+          ;; the usual case, we put the top buffer before the indexed
+          ;; buffer and the indexed buffer on top
+          (setq buffer (nth buffer-stack-index buffer-stack))
+          (unless (eq (current-buffer) buffer)
+            ;; If we were already at the top of the stack and moved 0,
+            ;; this would try and bury the buffer before itself -- so
+            ;; don't do it in that case.
+            (buffer-stack-bury-buffer (current-buffer) buffer)))))
     ;; now we move
     (switch-to-buffer buffer)
     (setq buffer-stack-last-buffer buffer)))
@@ -339,34 +339,34 @@ This is THE switching command; all other motions are based on this."
 (defun buffer-stack-bury-buffer (buffer &optional before)
   "Emulate xemacs's bury-buffer for GNU Emacs."
   (if (featurep 'xemacs) (bury-buffer buffer before)
-      ;; GNU Emacs 21.2.1 has a bug where it buries the buffer in the
-      ;; wrong frame, so here we reimplement burying a buffer.
-      ;; Unfortunately we do not bury in the global list like we should,
-      ;; so if you switch frame-local off the global list will
-      ;; probably be wrong. Why are you switching frame-local off?
-      (if buffer-stack-frame-local
-          (let* ((frame (selected-frame))
-                 (new-list (buffer-list frame))
-                 (rest new-list))
-            (setq new-list (delq buffer new-list))
-            (if (null new-list)
-                (setq new-list (list buffer))
-                (if (null before)
-                    (setq new-list (nconc new-list (list buffer)))
-                    (if (eq before (car new-list))
-                        (setq new-list (cons buffer new-list))
-                        (while (not (or (null (cdr rest)) (eq (cadr rest) before)))
-                          (setq rest (cdr rest)))
-                        (setcdr rest (cons buffer (cdr rest)))
-                        )))
-            (modify-frame-parameters frame (list (cons 'buffer-list new-list))))
-          ;; This works on the global list and will work for the frame
-          ;; list too once that bug is fixed.
-          (dolist (b (buffer-list nil))
-            (when (eq b before)
-              (bury-buffer buffer))
-            (unless (eq b buffer)
-              (bury-buffer b))))))
+    ;; GNU Emacs 21.2.1 has a bug where it buries the buffer in the
+    ;; wrong frame, so here we reimplement burying a buffer.
+    ;; Unfortunately we do not bury in the global list like we should,
+    ;; so if you switch frame-local off the global list will
+    ;; probably be wrong. Why are you switching frame-local off?
+    (if buffer-stack-frame-local
+        (let* ((frame (selected-frame))
+               (new-list (buffer-list frame))
+               (rest new-list))
+          (setq new-list (delq buffer new-list))
+          (if (null new-list)
+              (setq new-list (list buffer))
+            (if (null before)
+                (setq new-list (nconc new-list (list buffer)))
+              (if (eq before (car new-list))
+                  (setq new-list (cons buffer new-list))
+                (while (not (or (null (cdr rest)) (eq (cadr rest) before)))
+                  (setq rest (cdr rest)))
+                (setcdr rest (cons buffer (cdr rest)))
+                )))
+          (modify-frame-parameters frame (list (cons 'buffer-list new-list))))
+      ;; This works on the global list and will work for the frame
+      ;; list too once that bug is fixed.
+      (dolist (b (buffer-list nil))
+        (when (eq b before)
+          (bury-buffer buffer))
+        (unless (eq b buffer)
+          (bury-buffer b))))))
 
 (defun buffer-stack-rebuild ()
   "Create `buffer-stack' from the buffer list."
@@ -375,15 +375,15 @@ This is THE switching command; all other motions are based on this."
 (defun buffer-stack-clean (buffer-list)
   "Remove untracked buffers from a list by side effect."
   (let ((rest buffer-list)
-        buffer
+	buffer
         last)
     (while (not (null rest))
       (setq buffer (car rest))
       (if (buffer-stack-tracked-p buffer)
           (setq last rest)
-          (if last
-              (setcdr last (cdr rest))
-              (setq buffer-list (cdr rest))))
+        (if last
+            (setcdr last (cdr rest))
+          (setq buffer-list (cdr rest))))
       (setq rest (cdr rest)))
     buffer-list))
 
@@ -399,9 +399,9 @@ This is THE switching command; all other motions are based on this."
 (defun buffer-stack-frame ()
   (if buffer-stack-frame-local
       (selected-frame)
-      (if (featurep 'xemacs)
-          t
-          nil)))
+    (if (featurep 'xemacs)
+        t
+      nil)))
 
 (defun buffer-stack-assert-not-empty ()
   (if (null buffer-stack)
@@ -430,10 +430,10 @@ That's number/total."
         (max-index (- (length buffer-stack) 1)))
     (if (eq buffer-stack-index 0)
         (setq up-buffer-index max-index)
-        (setq up-buffer-index (- buffer-stack-index 1)))
+      (setq up-buffer-index (- buffer-stack-index 1)))
     (if (eq buffer-stack-index max-index)
         (setq down-buffer-index 0)
-        (setq down-buffer-index (+ buffer-stack-index 1)))
+      (setq down-buffer-index (+ buffer-stack-index 1)))
     (message (concat "DOWN: "
                      (buffer-name (nth down-buffer-index buffer-stack))
                      " ---- " "UP: "
@@ -457,5 +457,4 @@ That's number/total."
   "Non-nil if buffer is in buffer-stack-tracked."
   (member (buffer-name buffer) buffer-stack-tracked))
 
-(provide 'buffer-stack)
 ;;; buffer-stack.el ends here
diff --git a/gnu-emacs-startup.org b/gnu-emacs-startup.org
index 48a1553..d593c78 100644
--- a/gnu-emacs-startup.org
+++ b/gnu-emacs-startup.org
@@ -1,4 +1,3 @@
-#+auto_tangle: t
 * NOTE-TO-JAY file settings             :ARCHIVE:
 #+OPTIONS: f:t
 #+ TODO: TODO PLEASE-TEST TESTING PLEASE-DEBUG | DONE
@@ -8,7 +7,7 @@
 #+TITLE: #+TITLE: Jay Dixit's GNU Emacs setup
 #+TITLE: Jay Dixit's GNU Emacs setup
 * environment settings
-** Handle Emacs UTF-8 input.
+** Handle Emacs UTF-8 input
 #+BEGIN_SRC emacs-lisp
 ;; early-init.el  ── locale in one place
 (set-language-environment "UTF-8")   ; everything speaks UTF-8
@@ -134,7 +133,7 @@ So Emacs text doesn't appear on the MacBook Pro notch.
   (tab-bar-mode 1)
  (tab-bar-mode -1)))
 
-
+(add-hook 'window-configuration-change-hook #'my-toggle-tab-bar-mode)
 #+END_SRC
 
 
@@ -781,7 +780,6 @@ Eventually replace these with this? https://github.com/noctuid/general.el
 (define-key key-minor-mode-map (kbd "s-g") 'isearch-repeat-forward)
 (define-key key-minor-mode-map (kbd "C-s-g ") 'consult-ripgrep-current-directory)
 (define-key key-minor-mode-map (kbd "s-G") 'counsel-projectile-ag)
-(define-key key-minor-mode-map (kbd "s-G") #'counsel-projectile-rg)
 
 (define-key org-mode-map (kbd "C-c C-s") 'org-schedule)
 (define-key key-minor-mode-map (kbd "C-c C-s") 'org-schedule)
diff --git a/org-yt.el b/org-yt.el
new file mode 100644
index 0000000..ad6d083
--- /dev/null
+++ b/org-yt.el
@@ -0,0 +1,329 @@
+;;; org-yt.el --- Org youtube links.                 -*- lexical-binding: t; -*-
+
+;; Copyright (C) 2018  U-ESI-INTERNAL\TOZ
+
+;; Author: U-ESI-INTERNAL\TOZ <TOZ@smtp.1und1.de>
+;; Keywords: multimedia
+
+;; This program is free software; you can redistribute it and/or modify
+;; it under the terms of the GNU General Public License as published by
+;; the Free Software Foundation, either version 3 of the License, or
+;; (at your option) any later version.
+
+;; This program is distributed in the hope that it will be useful,
+;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;; GNU General Public License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+;;; Commentary:
+
+;; Idea from  https://emacs.stackexchange.com/questions/38098/org-mode-custom-youtube-link-syntax
+
+;;; Code:
+
+(require 'org)
+(require 'org-element)
+
+(defcustom org-yt-url-protocol "yt"
+  "Protocol identifier for youtube links."
+  :group 'org-yt
+  :type 'string)
+
+(defcustom org-yt-cache-directory (expand-file-name "yt-cache" user-emacs-directory)
+  "Directory used to cache thumbnails."
+  :group 'org-yt
+  :type 'string
+  )
+
+(defcustom org-yt-use-cache t
+  "When not nil, maintain a cache of downloaded thumbnails."
+  :group 'org-yt
+  :type 'boolean
+  )
+
+(defcustom org-yt-cache-limit 100
+  "Maximal number of cached thumbnail image files."
+  :group 'org-yt
+  :type '(choice :format "%{%t%}: %[Cache Limit Type%] %v" :label "Enable/Disable Cache Limit" :tag "Delimit Cache Size" (const :tag "Unlimited" nil) (number :tag "Number of Images")))
+
+;;; End of Customizations
+
+(defconst org-yt-image-file-extension "jpg"
+  "Extension for Youtube thumbnail image files.")
+
+(defun org-yt-image-link (video-id)
+  "Return image link for VIDEO-ID as string."
+  (format "https://img.youtube.com/vi/%s/0.%s" video-id org-yt-image-file-extension))
+
+(defun org-yt-video-link (video-id)
+  "Return video link for VIDEO-ID as string."
+  (concat "https://youtu.be/" video-id))
+
+(defun org-image-update-overlay (file link &optional data-p refresh)
+  "Create image overlay for FILE associtated with org-element LINK.
+If DATA-P is non-nil FILE is not a file name but a string with the image data.
+If REFRESH is non-nil don't download the file but refresh the image.
+See also `create-image'.
+This function is almost a duplicate of a part of `org-display-inline-images'."
+  (when (or data-p (file-exists-p file))
+    (let ((width
+           ;; Apply `org-image-actual-width' specifications.
+           (cond
+            ((eq org-image-actual-width t) nil)
+            ((listp org-image-actual-width)
+             (or
+              ;; First try to find a width among
+              ;; attributes associated to the paragraph
+              ;; containing link.
+              (let ((paragraph
+                     (let ((e link))
+                       (while (and (setq e (org-element-property
+                                            :parent e))
+                                   (not (eq (org-element-type e)
+                                            'paragraph))))
+                       e)))
+                (when paragraph
+                  (save-excursion
+                    (goto-char (org-element-property :begin paragraph))
+                    (when
+                        (re-search-forward
+                         "^[ \t]*#\\+attr_.*?: +.*?:width +\\(\\S-+\\)"
+                         (org-element-property
+                          :post-affiliated paragraph)
+                         t)
+                      (string-to-number (match-string 1))))))
+              ;; Otherwise, fall-back to provided number.
+              (car org-image-actual-width)))
+            ((numberp org-image-actual-width)
+             org-image-actual-width)))
+          (old (get-char-property-and-overlay
+                (org-element-property :begin link)
+                'org-image-overlay)))
+      (if (and (car-safe old) refresh)
+          (image-refresh (overlay-get (cdr old) 'display))
+        (let ((image (create-image file
+                                   (and (image-type-available-p 'imagemagick)
+                                        width
+                                        'imagemagick)
+                                   data-p
+                                   :width width)))
+          (when image
+            (let* ((link
+                    ;; If inline image is the description
+                    ;; of another link, be sure to
+                    ;; consider the latter as the one to
+                    ;; apply the overlay on.
+                    (let ((parent
+                           (org-element-property :parent link)))
+                      (if (eq (org-element-type parent) 'link)
+                          parent
+                        link)))
+                   (ov (make-overlay
+                        (org-element-property :begin link)
+                        (progn
+                          (goto-char
+                           (org-element-property :end link))
+                          (skip-chars-backward " \t")
+                          (point)))))
+              (overlay-put ov 'display image)
+              (overlay-put ov 'face 'default)
+              (overlay-put ov 'org-image-overlay t)
+              (overlay-put
+               ov 'modification-hooks
+               (list 'org-display-inline-remove-overlay))
+              (push ov org-inline-image-overlays)
+              ov)))))))
+
+(defun org-yt-get-image (video-id)
+  "Retrieve thumbnail image for VIDEO-ID."
+  (condition-case err
+      (let* ((url (org-yt-image-link video-id))
+             (image-buf (url-retrieve-synchronously url)))
+        (when image-buf
+          (with-current-buffer image-buf
+            (goto-char (point-min))
+            (when (looking-at "HTTP/")
+              (delete-region (point-min)
+                             (progn (re-search-forward "\n[\n]+")
+                                    (point))))
+            (buffer-substring-no-properties (point-min) (point-max)))))
+    (error
+     (message "Retrieving thumbnail for video [%s] [%s]" video-id err)
+     nil
+     )))
+
+(defun org-yt-image-cache-file-name (video-id)
+  "Return absolute cache file name for VIDEO-ID."
+  (expand-file-name (format "%s.%s" video-id org-yt-image-file-extension) org-yt-cache-directory))
+
+(defun org-yt-image-in-cache (video-id)
+  "Retrieve thumbnail for VIDEO-ID from cache."
+  ;; try it, does it work, good.
+  ;; Not? file not in cache or an error. there is nothing we can do
+  (condition-case nil
+      (with-temp-buffer
+	(set-buffer-multibyte nil)
+        (insert-file-contents-literally (org-yt-image-cache-file-name video-id))
+        (let (
+              (thumbnail(buffer-string))
+              )
+          ;; make sure we got something
+          (if (> (string-bytes thumbnail) 0)
+              thumbnail
+            nil)))
+    (error nil)))
+
+(cl-defun org-yt-old-images-in-cache (&optional (max-cache-size org-yt-cache-limit))
+  "Determine the oldest images exceeding the cache limit.
+The age of images is determined by their access time.
+The cache limit is given by MAX-CACHE-SIZE.
+The default for MAX-CACHE-SIZE is `org-yt-cache-limit'.
+Return nil when `org-yt-cache-limit' is not a positive number."
+  (when (and (numberp max-cache-size)
+	     (> max-cache-size 0))
+    (nthcdr max-cache-size
+	    (sort
+	     (directory-files
+	      org-yt-cache-directory
+	      t
+	      (format "\\.%s\\'" (regexp-quote org-yt-image-file-extension)))
+	     (lambda (fn1 fn2)
+	       (time-less-p
+		(file-attribute-access-time (file-attributes fn2))
+		(file-attribute-access-time (file-attributes fn1))))))))
+;; Test:
+;; (org-yt-cache-old-images 2)
+
+(defun org-yt-image-to-cache (video-id image)
+  "Save the thumbnail IMAGE for VIDEO-ID to the cache.
+Always returns IMAGE, even if the save operation fails."
+  ;; but only do if there is data
+  (when (> (string-bytes image) 0)
+    (condition-case err
+        (progn
+          ;; create directory if it does not exist
+          (unless (file-directory-p org-yt-cache-directory)
+              (make-directory org-yt-cache-directory t)
+            )
+          (with-temp-buffer
+            (insert image)
+            (write-region (point-min) (point-max)
+                          (org-yt-image-cache-file-name video-id)))
+          )
+      (error
+       (message "Unable to write video thumbnail for video [%s] to cache [%s]... continuing" video-id err)
+       )))
+  (dolist (old-file (org-yt-old-images-in-cache))
+    (delete-file old-file))
+  image)
+
+(defun org-yt-get-image-for-id (video-id)
+  "Retrieve thumbnail for VIDEO-ID.
+Try cache first."
+  (if org-yt-use-cache
+      (or (org-yt-image-in-cache video-id)
+          (org-yt-image-to-cache video-id (org-yt-get-image video-id)))
+    (org-yt-get-image video-id)
+    )
+  )
+
+(defconst org-yt-video-id-regexp "[-_[:alnum:]]\\{10\\}[AEIMQUYcgkosw048]"
+  "Regexp matching youtube video id's taken from `https://webapps.stackexchange.com/questions/54443/format-for-id-of-youtube-video'.")
+
+(defun org-yt-follow (video-id)
+  "Open youtube with VIDEO-ID."
+  (browse-url (org-yt-video-link video-id)))
+
+(defun org-yt-image-data-fun (_protocol link _description)
+  "Get image corresponding to LINK from youtube.
+Use this as :image-data-fun property in `org-link-properties'.
+See `org-display-user-inline-images' for a description of :image-data-fun."
+  (when (string-match org-yt-video-id-regexp link)
+    (org-yt-get-image-for-id link)))
+
+(org-link-set-parameters org-yt-url-protocol
+			 :follow #'org-yt-follow
+			 :image-data-fun #'org-yt-image-data-fun)
+
+(require 'subr-x)
+
+(defun org-display-user-inline-images (&optional _include-linked _refresh beg end)
+  "Like `org-display-inline-images' but for image data links.
+_INCLUDE-LINKED and _REFRESH are ignored.
+Restrict to region between BEG and END if both are non-nil.
+Image data links have a :image-data-fun parameter.
+\(See `org-link-set-parameters'.)
+The value of the :image-data-fun parameter is a function
+taking the PROTOCOL, the LINK, and the DESCRIPTION as arguments.
+If that function returns nil the link is not interpreted as image.
+Otherwise the return value is the image data string to be displayed.
+
+Note that only bracket links are allowed as image data links
+with one of the formats
+ [[PROTOCOL:LINK]]
+or
+ [[PROTOCOL:LINK][DESCRIPTION]]
+are recognized."
+  (interactive)
+  (when (and (called-interactively-p 'any)
+             (use-region-p))
+    (setq beg (region-beginning)
+          end (region-end)))
+  (when (display-graphic-p)
+    (org-with-wide-buffer
+     (goto-char (or beg (point-min)))
+     (when-let ((image-data-link-parameters
+		 (cl-loop for link-par-entry in org-link-parameters
+			  with fun
+			  when (setq fun (plist-get (cdr link-par-entry) :image-data-fun))
+			  collect (cons (car link-par-entry) fun)))
+		(image-data-link-re (regexp-opt (mapcar 'car image-data-link-parameters)))
+		(re (format "\\[\\[\\(%s\\):\\([^]]+\\)\\]\\(?:\\[\\([^]]+\\)\\]\\)?\\]"
+			    image-data-link-re)))
+       (while (re-search-forward re end t)
+         (let* ((protocol (match-string-no-properties 1))
+		(link (match-string-no-properties 2))
+		(description (match-string-no-properties 3))
+		(image-data-link (assoc-string protocol image-data-link-parameters))
+		(el (save-excursion (goto-char (match-beginning 1)) (org-element-context)))
+		image-data)
+           (when el
+             (setq image-data
+                   (or (let ((old (get-char-property-and-overlay
+                                   (org-element-property :begin el)
+                                   'org-image-overlay)))
+                         (and old
+                              (car-safe old)
+                              (overlay-get (cdr old) 'display)))
+		       (funcall (cdr image-data-link) protocol link description)))
+             (when image-data
+               (let ((ol (org-image-update-overlay image-data el t t)))
+                 (when (and ol description)
+                   (overlay-put ol 'after-string description)))))))))))
+
+(advice-add #'org-display-inline-images :after #'org-display-user-inline-images)
+
+
+;; Export
+
+(defun org-yt-export (video-id description backend ext-plist)
+  "Export youtube video with VIDEO-ID to BACKEND.
+If DESCRIPTION is a string put it below the video.
+EXT-PLIST is the data channel for the export backend."
+  (let* ((video-link (org-yt-video-link video-id)))
+    (org-export-string-as
+     (concat
+      (format "[[%s][%s]]" video-link (org-yt-image-link video-id))
+      (when description
+	(format " [[%s][%s]]" video-link description)))
+     backend
+     t
+     ext-plist)))
+
+(org-link-set-parameters "yt" :export #'org-yt-export)
+
+(provide 'org-yt)
+;;; org-yt.el ends here
diff --git a/poetry_JD.el b/poetry_JD.el
index 39c9012..24ee9bc 100644
--- a/poetry_JD.el
+++ b/poetry_JD.el
@@ -11,7 +11,7 @@
 ;;  Download this: http://www.bobnewell.net/filez/poetry.el
 
 ;; Somehow I got interested in sonnet writing, and I wanted to do it
-;; right. I discovered the Windoze freeware Verse Perfect and was 
+;; right. I discovered the Windoze freeware Verse Perfect and was
 ;; impressed, but I wanted something for emacs. This is now pretty
 ;; close to matching the poetry parts. There are no thesauri or
 ;; on-line regular dictionaries/lookups here. There are other emacs
@@ -64,18 +64,18 @@
 ;; correctly. Are these stats good enough to make for a useful tool
 ;; for /writing/ poetry?  Maybe. You tell me!
 
-;; Once again, the latest version should always be at 
+;; Once again, the latest version should always be at
 
 ;;  http://www.bobnewell.net/filez/poetry.el
 
 ;; I don't plan on announcing new versions unless they are really
 ;; a major change.
 
- (defvar poetry-version-no "0.14 alpha")
+(defvar poetry-version-no "0.14 alpha")
 
 ;; 2015-03-02 0.14 Tweaks per Stephan's message. Now distributed
 ;;                 as .el rather than .zip; remove refs to variable
-;;                 poetry--line-number-cache; change 2nd arg from t to 
+;;                 poetry--line-number-cache; change 2nd arg from t to
 ;;                 nil in call to jit-lock-register.
 ;;                 A little more embedded silent 'e' tuning. Did it get
 ;;                 better or worse?
@@ -89,14 +89,14 @@
 ;;                 Fixed some errors in words ending in silent 'e'
 ;;                 followed by 'ing', but the fix may have side effects.
 ;;                 Did a general fix for plurals of silent 'e' endings
-;;                 not preceded by 'c' or 's', but the fix also may 
+;;                 not preceded by 'c' or 's', but the fix also may
 ;;                 have side effects.
 ;; 2015-02-20 0.11 Added version number function poetry-version.
 ;;                 Tweaked comments and a few definitions.
 ;; 2015-02-19 0.10 Completely new and much better way of geting
 ;;                 foot counts, though nothing like perfect
 ;;                 and never will be.
-;;                 Undid 'let' constructs to allow easier 
+;;                 Undid 'let' constructs to allow easier
 ;;                 debugging. Bad practice? Sure.
 ;;                 Removed dependence on 'cl'.
 ;;                 Version jump represents change from 'pre-alpha'
@@ -111,7 +111,7 @@
 ;;                 display implementation.
 ;; 2015-02-13 0.01 Revised to use nlinum.el and combine
 ;;                 into one file.
-;; 2015-02-12 0.00 Initial coding and release. 
+;; 2015-02-12 0.00 Initial coding and release.
 ;;                 Bob Newell, Honolulu, Hawai`i.
 
 ;; Three things are here right now.
@@ -208,193 +208,193 @@
 ;; 3. Is there a way to integrate with org-mode? Perhaps display foot
 ;;    counts only in a poetry block? This may not be so easy.
 
- (require 'linum)
+(global-display-line-numbers-mode 1)
 
 ;; Constants and variables. I prefer for now to define variables with
 ;; global scope (no 'let' stuff) as this makes debugging a lot easier,
 ;; and I found that debugging the foot counting functions was and is
 ;; quite tedious.
 
- (defvar poetry-count)
- (defvar poetry-patterns)
- (defvar poetry-rhyme)
- (defvar poetry-wordlist)
- (defvar poetry-wordline)
- (defvar poetry-vowgrouplen)
- (defvar poetry-lastmatch)
- (defvar poetry-pluses)
- (defvar poetry-minuses)
- (defvar poetry-counter)
- (defvar poetry-element)
- (defvar poetry-string)
- (defvar poetry-collection)
- (defvar poetry-selection)
- (defvar poetry-pattern)
+(defvar poetry-count)
+(defvar poetry-patterns)
+(defvar poetry-rhyme)
+(defvar poetry-wordlist)
+(defvar poetry-wordline)
+(defvar poetry-vowgrouplen)
+(defvar poetry-lastmatch)
+(defvar poetry-pluses)
+(defvar poetry-minuses)
+(defvar poetry-counter)
+(defvar poetry-element)
+(defvar poetry-string)
+(defvar poetry-collection)
+(defvar poetry-selection)
+(defvar poetry-pattern)
 
 ;; Begin foot count exceptions. This started with haiku.el but I made
 ;; many changes and proposed counting fixes, some of which will be
 ;; good and some undoubtedly not.
 
- (defconst poetry-count-feet-negative
-    '("cial" "tia" "cius" "cious" "giu" 
-      "ion" "iou" "sia$" ".ely$"
-;; 'queen', queer' etc.
-     "uee"
-;; Final 'e' (e preceded by consonant) , initial 'yea' (year=1).
-      "[^aeiou]e$" "^yea" 
-;; Unvoiced 'ed' endings. 'wasted' is 2 but 'dropped' is 1.
-      "[^dtaieou]ed$"
-;; Final 'es' for plurals after silent e, but not 'ces' 'ges' 'ses',
-;; meaning 'noses' and 'voices' are 2 but 'games' or 'nodes' are 1.
-      "[^csg]es$" 
-
-;; The following is a work-in-progress and will look messy.
-;; Limited attempt at embedded silent 'e'. At the start of a word,
-;; look for a consonant (cluster), vowel, consonant, 'e', and then 
-;; either V+CVC or CVCV. Fails on longer words like 'heretofore'.
-;; I keep it limited because otherwise a lot of words like 'together'
-;; scan improperly. 'eyelid' and 'pavement' also miss.
-;      "^[^aeiou]+[aeiou][^aeiou]e[^aeiou]+[aeiouy][^aeiou][aeiou]$"
-      "^...e[^aeiou]+[aeiouy][^aeiou][aeiou]$"
-;      "^..e[^aeiou]+[aeiouy][^aeiou][aeiou]$"
-      "^[^aeiou]+[aeiou][^aeiou]e[aeiou][^aeiou][aeiou][^aeiou]$"
-
-     ))
-     
- (defconst poetry-count-feet-positive
-;; I took 'li' out of this list. Undoubtedly I'll regret it, but I
-;; don't know why it was there.
-    '("ia" "riet" "dien" "iu" "io" "eo" 
-;; 'table' etc. But this is not good enough, like 'trestle'.
-;;    "[aeiouym]ble"
-;; It seems that an "le(s)" ending is actually the general case,
-;; if not preceded by a vowel?
+(defconst poetry-count-feet-negative
+  '("cial" "tia" "cius" "cious" "giu"
+    "ion" "iou" "sia$" ".ely$"
+    ;; 'queen', queer' etc.
+    "uee"
+    ;; Final 'e' (e preceded by consonant) , initial 'yea' (year=1).
+    "[^aeiou]e$" "^yea"
+    ;; Unvoiced 'ed' endings. 'wasted' is 2 but 'dropped' is 1.
+    "[^dtaieou]ed$"
+    ;; Final 'es' for plurals after silent e, but not 'ces' 'ges' 'ses',
+    ;; meaning 'noses' and 'voices' are 2 but 'games' or 'nodes' are 1.
+    "[^csg]es$"
+
+    ;; The following is a work-in-progress and will look messy.
+    ;; Limited attempt at embedded silent 'e'. At the start of a word,
+    ;; look for a consonant (cluster), vowel, consonant, 'e', and then
+    ;; either V+CVC or CVCV. Fails on longer words like 'heretofore'.
+    ;; I keep it limited because otherwise a lot of words like 'together'
+    ;; scan improperly. 'eyelid' and 'pavement' also miss.
+                                        ;      "^[^aeiou]+[aeiou][^aeiou]e[^aeiou]+[aeiouy][^aeiou][aeiou]$"
+    "^...e[^aeiou]+[aeiouy][^aeiou][aeiou]$"
+                                        ;      "^..e[^aeiou]+[aeiouy][^aeiou][aeiou]$"
+    "^[^aeiou]+[aeiou][^aeiou]e[aeiou][^aeiou][aeiou][^aeiou]$"
+
+    ))
+
+(defconst poetry-count-feet-positive
+  ;; I took 'li' out of this list. Undoubtedly I'll regret it, but I
+  ;; don't know why it was there.
+  '("ia" "riet" "dien" "iu" "io" "eo"
+    ;; 'table' etc. But this is not good enough, like 'trestle'.
+    ;;    "[aeiouym]ble"
+    ;; It seems that an "le(s)" ending is actually the general case,
+    ;; if not preceded by a vowel?
     "[^aeiouy]le$" "[^aeiouy]les$"
     "[aeiou]\\{3\\}"
-;; Initial 'mc' = 'mac'.
+    ;; Initial 'mc' = 'mac'.
     "^mc"
-;; Be-ing but not see-ing or 'u-ing' words.
+    ;; Be-ing but not see-ing or 'u-ing' words.
     "[^aeiouy][aeio]ing$"
-;; Something that has a non-initial y followed by aeiou like lying,
-;; crying.
+    ;; Something that has a non-initial y followed by aeiou like lying,
+    ;; crying.
     ".+y[aeiou]"
     "ism$" ; isms
-;; This doesn't seem to work, so I kludge it just below.
-;; Actually, I now cover it in the general 'le$' case above.
-;;    "\\([^aeiouy]\\)\\1l$" ; middle twiddle battle bottle, etc
-;;    "ddle$" "ttle$"
-;; alien, salient, but not lien, or ebbuillient
+    ;; This doesn't seem to work, so I kludge it just below.
+    ;; Actually, I now cover it in the general 'le$' case above.
+    ;;    "\\([^aeiouy]\\)\\1l$" ; middle twiddle battle bottle, etc
+    ;;    "ddle$" "ttle$"
+    ;; alien, salient, but not lien, or ebbuillient
     "[^l]lien"
-;; exception for words coadjutor coagulable coagulate
+    ;; exception for words coadjutor coagulable coagulate
     "^coa[dglx]"
-;; coalesce coalescent coalition coaxial
+    ;; coalesce coalescent coalition coaxial
     "[^gq]ua[^aeiou]"
-;; Save word like 'beseemed' from embedded silent 'e' fix above.
-;; This is getting kludgy and fragile.
-      "^[^aeiou]+[aeiou][^aeiou]e[aeiou][^aeiou]ed$"
+    ;; Save word like 'beseemed' from embedded silent 'e' fix above.
+    ;; This is getting kludgy and fragile.
+    "^[^aeiou]+[aeiou][^aeiou]e[aeiou][^aeiou]ed$"
     "dnt$")) ; couldn't
 
 (setq poetry-patterns '(
-   ("10a10b" "10a,10b,10a,10b")
-   ("Alfred Dorn Sonnet" "a,b,c,a,b,c,,d,d,,a,e,a,e,a,e")
-   ("French Sonnet 1" "10c,10c,,10d,10c,10c,10d")
-   ("French Sonnet 2" "10c,10c,,10d,10e,10e,10d")
-   ("French Sonnet 3" "10c,10c,,10d,10e,10d,10e") 
-   ("Haiku" "5,7,5") 
-   ("Italian Sonnet Basic" "a,b,b,a,a,b,b,a,,c,d,e,c,d,e")
-   ("Italian Sonnet Sicilian" "a,b,b,a,c,d,d,c,,e,f,e,f,e,f")
-   ("Italian Sonnet Sonetto Rispetto" 
-"a,d,a,b,a,b,c,c,,d,e,f,d,e,f,,d,e,d,e,d,e")
-   ("Keats Sonnet" "a,b,c,,a,b,c,,c,a,b,,c,d,e,,d,e")
-   ("Limerick" "a,a,b,b,a")
-   ("Ottava Rima" "a,b,a,b,a,b,c,c") 
-   ("Petrarchian Sonnet" "a,b,b,a,a,b,b,a,,c,d,e,c,d,e")
-   ("Pushkin Sonnet" "a,b,a,b,,c,c,d,d,,e,f,f,e,,g,g") 
-   ("Quatrain Type 1" "a,a,b,b")
-   ("Quatrain Type 2" "a,b,a,b")
-   ("Quatrain Type 3" "a,b,b,a") 
-   ("Quatrain Type 4" "a,b,c,b")
-   ("Rime Royal" "a,b,a,b,b,c,c") 
-   ("Rubaiyat" "a,a,b,a,,b,b,c,b,,c,c,a,c,,a,a") 
-   ("Sestina" 
-"a,b,c,d,e,f,,f,a,e,b,d,c,,c,f,d,a,b,e,,e,c,b,f,a,d,,d,e,a,c,f,b,,b,d,f,e,c,a")
-   ("Shakesperian Sonnet" "a,b,a,b,,c,d,c,d,,e,f,e,f,,g,g") 
-   ("Spenserian Sonnet" "a,b,a,b,,b,c,b,c,,c,d,c,d,,e,e") 
-   ("Spenserian Stanza" "a,b,a,b,,b,c,b,c,,c") 
-   ("Tanka" "5,7,5,7A,7A")
-   ("Terza Rima" "a,b,a,,b,c,b,,c,d,c,,d,e,d,,e,e") 
-   ("Villanelle" "a,b,a,,a,b,a,,a,b,a,,a,b,a,,a,b,a,,a,b,a,a")
-  )
- ) 
+                        ("10a10b" "10a,10b,10a,10b")
+                        ("Alfred Dorn Sonnet" "a,b,c,a,b,c,,d,d,,a,e,a,e,a,e")
+                        ("French Sonnet 1" "10c,10c,,10d,10c,10c,10d")
+                        ("French Sonnet 2" "10c,10c,,10d,10e,10e,10d")
+                        ("French Sonnet 3" "10c,10c,,10d,10e,10d,10e")
+                        ("Haiku" "5,7,5")
+                        ("Italian Sonnet Basic" "a,b,b,a,a,b,b,a,,c,d,e,c,d,e")
+                        ("Italian Sonnet Sicilian" "a,b,b,a,c,d,d,c,,e,f,e,f,e,f")
+                        ("Italian Sonnet Sonetto Rispetto"
+                         "a,d,a,b,a,b,c,c,,d,e,f,d,e,f,,d,e,d,e,d,e")
+                        ("Keats Sonnet" "a,b,c,,a,b,c,,c,a,b,,c,d,e,,d,e")
+                        ("Limerick" "a,a,b,b,a")
+                        ("Ottava Rima" "a,b,a,b,a,b,c,c")
+                        ("Petrarchian Sonnet" "a,b,b,a,a,b,b,a,,c,d,e,c,d,e")
+                        ("Pushkin Sonnet" "a,b,a,b,,c,c,d,d,,e,f,f,e,,g,g")
+                        ("Quatrain Type 1" "a,a,b,b")
+                        ("Quatrain Type 2" "a,b,a,b")
+                        ("Quatrain Type 3" "a,b,b,a")
+                        ("Quatrain Type 4" "a,b,c,b")
+                        ("Rime Royal" "a,b,a,b,b,c,c")
+                        ("Rubaiyat" "a,a,b,a,,b,b,c,b,,c,c,a,c,,a,a")
+                        ("Sestina"
+                         "a,b,c,d,e,f,,f,a,e,b,d,c,,c,f,d,a,b,e,,e,c,b,f,a,d,,d,e,a,c,f,b,,b,d,f,e,c,a")
+                        ("Shakesperian Sonnet" "a,b,a,b,,c,d,c,d,,e,f,e,f,,g,g")
+                        ("Spenserian Sonnet" "a,b,a,b,,b,c,b,c,,c,d,c,d,,e,e")
+                        ("Spenserian Stanza" "a,b,a,b,,b,c,b,c,,c")
+                        ("Tanka" "5,7,5,7A,7A")
+                        ("Terza Rima" "a,b,a,,b,c,b,,c,d,c,,d,e,d,,e,e")
+                        ("Villanelle" "a,b,a,,a,b,a,,a,b,a,,a,b,a,,a,b,a,,a,b,a,a")
+                        )
+      )
 
 ;; Useless aux function.
 
 (defun poetry-version ()
-"Give poetry tool version number"
- (interactive)
- (message (concat "poetry.el " poetry-version-no))
-)
+  "Give poetry tool version number"
+  (interactive)
+  (message (concat "poetry.el " poetry-version-no))
+  )
 
 ;; Begin foot counting code.  This is a rewrite of haiku.el with a lot
 ;; of changes.
- 
+
 (defun poetry-feet-in-line ()
- "Count feet in current line and return it"
+  "Count feet in current line and return it"
   (interactive)
 
-;; Get the current line.
- (setq poetry-wordline (thing-at-point 'line))
-;; Force lowercase.
- (setq poetry-wordline (downcase poetry-wordline))
-;; Change hyphens to spaces.
- (setq poetry-wordline (replace-regexp-in-string "-" " " poetry-wordline))
-;; Remove non-letters except for spaces.
- (setq poetry-wordline (replace-regexp-in-string "[^A-za-z ]" "" poetry-wordline))
-;; Divide line into words.
- (setq poetry-wordlist (split-string poetry-wordline " " t))
-;; Count (and add up and return) the feet in each word.
- (setq poetry-count 0)
-   (mapc (function (lambda (x)
-           (setq poetry-count 
-             (+ poetry-count (poetry-count-feet x)))))
-      poetry-wordlist)
- poetry-count
-)
+  ;; Get the current line.
+  (setq poetry-wordline (thing-at-point 'line))
+  ;; Force lowercase.
+  (setq poetry-wordline (downcase poetry-wordline))
+  ;; Change hyphens to spaces.
+  (setq poetry-wordline (replace-regexp-in-string "-" " " poetry-wordline))
+  ;; Remove non-letters except for spaces.
+  (setq poetry-wordline (replace-regexp-in-string "[^A-za-z ]" "" poetry-wordline))
+  ;; Divide line into words.
+  (setq poetry-wordlist (split-string poetry-wordline " " t))
+  ;; Count (and add up and return) the feet in each word.
+  (setq poetry-count 0)
+  (mapc (function (lambda (x)
+                    (setq poetry-count
+                          (+ poetry-count (poetry-count-feet x)))))
+        poetry-wordlist)
+  poetry-count
+  )
 
 (defun poetry-count-feet (daword)
-"Count the feet in a word"
-;; Count vowel groups.
-;(if (string-match "^[^aeiou]+[aeiou][^aeiou]e.*[aeiou].*" daword)
-;  (progn
-;    (message (concat "Candidate embedded silent e in " daword))
-;    (sleep-for 1)
-;  )
-;)
-    (setq poetry-vowgrouplen 0)
-    (setq poetry-lastmatch 0)
-    (while (string-match "[aeiouy]+" daword poetry-lastmatch)
-       (setq poetry-vowgrouplen (1+ poetry-vowgrouplen))
-       (setq poetry-lastmatch (match-end 0))
+  "Count the feet in a word"
+  ;; Count vowel groups.
+                                        ;(if (string-match "^[^aeiou]+[aeiou][^aeiou]e.*[aeiou].*" daword)
+                                        ;  (progn
+                                        ;    (message (concat "Candidate embedded silent e in " daword))
+                                        ;    (sleep-for 1)
+                                        ;  )
+                                        ;)
+  (setq poetry-vowgrouplen 0)
+  (setq poetry-lastmatch 0)
+  (while (string-match "[aeiouy]+" daword poetry-lastmatch)
+    (setq poetry-vowgrouplen (1+ poetry-vowgrouplen))
+    (setq poetry-lastmatch (match-end 0))
     )
-;; Find stuff that adds a syllable.
-           (setq poetry-pluses 0)
-              (mapc (function (lambda (x)
-                  (if (string-match-p x daword)
-                     (setq poetry-pluses (1+ poetry-pluses)))))
-                   poetry-count-feet-positive)
-;; Find stuff that subtracts a syllable.
-           (setq poetry-minuses 0)
-              (mapc (function (lambda (x)
-                  (if (string-match-p x daword)
-                     (setq poetry-minuses (1- poetry-minuses)))))
-                   poetry-count-feet-negative)
-
-;; Add up vowel groups and additions and subtractions.
-;; But any word has 1 syllable minimum.
-
-               (max (+ poetry-pluses poetry-minuses poetry-vowgrouplen) 1)
-
-)
+  ;; Find stuff that adds a syllable.
+  (setq poetry-pluses 0)
+  (mapc (function (lambda (x)
+                    (if (string-match-p x daword)
+                        (setq poetry-pluses (1+ poetry-pluses)))))
+        poetry-count-feet-positive)
+  ;; Find stuff that subtracts a syllable.
+  (setq poetry-minuses 0)
+  (mapc (function (lambda (x)
+                    (if (string-match-p x daword)
+                        (setq poetry-minuses (1- poetry-minuses)))))
+        poetry-count-feet-negative)
+
+  ;; Add up vowel groups and additions and subtractions.
+  ;; But any word has 1 syllable minimum.
+
+  (max (+ poetry-pluses poetry-minuses poetry-vowgrouplen) 1)
+
+  )
 
 ;; End foot counting code.
 ;; Begin poetry mode stuff.
@@ -412,14 +412,14 @@ Poetry mode is a buffer-local minor mode."
   :lighter nil ;; (" Poetry" poetry--desc)
   (jit-lock-unregister #'poetry--region)
   (remove-hook 'window-configuration-change-hook #'poetry--setup-window t)
-;  (remove-hook 'after-change-functions #'poetry--after-change t)
-;  (kill-local-variable 'poetry--line-number-cache)
+                                        ;  (remove-hook 'after-change-functions #'poetry--after-change t)
+                                        ;  (kill-local-variable 'poetry--line-number-cache)
   (remove-overlays (point-min) (point-max) 'poetry t)
   (kill-local-variable 'poetry--width)
   (when poetry-mode
-   (add-hook 'change-major-mode-hook (lambda () (poetry-mode -1)))
-   (add-hook 'window-configuration-change-hook #'poetry--setup-window nil t)
-;    (add-hook 'after-change-functions #'poetry--after-change nil t)
+    (add-hook 'change-major-mode-hook (lambda () (poetry-mode -1)))
+    (add-hook 'window-configuration-change-hook #'poetry--setup-window nil t)
+                                        ;    (add-hook 'after-change-functions #'poetry--after-change nil t)
     (jit-lock-register #'poetry--region nil))
   (poetry--setup-windows))
 
@@ -432,7 +432,7 @@ Poetry mode is a buffer-local minor mode."
                     (/ (* poetry--width 1.0
                           (poetry--face-height 'linum))
                        (frame-char-height)))
-                 poetry--width)))
+                   poetry--width)))
     (set-window-margins nil (if poetry-mode width)
                         (cdr (window-margins)))))
 
@@ -451,12 +451,12 @@ Poetry mode is a buffer-local minor mode."
                          (point-min) (point-max) '(fontified)))))
                   (current-buffer)))
 
-;(defvar poetry--line-number-cache nil)
-;(make-variable-buffer-local 'poetry--line-number-cache)
+                                        ;(defvar poetry--line-number-cache nil)
+                                        ;(make-variable-buffer-local 'poetry--line-number-cache)
 
-;(defun poetry--after-change (&rest _args)
-;  (setq poetry--line-number-cache nil)
-;)
+                                        ;(defun poetry--after-change (&rest _args)
+                                        ;  (setq poetry--line-number-cache nil)
+                                        ;)
 
 (defcustom poetry-format "%d"
   "Format of the syllable counts.
@@ -485,142 +485,142 @@ it may cause the margin to be resized and line numbers to be recomputed.")
       (goto-char start)
       (unless (bolp) (forward-line 1))
       (remove-overlays (point) limit 'poetry t)
-        (while
-            (and (not (eobp)) (< (point) limit)
-                 (let* ((ol (make-overlay (point) (1+ (point))))
-                        (str (funcall poetry-format-function
-                             (poetry-feet-in-line) poetry--width))
-                        (width (string-width str)))
-                   (when (< poetry--width width)
-                     (setq poetry--width width)
-                     (poetry--flush))
-                   (overlay-put ol 'poetry t)
-                   (overlay-put ol 'evaporate t)
-                   (overlay-put ol 'before-string
-                                (propertize " " 'display
-                                            `((margin left-margin) ,str)))
-                   (zerop (forward-line 1)))))))
+      (while
+          (and (not (eobp)) (< (point) limit)
+               (let* ((ol (make-overlay (point) (1+ (point))))
+                      (str (funcall poetry-format-function
+                                    (poetry-feet-in-line) poetry--width))
+                      (width (string-width str)))
+                 (when (< poetry--width width)
+                   (setq poetry--width width)
+                   (poetry--flush))
+                 (overlay-put ol 'poetry t)
+                 (overlay-put ol 'evaporate t)
+                 (overlay-put ol 'before-string
+                              (propertize " " 'display
+                                          `((margin left-margin) ,str)))
+                 (zerop (forward-line 1)))))))
   nil)
 
 ;; End poetry mode stuff.
 ;; Begin poetry form stuff.
 
 (defun poetry-form ()
- "Set up rhyme pattern in left of screen"
- (interactive)
-
-;; Build a list of choices to display in echo area.
-
-(setq poetry-counter 0)
-(setq poetry-string "")
-(setq poetry-collection nil)
-(while (< poetry-counter (length poetry-patterns))
-  (setq poetry-element (car (nth poetry-counter poetry-patterns)))
-  (if (not (= poetry-counter 0))
-      (setq poetry-string (concat poetry-string ",")))
-  (setq poetry-string (concat poetry-string poetry-element))
-  (setq poetry-collection (add-to-list 'poetry-collection poetry-element))
-  (setq poetry-counter (+ 1 poetry-counter))
-)
-
-(setq poetry-string (concat poetry-string "\nChoose form: "))
-;; Use completing-read method for easier minibuffer choice input.
-(setq poetry-selection (completing-read poetry-string poetry-collection nil t))
-;; 'cdr' alone returns a single element list, so we have to use 'car' to
-;; make it into a mere string.
-(if (setq poetry-pattern (car (cdr (assoc-string poetry-selection poetry-patterns))))
-  (progn
-     (delete-other-windows)
-     (split-window-right 4)
-     (if (get-buffer "*poetry.form*")
-         (kill-buffer "*poetry.form*"))
-     (switch-to-buffer "*poetry.form*")
-     (insert (replace-regexp-in-string "," "\n" poetry-pattern))
-     (insert "\n")
-     (other-window 1)
-  )
-  (message "Invalid choice of form")
-)
+  "Set up rhyme pattern in left of screen"
+  (interactive)
+
+  ;; Build a list of choices to display in echo area.
+
+  (setq poetry-counter 0)
+  (setq poetry-string "")
+  (setq poetry-collection nil)
+  (while (< poetry-counter (length poetry-patterns))
+    (setq poetry-element (car (nth poetry-counter poetry-patterns)))
+    (if (not (= poetry-counter 0))
+        (setq poetry-string (concat poetry-string ",")))
+    (setq poetry-string (concat poetry-string poetry-element))
+    (setq poetry-collection (add-to-list 'poetry-collection poetry-element))
+    (setq poetry-counter (+ 1 poetry-counter))
+    )
 
-)
+  (setq poetry-string (concat poetry-string "\nChoose form: "))
+  ;; Use completing-read method for easier minibuffer choice input.
+  (setq poetry-selection (completing-read poetry-string poetry-collection nil t))
+  ;; 'cdr' alone returns a single element list, so we have to use 'car' to
+  ;; make it into a mere string.
+  (if (setq poetry-pattern (car (cdr (assoc-string poetry-selection poetry-patterns))))
+      (progn
+        (delete-other-windows)
+        (split-window-right 4)
+        (if (get-buffer "*poetry.form*")
+            (kill-buffer "*poetry.form*"))
+        (switch-to-buffer "*poetry.form*")
+        (insert (replace-regexp-in-string "," "\n" poetry-pattern))
+        (insert "\n")
+        (other-window 1)
+        )
+      (message "Invalid choice of form")
+      )
+
+  )
 ;;;;;;;;;;; Begin rhyming stuff.
 
 (defun poetry-find-rhyme (word)
-"Simple interface to rhyme package"
-(interactive "sWord: ")
-(setq poetry-rhyme 
-  (replace-regexp-in-string "\r?\n$" " "
-    (shell-command-to-string (concat "rhyme " word))))
-(setq poetry-rhyme 
-    (replace-regexp-in-string 
-        "Finding perfect rhymes for " "" poetry-rhyme))
-;; Not enough display space?
-(display-message-or-buffer poetry-rhyme)
-)
+  "Simple interface to rhyme package"
+  (interactive "sWord: ")
+  (setq poetry-rhyme
+        (replace-regexp-in-string "\r?\n$" " "
+                                  (shell-command-to-string (concat "rhyme " word))))
+  (setq poetry-rhyme
+        (replace-regexp-in-string
+         "Finding perfect rhymes for " "" poetry-rhyme))
+  ;; Not enough display space?
+  (display-message-or-buffer poetry-rhyme)
+  )
 
 (defun poetry-rhyme-word ()
-"Rhymes for word at point"
- (interactive)
- (poetry-find-rhyme (thing-at-point 'word))
-)
+  "Rhymes for word at point"
+  (interactive)
+  (poetry-find-rhyme (thing-at-point 'word))
+  )
 
 (defun poetry-rhyme-word-rhymezone ()
-"Find rhyme on RhymeZone for word at point"
- (interactive)
-;; This is fragile as the API can change any time.
-;; The site can even go down!
- (w3m (concat "http://www.rhymezone.com/r/rhyme.cgi?Word="
-              (thing-at-point 'word)
-              "&typeofrhyme=perfect&org1=syl&org2=l&org3=y"))
-)
+  "Find rhyme on RhymeZone for word at point"
+  (interactive)
+  ;; This is fragile as the API can change any time.
+  ;; The site can even go down!
+  (w3m (concat "http://www.rhymezone.com/r/rhyme.cgi?Word="
+               (thing-at-point 'word)
+               "&typeofrhyme=perfect&org1=syl&org2=l&org3=y"))
+  )
 
 (defun poetry-rhyme-word-rhymer ()
-"Find rhyme on Rhymer for word at point"
- (interactive)
-;; This is fragile as the API can change any time.
-;; The site can even go down!
- (w3m (concat "http://www.rhymer.com/RhymingDictionary/"
-              (thing-at-point 'word)
-              ".html"))
-)
+  "Find rhyme on Rhymer for word at point"
+  (interactive)
+  ;; This is fragile as the API can change any time.
+  ;; The site can even go down!
+  (w3m (concat "http://www.rhymer.com/RhymingDictionary/"
+               (thing-at-point 'word)
+               ".html"))
+  )
 
 
 (defun poetry-rhyme-word-wikirhymer ()
-"Find rhyme on RhymeBrain for word at point"
- (interactive)
-;; This is fragile as the API can change any time.
-;; The site can even go down!
- (w3m (concat "http://wikirhymer.com/words/"
-              (thing-at-point 'word)))
-)
+  "Find rhyme on RhymeBrain for word at point"
+  (interactive)
+  ;; This is fragile as the API can change any time.
+  ;; The site can even go down!
+  (w3m (concat "http://wikirhymer.com/words/"
+               (thing-at-point 'word)))
+  )
 
 (defun poetry-rhyme-word-primerhyme ()
-"Find rhyme on PrimeRhyme for word at point"
- (interactive)
-;; This is fragile as the API can change any time.
-;; The site can even go down!
- (w3m (concat "http://www.prime-rhyme.com/"
-              (thing-at-point 'word)
-              ".html"))
-)
+  "Find rhyme on PrimeRhyme for word at point"
+  (interactive)
+  ;; This is fragile as the API can change any time.
+  ;; The site can even go down!
+  (w3m (concat "http://www.prime-rhyme.com/"
+               (thing-at-point 'word)
+               ".html"))
+  )
 
 (defun poetry-rhyme-word-brhymes ()
-"Find rhyme on B-rhymes for word at point"
- (interactive)
-;; This is fragile as the API can change any time.
-;; The site can even go down!
- (w3m (concat "http://www.b-rhymes.com/rhyme/word/"
-              (thing-at-point 'word)))
-)
+  "Find rhyme on B-rhymes for word at point"
+  (interactive)
+  ;; This is fragile as the API can change any time.
+  ;; The site can even go down!
+  (w3m (concat "http://www.b-rhymes.com/rhyme/word/"
+               (thing-at-point 'word)))
+  )
 
 
 (defun poetry-mode-pretty ()
-"the space between"
- (interactive)
- (poetry-mode 1)
- ;; (olivetti-mode 1)
- (stripe-buffer-mode 1))
- 
+  "the space between"
+  (interactive)
+  (poetry-mode 1)
+  ;; (olivetti-mode 1)
+  (stripe-buffer-mode 1))
+
 
 
 ;; End rhyming stuff.
diff --git a/shared-functions.org b/shared-functions.org
index f77d19e..8e4d009 100644
--- a/shared-functions.org
+++ b/shared-functions.org
@@ -45,7 +45,7 @@
 (use-package use-package
   :custom
 
-  (package-native-compile t)
+;;(package-native-compile t)
   (warning-minimum-level :emergency))
 #+END_SRC
 
@@ -108,6 +108,7 @@ I should probably eventually break these out of custom-set-variables and organiz
 
 
 ;; Edit Server Settings
+(require 'server)
 (setq edit-server-default-major-mode 'org-mode
       edit-server-new-frame t)
 
@@ -759,7 +760,7 @@ read-file-name-completion-ignore-case t)
 ** Reveal in finder
 #+BEGIN_SRC emacs-lisp
 (use-package reveal-in-finder
-
+:defer t
   :bind)
 #+END_SRC
 
@@ -1130,7 +1131,7 @@ I think this is to make parent ~DONE~ states automatically update:
 #+END_SRC
 
 *** checkbox-list-complete
-Mark heading done when all checkboxes are checked. See [[http://thread.gmane.org/gmane.emacs.orgmode/42715][here]]. An item consists of a list with checkboxes. When all of the checkboxes are checked, the item should be considered complete and its ~TODO~ state should be automatically changed to ~DONE~. The code below does that. This version is slightly enhanced over the one in the mailing list (see [[http://thread.gmane.org/gmane.emacs.orgmode/42715/focus=42721][here]]) to reset the state back to TODO if a checkbox is unchecked. Note that the code reques that a checkbox statistics cookie (the [/] or [%] thingie in the headline - see the Checkboxes section in the manual) be present in order for it to work. Note also that it is too dumb to figure out whether the item has a ~TODO~ state in the first place: if there is a statistics cookie, a ~TODO~ / ~DONE~ state will be added willy-nilly any time that the statistics cookie is changed.
+Mark heading done when all checkboxes are checked. See [[http://thread.gmane.org/gmane.emacs.orgmode/42715][here]]. An item consists of a list with checkboxes. When all of the checkboxes are checked, the item should be considered complete and its ~TODO~ state should be automatically changed to ~DONE~. The code below does that. This version is slightly enhanced over the one in the mailing list (see [[http://thread.gmane.org/gmane.emacs.orgmode/42715/focus=42721][here]]) to reset the state back to TODO if a checkbox is unchecked. Note that the code requires that a checkbox statistics cookie (the [/] or [%] thingie in the headline - see the Checkboxes section in the manual) be present in order for it to work. Note also that it is too dumb to figure out whether the item has a ~TODO~ state in the first place: if there is a statistics cookie, a ~TODO~ / ~DONE~ state will be added willy-nilly any time that the statistics cookie is changed.
 
 #+BEGIN_SRC emacs-lisp
 (eval-after-load 'org-list
@@ -1378,13 +1379,6 @@ do shell script "echo " & (quoted form of archivedTasks) & "|tr -d \"\\t\"|/usr/
 (setq browse-url-browser-function 'browse-url-default-macosx-browser)
 #+END_SRC
 
-** Edit with Emacs
-To enable Edit with Emacs in Chrome:
-#+BEGIN_SRC emacs-lisp
-;; (use-package edit-server)
-;; (edit-server-start)
-#+END_SRC
-
 * Miscellaneous/unsorted settings
 #+BEGIN_SRC emacs-lisp
 '(cua-enable-cua-keys (quote shift))
@@ -3192,18 +3186,18 @@ which is suitable for passing to `advice-add'."
 
 * wrap region
 #+BEGIN_SRC emacs-lisp
-;; (use-package wrap-region)
-;; (wrap-region-add-wrapper "*" "*" "*")
-;; (wrap-region-add-wrapper "\/" "\/" "\/")
-
-
 ;; wrap-region
 (use-package wrap-region
   :defer
   :ensure t
   :config
+  ;; Fix cl deprecation warning
+  (require 'cl-lib)
+
+  ;; Add your custom wrapper
   (wrap-region-add-wrapper "\n#+BEGIN_QUOTE\n" "\n#+END_QUOTE\n" ";")
 
+  ;; Define your wrapper function
   (defun wrap-region-define-wrappers ()
     "Defines defaults wrappers."
     (mapc
@@ -3218,6 +3212,8 @@ which is suitable for passing to `advice-add'."
        ;; ("<"  ">")
        ;; ("<"  ">")
        )))
+
+  ;; Add mode-specific wrappers
   (wrap-region-add-wrappers
    '(
      ;;     ("*" "*" nil org-mode)
@@ -3228,9 +3224,9 @@ which is suitable for passing to `advice-add'."
      ("*" "*" nil (org-mode message-mode))
      ("/" "/" nil (org-mode message-mode))
      ("$" "$" nil (org-mode latex-mode))
-     ))
+     )))
+
 
-  )
 #+END_SRC
 Source: [[http://pragmaticemacs.com/emacs/wrap-text-in-custom-characters/][Wrap text in custom characters | Pragmatic Emacs]]
 
@@ -4052,33 +4048,29 @@ into the main dumped emacs"
 
 * undo-tree-mode
 #+BEGIN_SRC emacs-lisp
-  (use-package undo-fu-session
-    :init
-    (setq undo-fu-session-compression nil)   ;; nil = never compress
-    (undo-fu-session-global-mode))
-
-  (defun undo-fu-only-redo-fail-silently ()
-   "Redo the last undone change if possible, silently fail if no more redo steps."
-   (interactive)
-   (ignore-errors
-    (undo-fu-only-redo)))
-
-  (defun undo-fu-only-redo-fail-with-heart ()
-   "Redo the last undone change if possible."
-   (interactive)
-   (condition-case nil
-     (undo-fu-only-redo)
-    (user-error (message "❤️"))))
+(use-package undo-fu-session
+  :init
+  (setq undo-fu-session-compression nil)   ;; nil = never compress
+  (undo-fu-session-global-mode))
 
-  (setq undo-tree-auto-save-history nil)
+(defun undo-fu-only-redo-fail-silently ()
+ "Redo the last undone change if possible, silently fail if no more redo steps."
+ (interactive)
+ (ignore-errors
+  (undo-fu-only-redo)))
 
-  (setq undo-limit 67108864) ; 64mb.
-  (setq undo-strong-limit 100663296) ; 96mb.
-  (setq undo-outer-limit 1006632960) ; 960mb.
+(defun undo-fu-only-redo-fail-with-heart ()
+ "Redo the last undone change if possible."
+ (interactive)
+ (condition-case nil
+   (undo-fu-only-redo)
+  (user-error (message "❤️"))))
 
-(with-eval-after-load 'undo-fu-session
-  (setq undo-fu-session-incompatible-files-behaviour 'delete)) ; 'rename or nil
+(setq undo-tree-auto-save-history nil)
 
+(setq undo-limit 67108864) ; 64mb.
+(setq undo-strong-limit 100663296) ; 96mb.
+(setq undo-outer-limit 1006632960) ; 960mb.
 #+END_SRC
 
 * Emacs 25
@@ -4189,7 +4181,7 @@ If I'm in =web-mode=, I'd like to:
 
 Use =web-mode= with embedded Ruby files, regular HTML, and PHP.
 
-#+BEGIN_SRC emacs-lisp
+#+BEGIN_EXAMPLE emacs-lisp
 (defun hrs/add-auto-mode (mode &rest patterns)
   "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
   (dolist (pattern patterns)
@@ -4202,7 +4194,7 @@ Use =web-mode= with embedded Ruby files, regular HTML, and PHP.
   "\\.html$"
   "\\.php$"
   "\\.rhtml$")
-#+END_SRC
+#+END_EXAMPLE
 
 
 When editing a code snippet, use the current window rather than popping open a
@@ -4567,7 +4559,7 @@ time-stamp-pattern "50//*Invoice date:\\*+\s%:y-%02m-%02d\\\\?$"
 
 
 * poet-mode
-#+BEGIN_EXAMPLE emacs-lisp
+#+BEGIN_SRC emacs-lisp
 ;; (add-hook 'org-mode-hook
 ;;         (lambda ()
 ;;         (variable-pitch-mode 1)))
@@ -4593,7 +4585,7 @@ time-stamp-pattern "50//*Invoice date:\\*+\s%:y-%02m-%02d\\\\?$"
 ;; (turn-off-auto-capitalize-mode)
 
 )
-#+END_EXAMPLE
+#+END_SRC
 
 
 * default org-css
@@ -5837,6 +5829,11 @@ This is my goto way for navigating. It feels like it is reading your mind.
 
 ;;;; 1.  fasd ----------------------------------------------------
 
+(use-package ivy :ensure t)
+(use-package fasd
+  :ensure t
+  :after ivy)
+
 (use-package fasd
   :commands (fasd-find-file)
   :init
@@ -6584,7 +6581,7 @@ Credit: http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html."
 ******* dired-preview
 #+begin_src sh
 (add-to-list 'load-path "/Users/jay/emacs/external-packages/dired-preview")
-(use-package dired-preview)
+(require 'dired-preview)
 
 #+end_src
 
@@ -6609,8 +6606,8 @@ directory
 ~M-x counsel-fd-file-jump~ to jump to a file under current directory
 
 #+begin_src emacs-lisp
-(use-package counsel-found
-  :defer)
+(use-package counsel-fd
+  :defer t)
 #+end_src
 
 
@@ -6755,6 +6752,20 @@ Emacs sessions are independent of each other, so global variables like move-or-c
       (message "Refiled to Org-roam file %s" current-heading)))))))
 
 #+end_src
+* disable Olivetti on split
+#+begin_SRC emacs-lisp
+(defun activate-olivetti-in-split ()
+ (when (not (bound-and-true-p disable-olivetti-auto-toggle))
+  (if (< (window-width) 80)
+    (olivetti-mode -1)
+   (olivetti-mode 1))))
+
+
+(add-hook 'org-mode-hook (lambda ()
+              (add-hook 'window-configuration-change-hook 'activate-olivetti-in-split nil t)))
+
+#+END_SRC
+
 * helpful
 [[https://github.com/Wilfred/helpful][Wilfred/helpful: A better Emacs *help* buffer]]
 
@@ -7516,7 +7527,7 @@ After evaluating your init-file you can use links analog to the example:
 
 
 
-#+begin_src emacs-lisp
+#+BEGIN_EXAMPLE emacs-lisp
 
 (load "/Users/jay/emacs/external-packages/org-yt/org-yt.el")
 (require 'org-yt)
@@ -7540,7 +7551,7 @@ After evaluating your init-file you can use links analog to the example:
 (org-link-set-parameters
  "imghttps"
  :image-data-fun #'org-image-link)
-#+end_src
+#+END_EXAMPLE
 
 
 * Insert image link from clipboard
@@ -7917,12 +7928,6 @@ Only required if Emacs < 29.3.
 #+end_src
 
 
-* server start
-#+begin_src emacs-lisp
-(add-hook 'after-init-hook 'server-start)
-;; (server-start)
-#+end_src
-
 * org-transclusion
 ** org-transclusion-config
 #+begin_src emacs-lisp
@@ -7974,10 +7979,6 @@ Only required if Emacs < 29.3.
 
 
 
-#+begin_src emacs-lisp
-(server-start)
-#+end_src
-
 
 
 
@@ -7991,13 +7992,13 @@ Only required if Emacs < 29.3.
 (show-smartparens-global-mode t)
 
 ;; web-mode configuration
-(require 'web-mode)
-(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
+;;(require 'web-mode)
+;;(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
 
-(add-hook 'web-mode-hook
-     (lambda ()
-      (setq web-mode-enable-auto-pairing nil)
-      (setq web-mode-enable-auto-closing nil)))
+;; (add-hook 'web-mode-hook
+;;      (lambda ()
+;;       (setq web-mode-enable-auto-pairing nil)
+;;       (setq web-mode-enable-auto-closing nil)))
 
 ;; Disable smartparens in web-mode
 (add-hook 'web-mode-hook 'turn-off-smartparens-mode)
@@ -8036,13 +8037,6 @@ When deleting a file, don't use vc-delete-file
      (kill-buffer))))))
 #+end_src
 
-* server
-#+begin_src emacs-lisp
-(require 'server)
-(unless (server-running-p)
- (server-start))
-#+end_src
-
 * query replace all files in current directory
 #+begin_src emacs-lisp
 (defun multi-file-replace-query-replace-all-files-in-current-directory (from-string to-string &optional regexp-flag)
@@ -9069,11 +9063,6 @@ It returns a list, so you can later jump to the first culprit:
 
 * Prevent org-roam parsing crashes
 #+begin_src emacs-lisp
-;; in dotspacemacs/user-init or early in user-config
-;; (setq org-element-use-cache nil)
-
-(setq org-element-use-cache t)
-
 (setq org-element--cache-self-verify 'backtrace) ; default is nil
 
 
@@ -9113,14 +9102,6 @@ It returns a list, so you can later jump to the first culprit:
       (set-fontset-font t 'unicode (font-spec :family "Apple Color Emoji") nil 'prepend))))
 #+end_src
 
-* Server
-#+begin_src emacs-lisp
-;; ~/.emacs.d/init.el  --- very top is fine
-(require 'server)
-(unless (server-running-p)
-  (server-start))          ; one-time TCP/Unix socket
-#+end_src
-
 * open faster
 #+begin_src emacs-lisp
 ;; Speed up macOS open events
@@ -9128,154 +9109,62 @@ It returns a list, so you can later jump to the first culprit:
 (setq ns-use-native-fullscreen nil)  ; Faster fullscreen
 #+end_src
 
-* Profiler
+* silence warnings
 #+begin_src emacs-lisp
+;; (setq native-comp-async-report-warnings-errors 'silent)
+(global-display-line-numbers-mode 1)
 
-(require 'profiler)              ; just in case
-(unless (profiler-running-p)     ; <-- safeguard
-  (profiler-start 'cpu))
-(add-hook 'emacs-startup-hook
-          (lambda ()
-            (profiler-report)
-            (profiler-stop)))
-(provide 'shared-functions)
-#+end_src
-
-* Scroll without hiccupping
-#+begin_src emacs-lisp
-;;; -------------------------------------------------------------
-;;;  Smooth scrolling & redisplay – macOS / Cocoa build
-;;; -------------------------------------------------------------
-
-;; 1.  Core scrolling knobs
-(setq auto-window-vscroll        nil   ; never resize during redisplay
-      scroll-step               1      ; scroll one line at a time
-      scroll-conservatively     101    ; always scroll by `scroll-step'
-      inhibit-compacting-font-caches t ; avoid GC of font cache
-      redisplay-dont-pause      t)     ; keep scrolling responsive
-
-;; 2.  Disable the precision pixel-scrolling that can flicker on macOS < 14
-(when (fboundp 'pixel-scroll-precision-mode)
-  (pixel-scroll-precision-mode -1))
-
-;; 3.  macOS–specific graphics tweaks
-(setq ns-use-live-resize   nil          ; don’t live-update while resizing
-      ns-use-thin-smoothing t)          ; sub-pixel text-antialias
-(add-to-list 'default-frame-alist '(ns-transparent-titlebar . nil))
-(setq frame-resize-pixelwise t)         ; Emacs 29+: keep 1-pixel granularity
-
-;; 4.  Long-lines protection (prevents redisplay blow-ups >10 k columns)
-(when (require 'so-long nil t)
-  (global-so-long-mode 1))
 
-;; 5.  Optional cosmetics (remove if you like line numbers / hl-line)
-(global-display-line-numbers-mode 0)
-(global-hl-line-mode 0)
-
-;;; -------------------------------------------------------------
-;;;  Flyspell – on where useful, off where noisy
-;;; -------------------------------------------------------------
-;; Enable for writing modes
-(dolist (hook '(text-mode-hook markdown-mode-hook message-mode-hook))
-  (add-hook hook #'flyspell-mode))
-
-;; Disable for code & Org src blocks
-(add-hook 'prog-mode-hook       (lambda () (flyspell-mode -1)))
-(add-hook 'org-src-mode-hook    (lambda () (flyspell-mode -1)))
-
-(setq flyspell-delay               1.0   ; don’t spell-check on every keystroke
-      flyspell-issue-message-flag  nil)  ; silence “misspelled word” echo area
-
-;;; -------------------------------------------------------------
-;;;  JIT lock tuning – defer heavy font-lock on huge buffers
-;;; -------------------------------------------------------------
-(setq jit-lock-defer-time   0.25   ; delay refontification when scrolling fast
-      jit-lock-stealth-time 1.0)   ; how long we stay in “stealth” fontify
+(setq native-comp-jit-compilation t
+package-native-compile    t)
 #+end_src
 
-
-* Olivetti
+* Panic button
 #+begin_src emacs-lisp
-(defun jd/show-tab-bar-when-many-windows (&optional frame)
-  "Turn `tab-bar-mode' on when more than one window is visible, off otherwise."
-  (with-selected-frame (or frame (selected-frame))
-    (tab-bar-mode (if (> (count-windows) 1) 1 -1))))
-
-(defun jd/olivetti-maybe (&optional frame)
-  "Enable `olivetti-mode' only when exactly one window shows text/org."
-  (with-selected-frame (or frame (selected-frame))
-    (if (= (count-windows) 1)
-        (when (derived-mode-p 'text-mode 'org-mode)
-          (unless olivetti-mode (olivetti-mode 1)))
-      (when olivetti-mode (olivetti-mode -1)))))
 
+;;; --- Emergency exit --------------------------------------------------------
+;; Panic button: C-c C-! to save and exit
+(global-set-key (kbd "C-c C-!")
+                (lambda () (interactive)
+                  (save-some-buffers t)
+                  (kill-emacs)))
 #+end_src
 
-* Tame noisy idle timers
+* debug on error
 #+begin_src emacs-lisp
-
-;; 1.  Savehist → every 30 min
-(with-eval-after-load 'savehist
-  (setq savehist-autosave-interval (* 30 60)))
-
-;; 2.  AMX database rebuild → only when idle 30 s
-(with-eval-after-load 'amx
-  (cancel-function-timers #'amx-idle-update)
-  (run-with-idle-timer 30 t #'amx-idle-update))
-
-;; 3.  recentf - keep a single 10 min timer
-(with-eval-after-load 'recentf
-  (dolist (t (memq 'recentf-save-list timer-list))
-    (cancel-timer t))
-  (run-with-idle-timer 600 t #'recentf-save-list))
-
-;; 4.  GCMH - collect when idle ≥30 s
-(with-eval-after-load 'gcmh
-  (setq gcmh-idle-delay 30))
+(setq debug-on-error 1)
 #+end_src
 
-* Profiler guard
+* server
 #+begin_src emacs-lisp
-(require 'profiler)
-(unless (profiler-running-p) (profiler-start 'cpu))
-
+(use-package server
+:defer t)
 #+end_src
 
-
-* Automatically tangle those files
+* quickstart
 #+begin_src emacs-lisp
+(defun jd/maintain-quickstart ()
+  "Regenerate `package-quickstart.el' whenever package list changes."
+  (let* ((qs-file package-quickstart-file)
+         (stamp   (file-attribute-modification-time
+                   (file-attributes qs-file))))
+    ;; Refresh if file is missing or older than 24 h
+    (when (or (not (file-exists-p qs-file))
+              (> (float-time (time-subtract (current-time) stamp))
+                 (* 24 60 60)))
+      (message "⟳  Refreshing package-quickstart...")
+      (package-quickstart-refresh))))
 
-(add-hook 'after-save-hook #'my/auto-tangle-org-file)
-
-(defun my/auto-tangle-org-file ()
-  "Automatically tangle and byte-compile org file on save"
-  (when (and (eq major-mode 'org-mode)
-             (string-match-p "/emacs-settings/" (buffer-file-name)))
-    (require 'ob-tangle)  ; Add this line
-    (let* ((org-file (buffer-file-name))
-           (el-file (concat (file-name-sans-extension org-file) ".el"))
-           (elc-file (concat el-file "c")))
-      (org-babel-tangle)
-      (when (file-exists-p el-file)
-        (byte-compile-file el-file)
-        (message "Tangled and compiled: %s" (file-name-nondirectory el-file))))))
-#+end_src
-
+;; Run once per boot, after packages are loaded:
+(add-hook 'after-init-hook #'jd/maintain-quickstart)
 
-#+BEGIN_SRC emacs-lisp
-;; Temporarily add this to your init to see what's happening
-(defun debug-window-creation ()
-  "Debug what's creating windows"
-  (message "Window count: %d, Buffer: %s"
-           (count-windows)
-           (buffer-name (current-buffer))))
 
-(add-hook 'window-configuration-change-hook #'debug-window-creation)
-
-
-
-(delete-other-windows)
-#+END_SRC
+;; Auto-refresh quickstart after package operations
+(advice-add 'package-install :after
+            (lambda (&rest _) (package-quickstart-refresh)))
+(advice-add 'package-delete :after
+            (lambda (&rest _) (package-quickstart-refresh)))
+#+end_src
 
 
 * Local Variables & The End
diff --git a/spacecraft-mode-spec.org b/spacecraft-mode-spec.org
index 41ccd16..2dbf7dd 100644
--- a/spacecraft-mode-spec.org
+++ b/spacecraft-mode-spec.org
@@ -1,4 +1,4 @@
-#+auto_tangle: t
+
 * o1 pro
 Below is a *proposed spec sheet* describing the *intended logic* and *desired behavior* of your "spacecraft-mode" (and related code). The aim is to unify your current usage of "auto-capitalization," "smart punctuation," and "whitespace-fixing" into *clear, consistent rules* that match how iOS (and other "intelligent text editing" systems) typically handle typed text. Once the spec is settled, you can refactor your Emacs Lisp code to implement it cleanly.
 
diff --git a/spacecraft-mode.org b/spacecraft-mode.org
index e3effaf..c346ee3 100644
--- a/spacecraft-mode.org
+++ b/spacecraft-mode.org
@@ -1,5 +1,4 @@
 #+auto_tangle: t
-
 # Local Variables: 
 # org-config-files-local-mode: t
 # enable-local-eval: t
diff --git a/spacemacs-new-config.el b/spacemacs-new-config.el
index cd34ce2..0898692 100644
--- a/spacemacs-new-config.el
+++ b/spacemacs-new-config.el
@@ -1,9 +1,44 @@
+;; ------------- init.el (or early-load file) --------------------------
+(require 'ob-tangle)          ; 1️⃣ make sure tangling is available
+
+(with-eval-after-load 'org    ; 2️⃣ define + register the helper
+  (defun jd/org-auto-tangle ()
+    "Tangle this Org buffer on save when it has #+auto_tangle: t."
+    (when (and (derived-mode-p 'org-mode)
+               (member "t"
+                       (cdr (assoc "auto_tangle"
+                                   (org-collect-keywords '("auto_tangle"))))))
+      (org-babel-tangle)))
+
+  ;; Global hook is fine; predicate prevents work on non-Org files.
+  (add-hook 'after-save-hook #'jd/org-auto-tangle))
+
+
+
+
+
+
+;; debugging steps. Commenting these out now that it seems to be working.
+
+;; (message "DEBUG: About to load helpers...")
+;; (defvar te nil)
+
+;; (advice-add 'load :before (lambda (f &rest _) (message ">>> LOADING %s" f)))
+
+
+;; (defun trace-load (file &rest _)
+;;   (message ">>> LOADING %s" file))
+;; (advice-add 'load :before #'trace-load)
+
+
+;; https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Scratch-12.org
+
 ;; --------------------
 ;; Performance optimizations
 ;; --------------------
 
 
-(setq load-prefer-newer t)              ; do this once, near top of init
+
 
 ;; 2) --- use GCMH via use-package -----------------------
 (use-package gcmh
@@ -73,131 +108,43 @@
 
 
 (use-package wc-goal-mode
-  :defer t
+  :defer
   :ensure t
+  :defer
   :load-path "/Users/jay/emacs/emacs-settings/")
 
 (use-package counsel
-  :defer t
-  )
+  :defer)
 
 
 (autoload 'whittle "whittle" nil t)
 
-;; suppress auto evilifaction errors
-(with-eval-after-load 'evil-evilified-state
-  (add-to-list 'evil-evilified-state-modes 'org-agenda-mode))
-
-
-
-
-;;; -----------------------------------------------------------
-;;; helpers ----------------------------------------------------
-(defun my/native-comp-available-p ()
-  "Return non-nil only when the native compiler *really* works."
-  (and (fboundp 'native-compile)          ; symbol exists
-       (require 'comp nil t)             ; library is loaded (≥ 28)
-       (functionp 'native-comp-available-p)
-       (native-comp-available-p)))       ; linked with libgccjit
-
-(defun my/compiled-path (el-file)
-  "Best existing artefact for EL-FILE: .eln ▸ .elc ▸ EL-FILE."
-  (let ((eln (and (fboundp 'native-compiled-file)
-                  (native-compiled-file el-file)))
-        (elc (byte-compile-dest-file el-file)))
-    (cond ((and eln (file-exists-p eln)) eln)
-          ((file-exists-p elc)           elc)
-          (t                             el-file))))
-
-
-
-(defun my/load-org-config (org-file)
-  "Tangle ORG-FILE → *.el, compile if needed, then load it."
-  (require 'ob-tangle) ; Ensure tangling functions are available
-  (let* ((org-file   (expand-file-name org-file))
-         (el-file    (concat (file-name-sans-extension org-file) ".el"))
-         ;; Get the path to the best *existing* compiled artifact or the .el file
-         (existing-bin (my/compiled-path el-file)))
-
-    ;; Fast path: if a compiled version exists and it's newer than the .org source, just load it.
-    ;; `existing-bin` could be .eln, .elc, or .el itself if nothing compiled yet.
-    ;; We only take the fast path if `existing-bin` is NOT the .el file (i.e., it's a compiled version)
-    ;; AND this compiled version is up-to-date with respect to the .org file.
-    (if (and existing-bin
-             (not (string= el-file existing-bin)) ; Ensure 'existing-bin' is a compiled file, not the .el itself
-             (file-exists-p existing-bin)
-             (file-newer-than-file-p existing-bin org-file))
-        (progn
-          ;; (message "Fast path: Loading pre-compiled %s (for %s)" existing-bin org-file)
-          (load (file-name-sans-extension el-file) nil 'nomessage))
-
-      ;; Slow path: (Re)tangle and/or (re)compile, then load.
-      (progn
-        ;; (message "Slow path: Processing %s" org-file)
-        ;; 1 ─ Tangle if .el is missing or .org is newer
-        (when (or (not (file-exists-p el-file))
-                  (file-newer-than-file-p org-file el-file))
-          ;; (message "Tangling %s -> %s" org-file el-file)
-          (org-babel-tangle-file org-file el-file "emacs-lisp"))
-
-        ;; Proceed only if tangling produced the .el file
-        (when (file-exists-p el-file)
-          ;; Update `bin` to reflect the best compiled version *after* potential re-tangle/re-compile
-          ;; This check is for the state *before* we potentially compile *now*.
-          (let ((current-compiled-artifact (my/compiled-path el-file)))
-            ;; 2 ─ (Re)compile if .el is newer than its current compiled artifact,
-            ;;     or if the compiled artifact doesn't exist (e.g. current-compiled-artifact is el-file itself).
-            (when (or (not (file-exists-p current-compiled-artifact))
-                      (string= el-file current-compiled-artifact) ; .el file is the "bin", so it needs compilation
-                      (file-newer-than-file-p el-file current-compiled-artifact))
-              ;; (message "Compiling %s..." el-file)
-              (if (my/native-comp-available-p)
-                  (native-compile el-file)
-                (byte-compile-file el-file))
-              ;; 3 ─ Hide *Compile-Log*
-              (when-let ((buf (get-buffer "*Compile-Log*"))) (kill-buffer buf))))
-
-          ;; 4 ─ Load the code
-          ;; (message "Loading (after potential tangle/compile) %s" (file-name-sans-extension el-file))
-          (load (file-name-sans-extension el-file) nil 'nomessage))))))
-
-;;; -----------------------------------------------------------
-
-(dolist (f '("~/emacs/emacs-settings/gnu-emacs-startup.org"
-             "~/emacs/emacs-settings/shared-functions.org"
-             "~/emacs/emacs-settings/spacecraft-mode.org"
-             "~/emacs/emacs-settings/pasteboard-copy-and-paste-functions.org"
-             "~/emacs/emacs-settings/search-commands.org"
-             "~/emacs/emacs-settings/fonts-and-themes.org"))
-  (my/load-org-config f))
 
 
 
 
-(load "/Users/jay/emacs/emacs-settings/jay-osx.el")
-(load "/Users/jay/emacs/external-packages/prelude/core/prelude-core.el")
 
-(autoload 'prelude-core "prelude-core" nil t)
 
-(load "/Users/jay/emacs/emacs-settings/skeletons.el")
-
-(autoload 'prelude-key-chord "prelude-key-chord" nil t)
-
-
-(load "/Users/jay/emacs/emacs-settings/org-roam-config.el")
-
-
-;; (load "/Users/jay/emacs/emacs-settings/poetry_JD.el")
-
-;; (load "/Users/jay/gnulisp/book-functions.el")
+(load "/Users/jay/emacs/emacs-settings/jay-osx.el")
+(org-babel-load-file "~/emacs/emacs-settings/gnu-emacs-startup.org")
+(org-babel-load-file "~/emacs/emacs-settings/shared-functions.org")
+(org-babel-load-file "~/emacs/emacs-settings/spacecraft-mode.org")
+(org-babel-load-file "~/emacs/emacs-settings/pasteboard-copy-and-paste-functions.org")
+(org-babel-load-file "/Users/jay/emacs/emacs-settings/search-commands.org")
+(org-babel-load-file "/Users/jay/emacs/emacs-settings/fonts-and-themes.org")
 ;; (load "/Users/jay/emacs/archive/email.el")
 ;; (org-babel-load-file "/Users/jay/emacs/external-packages/org-mime-stuff/org-mime-stuff.org")
-
+(load "/Users/jay/emacs/external-packages/prelude/core/prelude-core.el")
+(load "/Users/jay/emacs/emacs-settings/skeletons.el")
+(load "/Users/jay/emacs/emacs-settings/prelude-key-chord.el")
+;; (load "/Users/jay/gnulisp/book-functions.el")
+(load "/Users/jay/emacs/emacs-settings/poetry_JD.el")
 ;; (load "/Users/jay/emacs/emacs-settings/define-word.el")
 ;; (load "/Users/jay/emacs/emacs-settings/searchlink/searchlink-new.el")
 ;; (load "/Users/jay/emacs/emacs-settings/ivy-smex.el")
 ;; (load "/Users/jay/emacs/emacs-settings/emacs_friends.el")
 ;; (load "/Users/jay/gnulisp/org-image.el")
+(load "/Users/jay/emacs/emacs-settings/org-roam-config.el")
 ;;(load "/Users/jay/emacs/emacs-settings/org-roam-review.el")
 
 ;; (monaco-font)
@@ -266,7 +213,7 @@
 ;; (use-package rg)
 
 (use-package reveal-in-finder
-  :defer t
+  :defer
   )
 
 ;; (recenter-top-bottom)
@@ -289,17 +236,9 @@
             (smartparens-global-mode 1)
             ))
 
+(toggle-fullscreen)
 
-;;; --- Full-screen at start-up ---------------------------------------------
-(defun jd/enter-fullscreen-once ()
-  "Make the initial GUI frame full-screen, then remove the hook."
-  (when (and (display-graphic-p)      ; skip if running in a tty
-             (fboundp 'toggle-frame-fullscreen))  ; built-in since Emacs 24
-    (toggle-frame-fullscreen))
-  ;; Only need to run once:
-  (remove-hook 'window-setup-hook #'jd/enter-fullscreen-once))
 
-(add-hook 'window-setup-hook #'jd/enter-fullscreen-once)
 
 
 ;; (electric-pair-mode 1)
@@ -362,6 +301,9 @@
 
 
 
+;; To permanently enable mode line display of org clock, add this snippet to your dotspacemacs/user-config function:
+;; (setq spaceline-org-clock-p t)
+
 (setq user-init-file "/Users/jay/emacs/emacs-settings/spacemacs.d/init.el")
 
 (setq case-fold-search t)
@@ -381,7 +323,7 @@
 ;; (server-reflash)
 ;;  (triplicate-code)
 ;; (embiggen-text)
-
+(scrollbar-init)
 
 ;; (setq max-lisp-eval-depth 10000)
 ;;; When opening a file that is a symbolic link, don't ask whether I
@@ -399,9 +341,9 @@
 
 
 (use-package server
-  )
+  :defer)
 (when (server-running-p)
   (server-force-delete))
-(server-start)
+;; (server-start)
 
 (redbold)
diff --git a/spacemacs.d/init.el b/spacemacs.d/init.el
index 7631d81..6f323e8 100644
--- a/spacemacs.d/init.el
+++ b/spacemacs.d/init.el
@@ -4,8 +4,6 @@
 
 
 
-
-
 (defmacro org-assert-version ()
   "Assert compile time and runtime version match."
   ;; We intentionally use a more permissive `org-release' instead of
@@ -98,33 +96,43 @@ This function should only modify configuration layer settings."
      ;; `M-m f e R' (Emacs style) to install them.
      ;; ----------------------------------------------------------------
 
+     ;; ag-general
+     ;; ag-lang-tools
      auto-completion
      ;; better-defaults
-     (compleseus :variables
-                 compleseus-engine 'vertico)
+     compleseus
      ;; chrome
      ;; deft
      ;; emoji
      ;; floobits
-
+     ;; helm
      ;; html
+     ;; ivy
      ;; jay
      ;; markdown
+     ;; mu4e
      emacs-lisp
      ;; (multiple-cursors :variables multiple-cursors-backend 'mc)
      (org
+      :defer
       :variables
       org-enable-roam-protocol t
       org-enable-roam-support t
-      org-export-backends '(ascii html icalendar latex md))
+      org-export-backends '(ascii html icalendar latex md)
+                                        ; org-enable-hugo-support to
+
+      :config
+      (require 'ox-extra)
+      (ox-extra-activate '(ignore-headlines))
+      )
      osx
-     ;; pdf
-     ;; python
+     ;; shell-scripts
      spell-checking
      syntax-checking ; this is the layer with flycheck
      ;; treemacs
      ;; typography
      ;; xkcd
+
      )
    ;; List of additional packages that will be installed without being wrapped
    ;; in a layer (generally the packages are installed only and should still be
@@ -135,167 +143,160 @@ This function should only modify configuration layer settings."
    ;; `:location' property: '(your-package :location "~/path/to/your-package/")
    ;; Also include the dependencies as they will not be resolved automatically.
    dotspacemacs-additional-packages '(
-                                      affe
                                       amx
-                                      auto-complete
-                                      beacon
+                                      affe
+                                      org-transclusion
+                                      ctrlf
+                                      ;; web-mode
+                                      ox-twbs
+                                      mwim
+                                      ;; beacon
                                       bind-key
-                                      bind-map
                                       bui
                                       caps-lock
                                       captain
                                       change-inner
-                                      company
-                                      consult-ag
+                                      ;; company
                                       consult-dir
+                                      consult-ag
                                       consult-org-roam
+                                      ;; benchmark-init
                                       consult-projectile ;; searches filenames
                                       counsel
                                       counsel-fd
                                       counsel-projectile
                                       crux
-                                      ctrlf
                                       dash
                                       deadgrep
                                       define-word
                                       dired-quick-sort
+                                      ;; dired-sort-menu
                                       discover-my-major
                                       emacsql
-                                      evil-evilified-state
-                                      exec-path-from-shell
+                                      ;; embark
+                                      ;; epc
+                                      ;; exec-path-from-shell
                                       expand-region
                                       f
                                       fancy-narrow
                                       fasd
                                       flyspell-lazy
+                                      ;; frame-cmds
                                       fuzzy
-                                      gcmh ; The Garbage Collector Magic Hack
+                                      gcmh ;; The Garbage Collector Magic Hack
                                       google-this
+                                      ;; helpful
+                                      ;; ido-hacks
+                                      ;; jinx
                                       key-seq
-                                      magit-section
+                                      ;; lister ;; (for delve)
+                                      ;; magit
+                                      ;; markdown-mode
                                       maxframe
                                       multiple-cursors
                                       mw-thesaurus
-                                      mwim
                                       olivetti
                                       openwith
                                       orderless
                                       ;; org-ai
-                                      org-contrib
                                       org-autolist
                                       org-bookmark-heading
+                                      org-contrib
+                                      ;; org-drill
+                                      ;; org-fstree
                                       org-mac-link
                                       org-pomodoro
                                       org-ql
                                       org-roam
-                                      org-roam-ui
-                                      org-transclusion
+                                      ;; org-roam-ui
+                                      ;; org-superstar
                                       ox-clip
+                                      ;; ox-gfm
                                       ox-timeline
                                       ox-tufte
-                                      ox-twbs
                                       palimpsest
                                       paredit
                                       peg
                                       persist
+                                      ;; persp-mode
                                       point-stack
                                       popup
+                                      ;; project-explorer
                                       projectile-ripgrep
                                       quelpa-use-package
                                       rainbow-mode
-                                      re-builder
+                                      ;; re-builder
                                       recentf
-                                      regex-tool
+                                      ;; regex-tool
                                       rg
                                       ripgrep
                                       rspec-mode
                                       s
-                                      sdcv
-                                      smex
+                                      ;; scratch
+                                      ;; scratch-message
+                                      ;;  sdcv
+                                      ;; simple-httpd
+                                      ;; stripe-buffer
                                       sudo-edit
                                       sync-recentf
-                                      tiny
+                                        ; tabbar
+                                      ;; tiny
                                       titlecase
                                       ts
                                       unfill
                                       visible-mark
                                       wc-goal-mode
                                       wc-mode
-                                      web-mode
+                                      ;; web-mode
                                       with-editor
                                       wrap-region
+                                      ;; xah-replace-pairs
+
                                       ;; ag
+                                      auto-complete
                                       ;; blimp
                                       ;; bongo
-                                      ;; buffer-stack
-                                      ;; cheatsheet
                                       ;; command-log-mode
-                                      ;; consult-notes
                                       ;; cyberpunk-theme
                                       ;; dired-hacks-utils
                                       ;; dired-single
-                                      ;; dired-sort-menu
                                       ;; early-init
-                                      ;; embark
                                       ;; emms
-                                      ;; epc
-                                      ;; eww
                                       ;; fastdef
                                       ;; focus
                                       ;; fountain-mode
-                                      ;; frame-cmds
                                       ;; frame-restore
                                       ;; gist
-                                      ;; gptel
                                       ;; graphviz-dot-mode
-                                      ;; helpful
-                                      ;; ido-hacks
                                       ;; imenu-list
-                                      ;; jinx
                                       ;; key-chord
-                                      ;; lister ;; (for delve)
-                                      ;; magit
                                       ;; magit-section
-                                      ;; markdown-mode
                                       ;; mpv
                                       ;; multicolumn
                                       ;; nm
-                                      ;; org-contrib
                                       ;; org-download
-                                      ;; org-drill
-                                      ;; org-fstree
                                       ;; org-mime
                                       ;; org-noter
                                       ;; org-noter-pdftools
                                       ;; org-pdftools
                                       ;; org-sidebar
-                                      ;; org-superstar
                                       ;; ox-epub
-                                      ;; ox-gfm
                                       ;; ox-twbs
-                                      ;; persp-mode
                                       ;; plain-org-wiki
                                       ;; polymode
-                                      ;; project-explorer
-                                      ;; scratch
-                                      ;; scratch-message
-                                      ;; simple-httpd
                                       ;; solarized-theme
                                       ;; spotify
-                                      ;; stripe-buffer
                                       ;; sublime-themes
-                                      ;; tabbar
                                       ;; tldr
                                       ;; transcribe
-                                      ;; web-mode
                                       ;; websocket
                                       ;; writeroom-mode
                                       ;; wttrin
-                                      ;; xah-replace-pairs
                                       ;; xml-rpc
                                       ;; yahoo-weather
                                       ;; zenburn-theme
                                       ;; zone
+                                      ;; smex
                                       )
    ;; A list of packages that cannot be updated.
    dotspacemacs-frozen-packages '()
@@ -623,7 +624,7 @@ It should only modify the values of Spacemacs settings."
    ;; If t, enable the `package-quickstart' feature to avoid full package
    ;; loading, otherwise no `package-quickstart' attemption (default nil).
    ;; Refer the FAQ.org "package-quickstart" section for details.
-   dotspacemacs-enable-package-quickstart nil
+   dotspacemacs-enable-package-quickstart t
 
    ;; If non-nil a progress bar is displayed when spacemacs is loading. This
    ;; may increase the boot time on some systems and emacs builds, set it to
@@ -842,34 +843,43 @@ configuration.
 It is mostly for variables that should be set before packages are loaded.
 If you are unsure, try setting them in `dotspacemacs/user-config' first."
 
+
+  (setq org-babel-use-quick-and-dirty-noweb-expansion t)
+
+  ;; Disable server mode to prevent deadlocks
+  (setq dotspacemacs-enable-server nil
+        dotspacemacs-persistent-server nil)
+
   ;; (setq debug-on-error t)
 
-  ;; user-init  (before any packages are installed)
-  (setq package-archives
-        '(("gnu"   . "https://elpa.gnu.org/packages/")
-          ("melpa" . "https://melpa.org/packages/")))
-  (package-initialize)
+  (add-to-list 'native-comp-eln-load-path "~/.cache/emacs/aot")
+
 
-  (unless package-archive-contents          ; first run, grab index
-    (package-refresh-contents))
+  ;; In ~/.emacs.d/early-init.el
 
+  (setq package-native-compile t)
 
+  ;; user-init, ONE copy only:
+  (setq native-comp-jit-compilation t
+        native-comp-deferred-compilation t
+        gc-cons-threshold (* 64 1024 1024)
+        gc-cons-percentage 0.1
+        package-quickstart t
+        dotspacemacs-enable-package-quickstart t)
 
-  ;; early in init.el / early-init.el
-  (let ((old-gc gc-cons-threshold)
-        (old-handlers file-name-handler-alist))
-    (setq gc-cons-threshold (* 256 1024 1024)      ; 256 MB
-          file-name-handler-alist nil)
-    (add-hook 'emacs-startup-hook
-              (lambda ()
-                (setq gc-cons-threshold (* 16 1024 1024)   ; 16 MB again
-                      file-name-handler-alist old-handlers))))
 
-  (setq native-comp-enable-subr-trampolines nil)
 
+  ;; Silence native-comp warnings
   (setq native-comp-async-report-warnings-errors 'silent)
-  (setq native-comp-jit-compilation nil)
 
+  ;; Or if you want to see only errors, not warnings:
+  ;; (setq native-comp-async-report-warnings-errors nil)
+
+  ;; Silence byte-compiler warnings
+  (setq byte-compile-warnings '(not obsolete))
+
+  ;; Silence warnings during startup
+  (setq warning-minimum-level :error)
 
 
   ;; dotspacemacs/user-init  (or early in init.el)
@@ -877,15 +887,6 @@ If you are unsure, try setting them in `dotspacemacs/user-config' first."
         dotspacemacs-check-for-update nil     ; Spacemacs: skip version ping
         dotspacemacs-enable-package-cleanup nil) ; don't touch packages
 
-  ;; ---------------------------------------------------------------------
-  ;; 1. pick a stash dir and make sure it exists
-  (defconst jd/cache-dir "~/.emacs.d/.cache/var/")
-  (make-directory jd/cache-dir t)
-
-  ;; 2. point the two offenders there
-  (setq amx-items-file          (expand-file-name "amx-items"           jd/cache-dir)
-        package-quickstart-file (expand-file-name "package-quickstart.el" jd/cache-dir))
-  ;; ---------------------------------------------------------------------
 
 
 
@@ -912,9 +913,61 @@ This function is called at the very end of Spacemacs startup, after layer
 configuration.
 Put your configuration code here, except for variables that should be set
 before packages are loaded."
-  (setq gc-cons-threshold 100000000) ; 32mb, or 64mb, or *maybe* 128mb, BUT NOT 512mb
-  (setq read-process-output-max (* 1024 1024))
-                                        ; Set (setq gc-cons-threshold 100000000) and (setq read-process-output-max (* 1024 1024)) early in your config.
+
+;;; --- macOS 15.5 deadlock workaround ----------------------------------------
+  (when (eq system-type 'darwin)
+    (setq process-adaptive-read-buffering nil
+          process-connection-type nil))
+
+;;; --- Org mode performance & stability --------------------------------------
+  ;; Disable cache until deadlock is resolved
+  (setq org-element-use-cache nil
+        org-element-cache-persistent nil
+        org-persist-disable-when-emacs-Q t
+        org-fold-core-style 'text-properties
+        org-agenda-inhibit-startup t
+        org-startup-folded 'showeverything
+        org-startup-indented nil)
+
+;;; --- I/O & subprocesses ----------------------------------------------------
+  ;; LSP: throttle file-watchers and increase pipe buffer
+  (setq lsp-enable-file-watchers nil
+        lsp-idle-delay 0.5
+        read-process-output-max (* 2 1024 1024))
+
+  ;; Kill noisy language-server buffers silently when Emacs exits
+  (add-hook 'lsp-after-initialize-hook
+            (lambda ()
+              (when (get-buffer-process (current-buffer))
+                (set-process-query-on-exit-flag
+                 (get-buffer-process (current-buffer)) nil))))
+
+  ;; VC: drop Git polling (macOS bug in 29.x)
+  (setq vc-handled-backends '(SVN Hg Bzr RCS CVS SCCS))
+
+  ;; TRAMP: avoid ssh ControlMaster hangs on Sonoma/Sequoia
+  (setq tramp-ssh-controlmaster-options "-o ControlPath=none"
+        tramp-verbose 0)
+
+  ;; Give Emacs 5 s to wait for process I/O, then move on
+  (setq accept-process-output-timeout 5)
+
+;;; --- Memory & GC -----------------------------------------------------------
+  (setq gc-cons-threshold (* 64 1024 1024)
+        gc-cons-percentage 0.1)
+
+;;; --- Files & locks ---------------------------------------------------------
+  (setq create-lockfiles nil
+        auto-save-default t
+        auto-save-interval 300)
+
+;;; --- Emergency exit --------------------------------------------------------
+  ;; Panic button: C-c C-! to save and exit
+  (global-set-key (kbd "C-c C-!")
+                  (lambda () (interactive)
+                    (save-some-buffers t)
+                    (kill-emacs)))
+
 
 
   ;; Define the minor mode so it's loaded on startup.
@@ -944,10 +997,6 @@ before packages are loaded."
 
   (setq Info-additional-directory-list nil)
 
-  ;; Enable special export keywords such as #+EXCLUDE_TAGS, #+IGNORE_HEADLINES …
-  ;; ▸ Activate extra export keywords (IGNORE_HEADLINES etc.)
-
-
 
   ;; 1. ordinary “safe local variables”
   (add-to-list 'safe-local-variable-values '(lexical-binding . t))
@@ -959,29 +1008,10 @@ before packages are loaded."
     (add-to-list 'safe-local-eval-forms
                  '(org-config-files-local-mode 1)))
 
-
-
   (load "/Users/jay/emacs/emacs-settings/spacemacs-new-config.el")
-
-
-
-  (autoload 'smart-return        ; symbol to autoload
-    "smart-return"              ; file that defines it  (without .el)
-    nil                         ; no docstring override (use the one in the file)
-    t)
-
-
-  (autoload 'buffer-stack        ; symbol to autoload
-    "buffer-stack"              ; file that defines it  (without .el)
-    nil                         ; no docstring override (use the one in the file)
-    t)
-
-  (autoload 'frame-cmds        ; symbol to autoload
-    "frame-cmds"              ; file that defines it  (without .el)
-    nil                         ; no docstring override (use the one in the file)
-    t)
-
-
+  (load "/Users/jay/gnulisp/smart-return.el")
+  (load "/Users/jay/emacs/emacs-settings/elpa-supplement/buffer-stack.el")
+  (load "/Users/jay/emacs/emacs-settings/elpa-supplement/frame-cmds.el")
   (load "/Users/jay/emacs/local-config.el")
   ;;  (load "/Users/jay/emacs/emacs-settings/aibo-config.el")
   ;; (load "/Users/jay/emacs/emacs-settings/aibo-power-pack.el")
@@ -1026,7 +1056,6 @@ This function is called at the very end of Spacemacs initialization."
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
-   '(amx-history-length 199)
    '(calendar-week-start-day 1)
    '(counsel-search-engine 'google)
    '(deft-directory
@@ -1035,7 +1064,6 @@ This function is called at the very end of Spacemacs initialization."
    '(evil-want-Y-yank-to-eol nil)
    '(eww-search-prefix "https://www.google.com/search?q=jay+dixit/?q=")
    '(flycheck-disabled-checkers '(proselint))
-   '(gptel-model "gpt-4")
    '(jinx-include-modes '(text-mode prog-mode conf-mode org-mode))
    '(line-number-mode t)
    '(marginalia-align 'left nil nil "Customized with use-package marginalia")
@@ -1064,8 +1092,6 @@ This function is called at the very end of Spacemacs initialization."
    '(org-twbs-head-include-default-style nil)
    '(org-twbs-head-include-scripts nil)
    '(org-twbs-htmlize-output-type 'css)
-   '(package-selected-packages
-     '(smex emacsql-sqlite s mw-thesaurus org-bookmark-heading org-mac-link org-pomodoro org-roam-ui org-sticky-header ox-clip ox-tufte palimpsest paredit point-stack popup quelpa-use-package rainbow-mode re-builder recentf regex-tool rspec-mode sudo-edit tiny titlecase unfill visible-mark wc-mode web-mode wrap-region xah-replace-pairs))
    '(paradox-github-token t)
    '(smex-save-file "/Users/jay/emacs/local-emacs-config/smex-items")
    '(sp-escape-wrapped-region nil)
