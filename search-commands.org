* search
#+begin_src emacs-lisp
(define-key key-minor-mode-map (kbd "s-/ gr") 'consult-grep)

;; Search
(global-set-key (kbd "s-/ dg") 'deadgrep-current-directory) ; not incremental. but nicely formatted. lays it all out nicely in a buffer.
(global-set-key (kbd "s-/ pa") 'counsel-projectile-ag) ; as an alternative to deadgrep check out ag so maybe it's better

(global-set-key (kbd "s-/ rg") 'consult-ripgrep-current-directory) ; pretty slick, shows you the actual file context

(global-set-key (kbd "s-k rg") 'consult-ripgrep-current-directory) ; pretty slick, shows you the actual file context


(global-set-key (kbd "s-/ gg") 'consult-git-grep) ; pretty great, like projectile, doesn't respect .projectile

;; (global-set-key (kbd "s-/ st") 'consult-) ;
;; (global-set-key (kbd "s-/ l") 'counsel-) ;

(global-set-key (kbd "s-/ rr") 'roam-rg-search)

#+end_src


* roam-rg-search
Source: [[https://org-roam.discourse.group/t/using-consult-ripgrep-with-org-roam-for-searching-notes/1226/1][Using consult-ripgrep with org-roam for searching notes - How To - Org-roam]]

#+begin_src emacs-lisp
(defun roam-rg-search ()
 "Search org-roam directory using consult-ripgrep. With live-preview."
 (interactive)
 (let ((consult-ripgrep-command "rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS"))
 (consult-ripgrep org-roam-directory)))

(defun counsel-ag-roam ()
 "Do counsel-ag on the org roam directory"
 (interactive)
 (counsel-ag nil org-roam-directory))

#+end_src


* consult notes
Can set paths later. Instrctions here:
[[https://github.com/mclear-tools/consult-notes][mclear-tools/consult-notes: Use consult to search notes]]

#+begin_example emacs-lisp
(use-package consult-notes
 :commands (consult-notes
       consult-notes-search-in-all-notes
       ;; if using org-roam
       consult-notes-org-roam-find-node
       consult-notes-org-roam-find-node-relation)
 :config
 (setq consult-notes-file-dir-sources '(("Name" ?key "path/to/dir"))) ;; Set notes dir(s), see below
 ;; Set org-roam integration, denote integration, or org-heading integration e.g.:
 (setq consult-notes-org-headings-files '("~/path/to/file1.org"
                      "~/path/to/file2.org"))
 (consult-notes-org-headings-mode)
 (when (locate-library "denote")
  (consult-notes-denote-mode)))
#+end_example



* searching current directory instead of project directory
By default, consult-ripgrep it uses the *project directory* of the current buffer. [[https://emacs.stackexchange.com/questions/74462/how-to-properly-use-consult-ripgrep-to-search-through-org-roam-notes][If you want to change it to the *current directory*, you can either pass it explicitly as an argument, or use a prefix argument (C-u) to prompt for the directory]][[https://emacs.stackexchange.com/questions/74462/how-to-properly-use-consult-ripgrep-to-search-through-org-roam-notes][^{2}]].

You can define a custom function that calls consult-ripgrep with the current directory as follows:

#+begin_src emacs-lisp
(defun consult-ripgrep-current-directory ()
 "Search current directory using consult-ripgrep."
 (interactive)
 (consult-ripgrep default-directory))


(defun deadgrep-current-directory ()
 "Search current directory using deadgrep."
 (interactive)
 (let ((search-term (read-string "Search term: ")))
  (deadgrep search-term default-directory)))

(defalias 'deadgrep 'deadgrep-project-directory)

(defalias 'rg-current-directory 'rg-dwim-current-dir)
(defalias 'rg-project-directory 'rg-dwim-project-dir)
(defalias 'rg-current-file 'rg-dwim-current-file)

#+end_src


* consult org roam
~consult-org-roam.el~ provides several functions to connect [[https://github.com/org-roam/org-roam][org-roam]] to [[https://github.com/minad/consult][consult]]'s completing read interface.

First, it provides the following standalone functions which enhance =org-roam='s capabilities:

- ~consult-org-roam-file-find~ :: Search your org-roam files with consult's completing-read and its live preview
- ~consult-org-roam-backlinks~ :: List backlinks to ~org-roam-node-at-point~ (e.g. currently open note) and sift through them with consult's completing-read and its live preview
- ~consult-org-roam-forward-links~ :: List forward links contained in the currently opened note
- ~consult-org-roam-search~ :: [[https://github.com/minad/consult#asynchronous-search][Asynchronously search]] your roam-directory
 with [[https://www.gnu.org/software/grep/manual/grep.html][grep]] or [[https://github.com/BurntSushi/ripgrep][ripgrep]]

Second, it provides a minor mode called ~consult-org-roam-mode~. When activated, ~org-roam-node-read~ is overridden, which is used by ~org-roam-node-find~, ~org-roam-node-insert~ and ~org-roam-refile~. By doing so, all functions utilizing completing-read resort to ~consult~ for performing completion. Furthermore, the same is done for ~org-roam-ref-read~ so that ~consult~ is used for completing references as well.

Eventually, you might want to suppress previewing for certain functions. This can be done by adding using consult-customize.

#+begin_src emacs-lisp
 (use-package consult-org-roam
  :ensure t
  :after org-roam
  :init
  (require 'consult-org-roam)
  ;; Activate the minor mode
  (consult-org-roam-mode 1)
  :custom
  ;; Use `ripgrep' for searching with `consult-org-roam-search'
  (consult-org-roam-grep-func #'consult-ripgrep)
  ;; Configure a custom narrow key for `consult-buffer'
  (consult-org-roam-buffer-narrow-key ?r)
  ;; Display org-roam buffers right after non-org-roam buffers
  ;; in consult-buffer (and not down at the bottom)
  (consult-org-roam-buffer-after-buffers t)
  :config
  ;; Eventually suppress previewing for certain functions
  (consult-customize
  consult-org-roam-forward-links
  :preview-key (kbd "M-."))
  :bind
  ;; Define some convenient keybindings as an addition
  ;; ("C-c n e" . consult-org-roam-file-find)
  ;; ("C-c n b" . consult-org-roam-backlinks)
  ;; ("C-c n l" . consult-org-roam-forward-links)
  ;; ("C-c n r" . consult-org-roam-search)
)
#+end_src

* keybindings
#+begin_src emacs-lisp
;; (define-key key-minor-mode-map (kbd "s-G") 'counsel-projectile-grep); this fails to ignore files specified in .projectile
;; (define-key key-minor-mode-map (kbd "s-G") 'projectile-grep) ; this successfully ignores those files but isn't incremental

(define-key key-minor-mode-map (kbd "C-s-g ") 'consult-ripgrep-current-directory)
(define-key key-minor-mode-map (kbd "s-G") 'counsel-projectile-ag)

(define-key key-minor-mode-map (kbd "s-/ g l") 'affe-grep-gnulisp-directory)

(define-key key-minor-mode-map (kbd "s-/ b s") 'affe-grep-bash-scripts)
(define-key key-minor-mode-map (kbd "s-/ b p") 'affe-grep-bash-profile)


(define-key key-minor-mode-map (kbd "s-/ b p") 'affe-grep-bash-profile)

(define-key key-minor-mode-map (kbd "s-/ o r") 'consult-org-roam-search)
(define-key key-minor-mode-map (kbd "s-/ b p") 'affe-grep-org-roam)

#+end_src

